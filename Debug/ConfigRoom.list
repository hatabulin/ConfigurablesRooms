
ConfigRoom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  08006ce4  08006ce4  00016ce4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000348  20000000  08007be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018ec  20000348  08007f2c  00020348  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001c34  08007f2c  00021c34  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002fc89  00000000  00000000  00020371  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000674d  00000000  00000000  0004fffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ea7e  00000000  00000000  00056747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014e0  00000000  00000000  000651c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c28  00000000  00000000  000666a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c205  00000000  00000000  000682d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006680  00000000  00000000  000744d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007ab55  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004178  00000000  00000000  0007abd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000348 	.word	0x20000348
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ccc 	.word	0x08006ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000034c 	.word	0x2000034c
 8000148:	08006ccc 	.word	0x08006ccc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_llsr>:
 800015c:	40d0      	lsrs	r0, r2
 800015e:	1c0b      	adds	r3, r1, #0
 8000160:	40d1      	lsrs	r1, r2
 8000162:	469c      	mov	ip, r3
 8000164:	3a20      	subs	r2, #32
 8000166:	40d3      	lsrs	r3, r2
 8000168:	4318      	orrs	r0, r3
 800016a:	4252      	negs	r2, r2
 800016c:	4663      	mov	r3, ip
 800016e:	4093      	lsls	r3, r2
 8000170:	4318      	orrs	r0, r3
 8000172:	4770      	bx	lr

08000174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000174:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <HAL_InitTick+0x3c>)
{
 8000178:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800017a:	7818      	ldrb	r0, [r3, #0]
 800017c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000180:	fbb3 f3f0 	udiv	r3, r3, r0
 8000184:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <HAL_InitTick+0x40>)
 8000186:	6810      	ldr	r0, [r2, #0]
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f89e 	bl	80002cc <HAL_SYSTICK_Config>
 8000190:	4604      	mov	r4, r0
 8000192:	b958      	cbnz	r0, 80001ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000194:	2d0f      	cmp	r5, #15
 8000196:	d809      	bhi.n	80001ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000198:	4602      	mov	r2, r0
 800019a:	4629      	mov	r1, r5
 800019c:	f04f 30ff 	mov.w	r0, #4294967295
 80001a0:	f000 f854 	bl	800024c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <HAL_InitTick+0x44>)
 80001a6:	4620      	mov	r0, r4
 80001a8:	601d      	str	r5, [r3, #0]
 80001aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80001ac:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001ae:	bd38      	pop	{r3, r4, r5, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	20000130 	.word	0x20000130
 80001b8:	20000004 	.word	0x20000004

080001bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	4a07      	ldr	r2, [pc, #28]	; (80001dc <HAL_Init+0x20>)
{
 80001be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c4:	f043 0310 	orr.w	r3, r3, #16
 80001c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	f000 f82d 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f7ff ffd0 	bl	8000174 <HAL_InitTick>
  HAL_MspInit();
 80001d4:	f005 fbfe 	bl	80059d4 <HAL_MspInit>
}
 80001d8:	2000      	movs	r0, #0
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	40022000 	.word	0x40022000

080001e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <HAL_IncTick+0x10>)
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <HAL_IncTick+0x14>)
 80001e4:	6811      	ldr	r1, [r2, #0]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	440b      	add	r3, r1
 80001ea:	6013      	str	r3, [r2, #0]
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000060c 	.word	0x2000060c
 80001f4:	20000000 	.word	0x20000000

080001f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f8:	4b01      	ldr	r3, [pc, #4]	; (8000200 <HAL_GetTick+0x8>)
 80001fa:	6818      	ldr	r0, [r3, #0]
}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	2000060c 	.word	0x2000060c

08000204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000204:	b538      	push	{r3, r4, r5, lr}
 8000206:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000208:	f7ff fff6 	bl	80001f8 <HAL_GetTick>
 800020c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800020e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000210:	bf1e      	ittt	ne
 8000212:	4b04      	ldrne	r3, [pc, #16]	; (8000224 <HAL_Delay+0x20>)
 8000214:	781b      	ldrbne	r3, [r3, #0]
 8000216:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000218:	f7ff ffee 	bl	80001f8 <HAL_GetTick>
 800021c:	1b40      	subs	r0, r0, r5
 800021e:	4284      	cmp	r4, r0
 8000220:	d8fa      	bhi.n	8000218 <HAL_Delay+0x14>
  {
  }
}
 8000222:	bd38      	pop	{r3, r4, r5, pc}
 8000224:	20000000 	.word	0x20000000

08000228 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800022a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800022e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000232:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000236:	041b      	lsls	r3, r3, #16
 8000238:	0c1b      	lsrs	r3, r3, #16
 800023a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000242:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000244:	60d3      	str	r3, [r2, #12]
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800024e:	b530      	push	{r4, r5, lr}
 8000250:	68dc      	ldr	r4, [r3, #12]
 8000252:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000256:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025c:	2b04      	cmp	r3, #4
 800025e:	bf28      	it	cs
 8000260:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000264:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000268:	bf98      	it	ls
 800026a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	fa05 f303 	lsl.w	r3, r5, r3
 8000270:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000274:	bf88      	it	hi
 8000276:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000278:	4019      	ands	r1, r3
 800027a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800027c:	fa05 f404 	lsl.w	r4, r5, r4
 8000280:	3c01      	subs	r4, #1
 8000282:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000284:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000286:	ea42 0201 	orr.w	r2, r2, r1
 800028a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	bfaf      	iteee	ge
 8000290:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	4b06      	ldrlt	r3, [pc, #24]	; (80002b0 <HAL_NVIC_SetPriority+0x64>)
 8000296:	f000 000f 	andlt.w	r0, r0, #15
 800029a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	bfa5      	ittet	ge
 800029e:	b2d2      	uxtbge	r2, r2
 80002a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000ed14 	.word	0xe000ed14

080002b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b4:	2301      	movs	r3, #1
 80002b6:	0942      	lsrs	r2, r0, #5
 80002b8:	f000 001f 	and.w	r0, r0, #31
 80002bc:	fa03 f000 	lsl.w	r0, r3, r0
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <HAL_NVIC_EnableIRQ+0x14>)
 80002c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100

080002cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002cc:	3801      	subs	r0, #1
 80002ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d2:	d20a      	bcs.n	80002ea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002fa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	bf0c      	ite	eq
 8000300:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	f022 0204 	bicne.w	r2, r2, #4
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	4770      	bx	lr
 800030c:	e000e010 	.word	0xe000e010

08000310 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000310:	4770      	bx	lr

08000312 <HAL_SYSTICK_IRQHandler>:
{
 8000312:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000314:	f7ff fffc 	bl	8000310 <HAL_SYSTICK_Callback>
 8000318:	bd08      	pop	{r3, pc}
	...

0800031c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800031c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000320:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000322:	2b02      	cmp	r3, #2
 8000324:	d003      	beq.n	800032e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000326:	2304      	movs	r3, #4
 8000328:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800032a:	2001      	movs	r0, #1
 800032c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800032e:	6803      	ldr	r3, [r0, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	f022 020e 	bic.w	r2, r2, #14
 8000336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	f022 0201 	bic.w	r2, r2, #1
 800033e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000340:	4a18      	ldr	r2, [pc, #96]	; (80003a4 <HAL_DMA_Abort_IT+0x88>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d01f      	beq.n	8000386 <HAL_DMA_Abort_IT+0x6a>
 8000346:	3214      	adds	r2, #20
 8000348:	4293      	cmp	r3, r2
 800034a:	d01e      	beq.n	800038a <HAL_DMA_Abort_IT+0x6e>
 800034c:	3214      	adds	r2, #20
 800034e:	4293      	cmp	r3, r2
 8000350:	d01d      	beq.n	800038e <HAL_DMA_Abort_IT+0x72>
 8000352:	3214      	adds	r2, #20
 8000354:	4293      	cmp	r3, r2
 8000356:	d01d      	beq.n	8000394 <HAL_DMA_Abort_IT+0x78>
 8000358:	3214      	adds	r2, #20
 800035a:	4293      	cmp	r3, r2
 800035c:	d01d      	beq.n	800039a <HAL_DMA_Abort_IT+0x7e>
 800035e:	3214      	adds	r2, #20
 8000360:	4293      	cmp	r3, r2
 8000362:	bf0c      	ite	eq
 8000364:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000368:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800036e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000370:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000372:	2301      	movs	r3, #1
 8000374:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000378:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800037a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800037e:	b17b      	cbz	r3, 80003a0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000380:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000382:	4620      	mov	r0, r4
 8000384:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000386:	2301      	movs	r3, #1
 8000388:	e7f0      	b.n	800036c <HAL_DMA_Abort_IT+0x50>
 800038a:	2310      	movs	r3, #16
 800038c:	e7ee      	b.n	800036c <HAL_DMA_Abort_IT+0x50>
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	e7eb      	b.n	800036c <HAL_DMA_Abort_IT+0x50>
 8000394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000398:	e7e8      	b.n	800036c <HAL_DMA_Abort_IT+0x50>
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	e7e5      	b.n	800036c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80003a0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80003a2:	bd10      	pop	{r4, pc}
 80003a4:	40020008 	.word	0x40020008
 80003a8:	40020000 	.word	0x40020000

080003ac <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <FLASH_SetErrorCode+0x48>)
 80003ae:	68d3      	ldr	r3, [r2, #12]
 80003b0:	f013 0310 	ands.w	r3, r3, #16
 80003b4:	d005      	beq.n	80003c2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80003b6:	4910      	ldr	r1, [pc, #64]	; (80003f8 <FLASH_SetErrorCode+0x4c>)
 80003b8:	69cb      	ldr	r3, [r1, #28]
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80003c0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003c2:	68d2      	ldr	r2, [r2, #12]
 80003c4:	0750      	lsls	r0, r2, #29
 80003c6:	d506      	bpl.n	80003d6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80003c8:	490b      	ldr	r1, [pc, #44]	; (80003f8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80003ca:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80003ce:	69ca      	ldr	r2, [r1, #28]
 80003d0:	f042 0201 	orr.w	r2, r2, #1
 80003d4:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <FLASH_SetErrorCode+0x48>)
 80003d8:	69d1      	ldr	r1, [r2, #28]
 80003da:	07c9      	lsls	r1, r1, #31
 80003dc:	d508      	bpl.n	80003f0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <FLASH_SetErrorCode+0x4c>)
 80003e0:	69c1      	ldr	r1, [r0, #28]
 80003e2:	f041 0104 	orr.w	r1, r1, #4
 80003e6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80003e8:	69d1      	ldr	r1, [r2, #28]
 80003ea:	f021 0101 	bic.w	r1, r1, #1
 80003ee:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80003f0:	60d3      	str	r3, [r2, #12]
 80003f2:	4770      	bx	lr
 80003f4:	40022000 	.word	0x40022000
 80003f8:	20000610 	.word	0x20000610

080003fc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_FLASH_Unlock+0x1c>)
 80003fe:	6918      	ldr	r0, [r3, #16]
 8000400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000404:	d007      	beq.n	8000416 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <HAL_FLASH_Unlock+0x20>)
 8000408:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800040a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800040e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000410:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000412:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000416:	4770      	bx	lr
 8000418:	40022000 	.word	0x40022000
 800041c:	45670123 	.word	0x45670123

08000420 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <HAL_FLASH_Lock+0x10>)
}
 8000422:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000424:	6913      	ldr	r3, [r2, #16]
 8000426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800042a:	6113      	str	r3, [r2, #16]
}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40022000 	.word	0x40022000

08000434 <FLASH_WaitForLastOperation>:
{
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000438:	f7ff fede 	bl	80001f8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800043c:	4c11      	ldr	r4, [pc, #68]	; (8000484 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800043e:	4607      	mov	r7, r0
 8000440:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000442:	68e3      	ldr	r3, [r4, #12]
 8000444:	07d8      	lsls	r0, r3, #31
 8000446:	d412      	bmi.n	800046e <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000448:	68e3      	ldr	r3, [r4, #12]
 800044a:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800044c:	bf44      	itt	mi
 800044e:	2320      	movmi	r3, #32
 8000450:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000452:	68eb      	ldr	r3, [r5, #12]
 8000454:	06da      	lsls	r2, r3, #27
 8000456:	d406      	bmi.n	8000466 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000458:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800045a:	07db      	lsls	r3, r3, #31
 800045c:	d403      	bmi.n	8000466 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800045e:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000460:	f010 0004 	ands.w	r0, r0, #4
 8000464:	d002      	beq.n	800046c <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8000466:	f7ff ffa1 	bl	80003ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800046a:	2001      	movs	r0, #1
}
 800046c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800046e:	1c73      	adds	r3, r6, #1
 8000470:	d0e7      	beq.n	8000442 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000472:	b90e      	cbnz	r6, 8000478 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000474:	2003      	movs	r0, #3
 8000476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000478:	f7ff febe 	bl	80001f8 <HAL_GetTick>
 800047c:	1bc0      	subs	r0, r0, r7
 800047e:	4286      	cmp	r6, r0
 8000480:	d2df      	bcs.n	8000442 <FLASH_WaitForLastOperation+0xe>
 8000482:	e7f7      	b.n	8000474 <FLASH_WaitForLastOperation+0x40>
 8000484:	40022000 	.word	0x40022000

08000488 <HAL_FLASH_Program>:
{
 8000488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 800048c:	4c1f      	ldr	r4, [pc, #124]	; (800050c <HAL_FLASH_Program+0x84>)
{
 800048e:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000490:	7e23      	ldrb	r3, [r4, #24]
{
 8000492:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000494:	2b01      	cmp	r3, #1
{
 8000496:	460f      	mov	r7, r1
 8000498:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800049a:	d033      	beq.n	8000504 <HAL_FLASH_Program+0x7c>
 800049c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800049e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80004a2:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004a4:	f7ff ffc6 	bl	8000434 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80004a8:	bb40      	cbnz	r0, 80004fc <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80004aa:	2d01      	cmp	r5, #1
 80004ac:	d003      	beq.n	80004b6 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80004ae:	2d02      	cmp	r5, #2
 80004b0:	bf0c      	ite	eq
 80004b2:	2502      	moveq	r5, #2
 80004b4:	2504      	movne	r5, #4
 80004b6:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004b8:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80004ba:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000510 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004be:	0132      	lsls	r2, r6, #4
 80004c0:	4640      	mov	r0, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	f7ff fe4a 	bl	800015c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004c8:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80004cc:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004d0:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 80004da:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004e2:	f7ff ffa7 	bl	8000434 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80004e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 80004f2:	b918      	cbnz	r0, 80004fc <HAL_FLASH_Program+0x74>
 80004f4:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 80004f6:	b2f3      	uxtb	r3, r6
 80004f8:	429d      	cmp	r5, r3
 80004fa:	d8e0      	bhi.n	80004be <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 80004fc:	2300      	movs	r3, #0
 80004fe:	7623      	strb	r3, [r4, #24]
  return status;
 8000500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000504:	2002      	movs	r0, #2
}
 8000506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800050a:	bf00      	nop
 800050c:	20000610 	.word	0x20000610
 8000510:	40022000 	.word	0x40022000

08000514 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000514:	2200      	movs	r2, #0
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <FLASH_MassErase.isra.0+0x1c>)
 8000518:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <FLASH_MassErase.isra.0+0x20>)
 800051c:	691a      	ldr	r2, [r3, #16]
 800051e:	f042 0204 	orr.w	r2, r2, #4
 8000522:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000524:	691a      	ldr	r2, [r3, #16]
 8000526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800052a:	611a      	str	r2, [r3, #16]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000610 	.word	0x20000610
 8000534:	40022000 	.word	0x40022000

08000538 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000538:	2200      	movs	r2, #0
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <FLASH_PageErase+0x1c>)
 800053c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <FLASH_PageErase+0x20>)
 8000540:	691a      	ldr	r2, [r3, #16]
 8000542:	f042 0202 	orr.w	r2, r2, #2
 8000546:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000548:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800054a:	691a      	ldr	r2, [r3, #16]
 800054c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000550:	611a      	str	r2, [r3, #16]
 8000552:	4770      	bx	lr
 8000554:	20000610 	.word	0x20000610
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_FLASHEx_Erase>:
{
 800055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000560:	4d23      	ldr	r5, [pc, #140]	; (80005f0 <HAL_FLASHEx_Erase+0x94>)
{
 8000562:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8000564:	7e2b      	ldrb	r3, [r5, #24]
{
 8000566:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000568:	2b01      	cmp	r3, #1
 800056a:	d03d      	beq.n	80005e8 <HAL_FLASHEx_Erase+0x8c>
 800056c:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800056e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8000570:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000572:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000574:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000578:	d113      	bne.n	80005a2 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800057a:	f7ff ff5b 	bl	8000434 <FLASH_WaitForLastOperation>
 800057e:	b120      	cbz	r0, 800058a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000580:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000582:	2300      	movs	r3, #0
 8000584:	762b      	strb	r3, [r5, #24]
  return status;
 8000586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 800058a:	f7ff ffc3 	bl	8000514 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800058e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000592:	f7ff ff4f 	bl	8000434 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_FLASHEx_Erase+0x98>)
 8000598:	6913      	ldr	r3, [r2, #16]
 800059a:	f023 0304 	bic.w	r3, r3, #4
 800059e:	6113      	str	r3, [r2, #16]
 80005a0:	e7ef      	b.n	8000582 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80005a2:	f7ff ff47 	bl	8000434 <FLASH_WaitForLastOperation>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d1ea      	bne.n	8000580 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80005b2:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80005b4:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80005b6:	4c0f      	ldr	r4, [pc, #60]	; (80005f4 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80005c0:	429e      	cmp	r6, r3
 80005c2:	d2de      	bcs.n	8000582 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80005c4:	4630      	mov	r0, r6
 80005c6:	f7ff ffb7 	bl	8000538 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80005ce:	f7ff ff31 	bl	8000434 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80005d2:	6923      	ldr	r3, [r4, #16]
 80005d4:	f023 0302 	bic.w	r3, r3, #2
 80005d8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80005da:	b110      	cbz	r0, 80005e2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80005dc:	f8c8 6000 	str.w	r6, [r8]
            break;
 80005e0:	e7cf      	b.n	8000582 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80005e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005e6:	e7e7      	b.n	80005b8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80005e8:	2002      	movs	r0, #2
}
 80005ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ee:	bf00      	nop
 80005f0:	20000610 	.word	0x20000610
 80005f4:	40022000 	.word	0x40022000

080005f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80005fc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80005fe:	4616      	mov	r6, r2
 8000600:	4b65      	ldr	r3, [pc, #404]	; (8000798 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000602:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80007a8 <HAL_GPIO_Init+0x1b0>
 8000606:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80007ac <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800060a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000610:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000614:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000618:	45a0      	cmp	r8, r4
 800061a:	d17f      	bne.n	800071c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800061c:	684d      	ldr	r5, [r1, #4]
 800061e:	2d12      	cmp	r5, #18
 8000620:	f000 80af 	beq.w	8000782 <HAL_GPIO_Init+0x18a>
 8000624:	f200 8088 	bhi.w	8000738 <HAL_GPIO_Init+0x140>
 8000628:	2d02      	cmp	r5, #2
 800062a:	f000 80a7 	beq.w	800077c <HAL_GPIO_Init+0x184>
 800062e:	d87c      	bhi.n	800072a <HAL_GPIO_Init+0x132>
 8000630:	2d00      	cmp	r5, #0
 8000632:	f000 808e 	beq.w	8000752 <HAL_GPIO_Init+0x15a>
 8000636:	2d01      	cmp	r5, #1
 8000638:	f000 809e 	beq.w	8000778 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800063c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000640:	2cff      	cmp	r4, #255	; 0xff
 8000642:	bf93      	iteet	ls
 8000644:	4682      	movls	sl, r0
 8000646:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800064a:	3d08      	subhi	r5, #8
 800064c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000650:	bf92      	itee	ls
 8000652:	00b5      	lslls	r5, r6, #2
 8000654:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000658:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800065a:	fa09 f805 	lsl.w	r8, r9, r5
 800065e:	ea2b 0808 	bic.w	r8, fp, r8
 8000662:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000666:	bf88      	it	hi
 8000668:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800066c:	ea48 0505 	orr.w	r5, r8, r5
 8000670:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000674:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000678:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800067c:	d04e      	beq.n	800071c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800067e:	4d47      	ldr	r5, [pc, #284]	; (800079c <HAL_GPIO_Init+0x1a4>)
 8000680:	4f46      	ldr	r7, [pc, #280]	; (800079c <HAL_GPIO_Init+0x1a4>)
 8000682:	69ad      	ldr	r5, [r5, #24]
 8000684:	f026 0803 	bic.w	r8, r6, #3
 8000688:	f045 0501 	orr.w	r5, r5, #1
 800068c:	61bd      	str	r5, [r7, #24]
 800068e:	69bd      	ldr	r5, [r7, #24]
 8000690:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000694:	f005 0501 	and.w	r5, r5, #1
 8000698:	9501      	str	r5, [sp, #4]
 800069a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800069e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006a2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80006a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ac:	fa09 f90b 	lsl.w	r9, r9, fp
 80006b0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006b4:	4d3a      	ldr	r5, [pc, #232]	; (80007a0 <HAL_GPIO_Init+0x1a8>)
 80006b6:	42a8      	cmp	r0, r5
 80006b8:	d068      	beq.n	800078c <HAL_GPIO_Init+0x194>
 80006ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006be:	42a8      	cmp	r0, r5
 80006c0:	d066      	beq.n	8000790 <HAL_GPIO_Init+0x198>
 80006c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006c6:	42a8      	cmp	r0, r5
 80006c8:	d064      	beq.n	8000794 <HAL_GPIO_Init+0x19c>
 80006ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ce:	42a8      	cmp	r0, r5
 80006d0:	bf0c      	ite	eq
 80006d2:	2503      	moveq	r5, #3
 80006d4:	2504      	movne	r5, #4
 80006d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006da:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80006de:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80006e8:	bf14      	ite	ne
 80006ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006ec:	43a5      	biceq	r5, r4
 80006ee:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80006f0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006f2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80006f6:	bf14      	ite	ne
 80006f8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006fa:	43a5      	biceq	r5, r4
 80006fc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000700:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000704:	bf14      	ite	ne
 8000706:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000708:	43a5      	biceq	r5, r4
 800070a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800070c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800070e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000712:	bf14      	ite	ne
 8000714:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000716:	ea25 0404 	biceq.w	r4, r5, r4
 800071a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800071c:	3601      	adds	r6, #1
 800071e:	2e10      	cmp	r6, #16
 8000720:	f47f af73 	bne.w	800060a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000724:	b003      	add	sp, #12
 8000726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800072a:	2d03      	cmp	r5, #3
 800072c:	d022      	beq.n	8000774 <HAL_GPIO_Init+0x17c>
 800072e:	2d11      	cmp	r5, #17
 8000730:	d184      	bne.n	800063c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000732:	68ca      	ldr	r2, [r1, #12]
 8000734:	3204      	adds	r2, #4
          break;
 8000736:	e781      	b.n	800063c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000738:	4f1a      	ldr	r7, [pc, #104]	; (80007a4 <HAL_GPIO_Init+0x1ac>)
 800073a:	42bd      	cmp	r5, r7
 800073c:	d009      	beq.n	8000752 <HAL_GPIO_Init+0x15a>
 800073e:	d812      	bhi.n	8000766 <HAL_GPIO_Init+0x16e>
 8000740:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80007b0 <HAL_GPIO_Init+0x1b8>
 8000744:	454d      	cmp	r5, r9
 8000746:	d004      	beq.n	8000752 <HAL_GPIO_Init+0x15a>
 8000748:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800074c:	454d      	cmp	r5, r9
 800074e:	f47f af75 	bne.w	800063c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000752:	688a      	ldr	r2, [r1, #8]
 8000754:	b1c2      	cbz	r2, 8000788 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000756:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000758:	bf0c      	ite	eq
 800075a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800075e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000762:	2208      	movs	r2, #8
 8000764:	e76a      	b.n	800063c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000766:	4575      	cmp	r5, lr
 8000768:	d0f3      	beq.n	8000752 <HAL_GPIO_Init+0x15a>
 800076a:	4565      	cmp	r5, ip
 800076c:	d0f1      	beq.n	8000752 <HAL_GPIO_Init+0x15a>
 800076e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80007b4 <HAL_GPIO_Init+0x1bc>
 8000772:	e7eb      	b.n	800074c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000774:	2200      	movs	r2, #0
 8000776:	e761      	b.n	800063c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000778:	68ca      	ldr	r2, [r1, #12]
          break;
 800077a:	e75f      	b.n	800063c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800077c:	68ca      	ldr	r2, [r1, #12]
 800077e:	3208      	adds	r2, #8
          break;
 8000780:	e75c      	b.n	800063c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000782:	68ca      	ldr	r2, [r1, #12]
 8000784:	320c      	adds	r2, #12
          break;
 8000786:	e759      	b.n	800063c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000788:	2204      	movs	r2, #4
 800078a:	e757      	b.n	800063c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078c:	2500      	movs	r5, #0
 800078e:	e7a2      	b.n	80006d6 <HAL_GPIO_Init+0xde>
 8000790:	2501      	movs	r5, #1
 8000792:	e7a0      	b.n	80006d6 <HAL_GPIO_Init+0xde>
 8000794:	2502      	movs	r5, #2
 8000796:	e79e      	b.n	80006d6 <HAL_GPIO_Init+0xde>
 8000798:	40010400 	.word	0x40010400
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800
 80007a4:	10210000 	.word	0x10210000
 80007a8:	10310000 	.word	0x10310000
 80007ac:	10320000 	.word	0x10320000
 80007b0:	10110000 	.word	0x10110000
 80007b4:	10220000 	.word	0x10220000

080007b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007b8:	6883      	ldr	r3, [r0, #8]
 80007ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007bc:	bf14      	ite	ne
 80007be:	2001      	movne	r0, #1
 80007c0:	2000      	moveq	r0, #0
 80007c2:	4770      	bx	lr

080007c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007c4:	b10a      	cbz	r2, 80007ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007c6:	6101      	str	r1, [r0, #16]
 80007c8:	4770      	bx	lr
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	e7fb      	b.n	80007c6 <HAL_GPIO_WritePin+0x2>
	...

080007d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007d0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80007d4:	6959      	ldr	r1, [r3, #20]
 80007d6:	4201      	tst	r1, r0
 80007d8:	d002      	beq.n	80007e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007dc:	f005 f8ee 	bl	80059bc <HAL_GPIO_EXTI_Callback>
 80007e0:	bd08      	pop	{r3, pc}
 80007e2:	bf00      	nop
 80007e4:	40010400 	.word	0x40010400

080007e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80007ec:	4604      	mov	r4, r0
{
 80007ee:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d060      	beq.n	80008b6 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80007f4:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80007f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007fc:	b91b      	cbnz	r3, 8000806 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007fe:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000802:	f005 fa71 	bl	8005ce8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000806:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000808:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800080a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800080c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000810:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000814:	f001 fcb2 	bl	800217c <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800081c:	682b      	ldr	r3, [r5, #0]
 800081e:	f104 0804 	add.w	r8, r4, #4
 8000822:	6033      	str	r3, [r6, #0]
 8000824:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000828:	6820      	ldr	r0, [r4, #0]
 800082a:	f001 fc97 	bl	800215c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800082e:	2100      	movs	r1, #0
 8000830:	6820      	ldr	r0, [r4, #0]
 8000832:	f001 fcad 	bl	8002190 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000836:	2100      	movs	r1, #0
 8000838:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800083a:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800083c:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800083e:	4608      	mov	r0, r1
 8000840:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000844:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000848:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800084a:	3101      	adds	r1, #1
 800084c:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800084e:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000852:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000856:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000858:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800085a:	6410      	str	r0, [r2, #64]	; 0x40
 800085c:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000860:	d1f0      	bne.n	8000844 <HAL_PCD_Init+0x5c>
 8000862:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000864:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000866:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800086a:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800086c:	3201      	adds	r2, #1
 800086e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000870:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000874:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000878:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800087c:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000880:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000884:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000888:	d1ed      	bne.n	8000866 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800088a:	466e      	mov	r6, sp
 800088c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000890:	682b      	ldr	r3, [r5, #0]
 8000892:	6033      	str	r3, [r6, #0]
 8000894:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000898:	6820      	ldr	r0, [r4, #0]
 800089a:	f001 fc7b 	bl	8002194 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800089e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80008a0:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80008a4:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80008a6:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80008aa:	f001 ff4b 	bl	8002744 <USB_DevDisconnect>
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
}
 80008b0:	b006      	add	sp, #24
 80008b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80008b6:	2001      	movs	r0, #1
 80008b8:	e7fa      	b.n	80008b0 <HAL_PCD_Init+0xc8>

080008ba <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80008ba:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80008be:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80008c0:	2b01      	cmp	r3, #1
{
 80008c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80008c4:	d00e      	beq.n	80008e4 <HAL_PCD_Start+0x2a>
 80008c6:	2101      	movs	r1, #1
 80008c8:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80008cc:	f005 fb39 	bl	8005f42 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	f001 ff35 	bl	8002740 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80008d6:	6820      	ldr	r0, [r4, #0]
 80008d8:	f001 fc47 	bl	800216a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80008dc:	2000      	movs	r0, #0
 80008de:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80008e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80008e4:	2002      	movs	r0, #2
}
 80008e6:	bd10      	pop	{r4, pc}

080008e8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80008e8:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80008ec:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80008ee:	2a01      	cmp	r2, #1
{
 80008f0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80008f2:	d00b      	beq.n	800090c <HAL_PCD_SetAddress+0x24>
 80008f4:	2201      	movs	r2, #1
 80008f6:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80008fa:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80008fe:	6800      	ldr	r0, [r0, #0]
 8000900:	f001 ff18 	bl	8002734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000904:	2000      	movs	r0, #0
 8000906:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 800090a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800090c:	2002      	movs	r0, #2
  return HAL_OK;
}
 800090e:	bd10      	pop	{r4, pc}

08000910 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000914:	b248      	sxtb	r0, r1
 8000916:	2800      	cmp	r0, #0
 8000918:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800091c:	bfb5      	itete	lt
 800091e:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000922:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000926:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000928:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800092c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800092e:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000930:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000932:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000934:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000938:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800093a:	2b01      	cmp	r3, #1
 800093c:	d009      	beq.n	8000952 <HAL_PCD_EP_Open+0x42>
 800093e:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000940:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000942:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000946:	f001 fc41 	bl	80021cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800094a:	2000      	movs	r0, #0
 800094c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000950:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000952:	2002      	movs	r0, #2
}
 8000954:	bd38      	pop	{r3, r4, r5, pc}

08000956 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000956:	b24b      	sxtb	r3, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800095e:	bfb5      	itete	lt
 8000960:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000964:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000968:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800096a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800096e:	0fdb      	lsrs	r3, r3, #31
{  
 8000970:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000972:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000974:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000976:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800097a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800097c:	2b01      	cmp	r3, #1
 800097e:	d009      	beq.n	8000994 <HAL_PCD_EP_Close+0x3e>
 8000980:	2301      	movs	r3, #1
 8000982:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000986:	6800      	ldr	r0, [r0, #0]
 8000988:	f001 fd92 	bl	80024b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800098c:	2000      	movs	r0, #0
 800098e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000992:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000994:	2002      	movs	r0, #2
}
 8000996:	bd10      	pop	{r4, pc}

08000998 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000998:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800099a:	2600      	movs	r6, #0
 800099c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80009a0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 80009a2:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 80009a4:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80009a8:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80009ac:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80009ae:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80009b2:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 80009b6:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80009ba:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80009be:	6800      	ldr	r0, [r0, #0]
 80009c0:	f001 feda 	bl	8002778 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80009c4:	4630      	mov	r0, r6
 80009c6:	bd70      	pop	{r4, r5, r6, pc}

080009c8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80009c8:	f001 010f 	and.w	r1, r1, #15
 80009cc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80009d0:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80009d4:	4770      	bx	lr

080009d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80009d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80009da:	b570      	push	{r4, r5, r6, lr}
 80009dc:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80009de:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80009e0:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80009e2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80009e4:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80009e6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80009ea:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80009ee:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80009f0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80009f2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80009f4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80009f8:	6800      	ldr	r0, [r0, #0]
 80009fa:	f001 febd 	bl	8002778 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80009fe:	4630      	mov	r0, r6
 8000a00:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a04 <HAL_PCD_IRQHandler>:
{ 
 8000a04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a08:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a0a:	6800      	ldr	r0, [r0, #0]
 8000a0c:	f001 fe9c 	bl	8002748 <USB_ReadInterrupts>
 8000a10:	0400      	lsls	r0, r0, #16
 8000a12:	f100 8098 	bmi.w	8000b46 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a16:	6820      	ldr	r0, [r4, #0]
 8000a18:	f001 fe96 	bl	8002748 <USB_ReadInterrupts>
 8000a1c:	0541      	lsls	r1, r0, #21
 8000a1e:	d50f      	bpl.n	8000a40 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a20:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000a22:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	0c1b      	lsrs	r3, r3, #16
 8000a30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000a34:	f005 f98f 	bl	8005d56 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff ff54 	bl	80008e8 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	f001 fe81 	bl	8002748 <USB_ReadInterrupts>
 8000a46:	0447      	lsls	r7, r0, #17
 8000a48:	d508      	bpl.n	8000a5c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000a4a:	6822      	ldr	r2, [r4, #0]
 8000a4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a54:	041b      	lsls	r3, r3, #16
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	f001 fe73 	bl	8002748 <USB_ReadInterrupts>
 8000a62:	0486      	lsls	r6, r0, #18
 8000a64:	d508      	bpl.n	8000a78 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000a66:	6822      	ldr	r2, [r4, #0]
 8000a68:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	f001 fe65 	bl	8002748 <USB_ReadInterrupts>
 8000a7e:	04c5      	lsls	r5, r0, #19
 8000a80:	d51c      	bpl.n	8000abc <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000a82:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000a84:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000a86:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000a8a:	f023 0304 	bic.w	r3, r3, #4
 8000a8e:	041b      	lsls	r3, r3, #16
 8000a90:	0c1b      	lsrs	r3, r3, #16
 8000a92:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000a96:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000a9a:	f023 0308 	bic.w	r3, r3, #8
 8000a9e:	041b      	lsls	r3, r3, #16
 8000aa0:	0c1b      	lsrs	r3, r3, #16
 8000aa2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000aa6:	f005 f973 	bl	8005d90 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ab4:	041b      	lsls	r3, r3, #16
 8000ab6:	0c1b      	lsrs	r3, r3, #16
 8000ab8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000abc:	6820      	ldr	r0, [r4, #0]
 8000abe:	f001 fe43 	bl	8002748 <USB_ReadInterrupts>
 8000ac2:	0500      	lsls	r0, r0, #20
 8000ac4:	d51d      	bpl.n	8000b02 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000ad6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	0c1b      	lsrs	r3, r3, #16
 8000ae2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000ae6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000af4:	f001 fe28 	bl	8002748 <USB_ReadInterrupts>
 8000af8:	04c1      	lsls	r1, r0, #19
 8000afa:	d402      	bmi.n	8000b02 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000afc:	4620      	mov	r0, r4
 8000afe:	f005 f937 	bl	8005d70 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	f001 fe20 	bl	8002748 <USB_ReadInterrupts>
 8000b08:	0582      	lsls	r2, r0, #22
 8000b0a:	d50b      	bpl.n	8000b24 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b0c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000b0e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000b10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b18:	041b      	lsls	r3, r3, #16
 8000b1a:	0c1b      	lsrs	r3, r3, #16
 8000b1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000b20:	f005 f915 	bl	8005d4e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000b24:	6820      	ldr	r0, [r4, #0]
 8000b26:	f001 fe0f 	bl	8002748 <USB_ReadInterrupts>
 8000b2a:	05c3      	lsls	r3, r0, #23
 8000b2c:	d508      	bpl.n	8000b40 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000b2e:	6822      	ldr	r2, [r4, #0]
 8000b30:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b38:	041b      	lsls	r3, r3, #16
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000b40:	b002      	add	sp, #8
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000b46:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b48:	4fc8      	ldr	r7, [pc, #800]	; (8000e6c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b4a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000e70 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b4e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000e74 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000b52:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000b56:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000b5a:	6820      	ldr	r0, [r4, #0]
 8000b5c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	f57f af55 	bpl.w	8000a16 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000b6c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000b70:	f015 050f 	ands.w	r5, r5, #15
 8000b74:	f040 80ab 	bne.w	8000cce <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000b78:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b7c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000b7e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b82:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000b84:	d126      	bne.n	8000bd4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b86:	403b      	ands	r3, r7
 8000b88:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b8e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b98:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000b9c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000ba0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000ba8:	4413      	add	r3, r2
 8000baa:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000bac:	4620      	mov	r0, r4
 8000bae:	f005 f8c7 	bl	8005d40 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000bb2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0cf      	beq.n	8000b5a <HAL_PCD_IRQHandler+0x156>
 8000bba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d1cc      	bne.n	8000b5a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000bc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000bc4:	6821      	ldr	r1, [r4, #0]
 8000bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bca:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000bce:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000bd2:	e7c2      	b.n	8000b5a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000bd4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000bdc:	051a      	lsls	r2, r3, #20
 8000bde:	d51f      	bpl.n	8000c20 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000be0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000be4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bf2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000bf6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bfe:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000c02:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c06:	f001 feb7 	bl	8002978 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000c0a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c0c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000c0e:	8813      	ldrh	r3, [r2, #0]
 8000c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c14:	051b      	lsls	r3, r3, #20
 8000c16:	0d1b      	lsrs	r3, r3, #20
 8000c18:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c1a:	f005 f883 	bl	8005d24 <HAL_PCD_SetupStageCallback>
 8000c1e:	e79c      	b.n	8000b5a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c24:	041b      	lsls	r3, r3, #16
 8000c26:	d598      	bpl.n	8000b5a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c28:	8803      	ldrh	r3, [r0, #0]
 8000c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c2e:	051b      	lsls	r3, r3, #20
 8000c30:	0d1b      	lsrs	r3, r3, #20
 8000c32:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c38:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c4e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000c52:	b163      	cbz	r3, 8000c6e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000c54:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000c58:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000c5c:	f001 fe8c 	bl	8002978 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000c60:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000c64:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000c68:	4413      	add	r3, r2
 8000c6a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4620      	mov	r0, r4
 8000c72:	f005 f85d 	bl	8005d30 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000c7c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000c80:	2d3e      	cmp	r5, #62	; 0x3e
 8000c82:	b289      	uxth	r1, r1
 8000c84:	f101 0106 	add.w	r1, r1, #6
 8000c88:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000c8c:	d917      	bls.n	8000cbe <HAL_PCD_IRQHandler+0x2ba>
 8000c8e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000c92:	06ee      	lsls	r6, r5, #27
 8000c94:	bf04      	itt	eq
 8000c96:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000c9a:	b29b      	uxtheq	r3, r3
 8000c9c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000ca6:	8813      	ldrh	r3, [r2, #0]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	ea03 0308 	and.w	r3, r3, r8
 8000cae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cba:	8013      	strh	r3, [r2, #0]
 8000cbc:	e74d      	b.n	8000b5a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000cbe:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000cc2:	07ed      	lsls	r5, r5, #31
 8000cc4:	bf44      	itt	mi
 8000cc6:	3301      	addmi	r3, #1
 8000cc8:	b29b      	uxthmi	r3, r3
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	e7e8      	b.n	8000ca0 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000cce:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000cd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000cdc:	0419      	lsls	r1, r3, #16
 8000cde:	d53f      	bpl.n	8000d60 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ce0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ce4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cec:	051b      	lsls	r3, r3, #20
 8000cee:	0d1b      	lsrs	r3, r3, #20
 8000cf0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000cf4:	eb04 010a 	add.w	r1, r4, sl
 8000cf8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d174      	bne.n	8000dea <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d04:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d14:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000d18:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000d1c:	b136      	cbz	r6, 8000d2c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000d1e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000d22:	4633      	mov	r3, r6
 8000d24:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000d28:	f001 fe26 	bl	8002978 <USB_ReadPMA>
 8000d2c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000d30:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000d34:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000d38:	4433      	add	r3, r6
 8000d3a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000d3e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000d42:	4432      	add	r2, r6
 8000d44:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000d48:	b123      	cbz	r3, 8000d54 <HAL_PCD_IRQHandler+0x350>
 8000d4a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000d4e:	4286      	cmp	r6, r0
 8000d50:	f080 8086 	bcs.w	8000e60 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000d54:	44a2      	add	sl, r4
 8000d56:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f004 ffe8 	bl	8005d30 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000d60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	f57f aef8 	bpl.w	8000b5a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d6a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000d6c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d6e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d72:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	403b      	ands	r3, r7
 8000d78:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d7c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000d80:	3502      	adds	r5, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d178      	bne.n	8000e78 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d86:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d8a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3302      	adds	r3, #2
 8000d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d96:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000d9e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000da6:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000da8:	b11b      	cbz	r3, 8000db2 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000daa:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000dac:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000dae:	f001 fcd1 	bl	8002754 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	4426      	add	r6, r4
 8000db6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000dba:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000dc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000dca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000dce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dd0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000dd4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000dd6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000dd8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000dda:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ddc:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8085 	bne.w	8000eee <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000de4:	f004 ffac 	bl	8005d40 <HAL_PCD_DataInStageCallback>
 8000de8:	e6b7      	b.n	8000b5a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000dea:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000dee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000df8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000dfc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000dfe:	d021      	beq.n	8000e44 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e00:	3202      	adds	r2, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e08:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000e0c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000e10:	b136      	cbz	r6, 8000e20 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000e12:	4633      	mov	r3, r6
 8000e14:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000e18:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000e1c:	f001 fdac 	bl	8002978 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000e20:	eb04 030a 	add.w	r3, r4, sl
 8000e24:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e32:	051b      	lsls	r3, r3, #20
 8000e34:	0d1b      	lsrs	r3, r3, #20
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e3e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000e42:	e773      	b.n	8000d2c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000e44:	3206      	adds	r2, #6
 8000e46:	4413      	add	r3, r2
 8000e48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e4c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000e50:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d0e3      	beq.n	8000e20 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000e58:	4633      	mov	r3, r6
 8000e5a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000e5e:	e7db      	b.n	8000e18 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000e60:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff fd97 	bl	8000998 <HAL_PCD_EP_Receive>
 8000e6a:	e779      	b.n	8000d60 <HAL_PCD_IRQHandler+0x35c>
 8000e6c:	ffff8f0f 	.word	0xffff8f0f
 8000e70:	ffffbf8f 	.word	0xffffbf8f
 8000e74:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000e78:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000e7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e86:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000e8a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000e8c:	d020      	beq.n	8000ed0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e8e:	3202      	adds	r2, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000e9a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ea2:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000ea4:	b11b      	cbz	r3, 8000eae <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000ea6:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000ea8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000eaa:	f001 fc53 	bl	8002754 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000eae:	19a3      	adds	r3, r4, r6
 8000eb0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ebe:	051b      	lsls	r3, r3, #20
 8000ec0:	0d1b      	lsrs	r3, r3, #20
 8000ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ece:	e770      	b.n	8000db2 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ed0:	3206      	adds	r2, #6
 8000ed2:	4413      	add	r3, r2
 8000ed4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ed8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000edc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ee4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0e1      	beq.n	8000eae <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000eea:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000eec:	e7dc      	b.n	8000ea8 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000eee:	f7ff fd72 	bl	80009d6 <HAL_PCD_EP_Transmit>
 8000ef2:	e632      	b.n	8000b5a <HAL_PCD_IRQHandler+0x156>

08000ef4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000ef4:	2201      	movs	r2, #1
{
 8000ef6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000ef8:	b24b      	sxtb	r3, r1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f00:	bfb5      	itete	lt
 8000f02:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000f06:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f0a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000f0c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f10:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000f12:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000f14:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f16:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f18:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000f1a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000f1e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00e      	beq.n	8000f42 <HAL_PCD_EP_SetStall+0x4e>
 8000f24:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000f28:	6800      	ldr	r0, [r0, #0]
 8000f2a:	f001 fb8f 	bl	800264c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000f2e:	b925      	cbnz	r5, 8000f3a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f30:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	f001 fc0b 	bl	8002750 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000f40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000f42:	2002      	movs	r0, #2
}
 8000f44:	bd38      	pop	{r3, r4, r5, pc}

08000f46 <HAL_PCD_EP_ClrStall>:
{
 8000f46:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000f48:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000f4a:	b24b      	sxtb	r3, r1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f52:	bfb5      	itete	lt
 8000f54:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000f58:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f5c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000f5e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f62:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000f64:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f66:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f68:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f6a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000f6e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d009      	beq.n	8000f88 <HAL_PCD_EP_ClrStall+0x42>
 8000f74:	2301      	movs	r3, #1
 8000f76:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000f7a:	6800      	ldr	r0, [r0, #0]
 8000f7c:	f001 fb98 	bl	80026b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000f80:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000f84:	4620      	mov	r0, r4
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000f88:	2002      	movs	r0, #2
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}

08000f8c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000f8c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f90:	bf1b      	ittet	ne
 8000f92:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000f96:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f9a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f9e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000fa0:	bf08      	it	eq
 8000fa2:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000fa6:	b91a      	cbnz	r2, 8000fb0 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000fa8:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000faa:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000fac:	2000      	movs	r0, #0
 8000fae:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000fb0:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000fb2:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000fb4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000fb6:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000fb8:	8103      	strh	r3, [r0, #8]
 8000fba:	e7f7      	b.n	8000fac <HAL_PCDEx_PMAConfig+0x20>

08000fbc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbc:	6803      	ldr	r3, [r0, #0]
{
 8000fbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	07db      	lsls	r3, r3, #31
{
 8000fc4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	d410      	bmi.n	8000fea <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	079f      	lsls	r7, r3, #30
 8000fcc:	d45e      	bmi.n	800108c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	0719      	lsls	r1, r3, #28
 8000fd2:	f100 8095 	bmi.w	8001100 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	075a      	lsls	r2, r3, #29
 8000fda:	f100 80bf 	bmi.w	800115c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fde:	69ea      	ldr	r2, [r5, #28]
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	f040 812d 	bne.w	8001240 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	e014      	b.n	8001014 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fea:	4c90      	ldr	r4, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8000fec:	6863      	ldr	r3, [r4, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d007      	beq.n	8001006 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff6:	6863      	ldr	r3, [r4, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x5e>
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	03de      	lsls	r6, r3, #15
 8001004:	d509      	bpl.n	800101a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	039c      	lsls	r4, r3, #14
 800100a:	d5dd      	bpl.n	8000fc8 <HAL_RCC_OscConfig+0xc>
 800100c:	686b      	ldr	r3, [r5, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1da      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001012:	2001      	movs	r0, #1
}
 8001014:	b002      	add	sp, #8
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101a:	686b      	ldr	r3, [r5, #4]
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d110      	bne.n	8001044 <HAL_RCC_OscConfig+0x88>
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800102a:	f7ff f8e5 	bl	80001f8 <HAL_GetTick>
 800102e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	0398      	lsls	r0, r3, #14
 8001034:	d4c8      	bmi.n	8000fc8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001036:	f7ff f8df 	bl	80001f8 <HAL_GetTick>
 800103a:	1b80      	subs	r0, r0, r6
 800103c:	2864      	cmp	r0, #100	; 0x64
 800103e:	d9f7      	bls.n	8001030 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e7e7      	b.n	8001014 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	b99b      	cbnz	r3, 800106e <HAL_RCC_OscConfig+0xb2>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001054:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001056:	f7ff f8cf 	bl	80001f8 <HAL_GetTick>
 800105a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	0399      	lsls	r1, r3, #14
 8001060:	d5b2      	bpl.n	8000fc8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001062:	f7ff f8c9 	bl	80001f8 <HAL_GetTick>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	2864      	cmp	r0, #100	; 0x64
 800106a:	d9f7      	bls.n	800105c <HAL_RCC_OscConfig+0xa0>
 800106c:	e7e8      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	d103      	bne.n	800107e <HAL_RCC_OscConfig+0xc2>
 8001076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	e7d1      	b.n	8001022 <HAL_RCC_OscConfig+0x66>
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6023      	str	r3, [r4, #0]
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	e7cd      	b.n	8001028 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800108c:	4c67      	ldr	r4, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	f013 0f0c 	tst.w	r3, #12
 8001094:	d007      	beq.n	80010a6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d110      	bne.n	80010c2 <HAL_RCC_OscConfig+0x106>
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	03da      	lsls	r2, r3, #15
 80010a4:	d40d      	bmi.n	80010c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	079b      	lsls	r3, r3, #30
 80010aa:	d502      	bpl.n	80010b2 <HAL_RCC_OscConfig+0xf6>
 80010ac:	692b      	ldr	r3, [r5, #16]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1af      	bne.n	8001012 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	696a      	ldr	r2, [r5, #20]
 80010b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010be:	6023      	str	r3, [r4, #0]
 80010c0:	e785      	b.n	8000fce <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c2:	692a      	ldr	r2, [r5, #16]
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <HAL_RCC_OscConfig+0x274>)
 80010c6:	b16a      	cbz	r2, 80010e4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010cc:	f7ff f894 	bl	80001f8 <HAL_GetTick>
 80010d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	079f      	lsls	r7, r3, #30
 80010d6:	d4ec      	bmi.n	80010b2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff f88e 	bl	80001f8 <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9f7      	bls.n	80010d2 <HAL_RCC_OscConfig+0x116>
 80010e2:	e7ad      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80010e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e6:	f7ff f887 	bl	80001f8 <HAL_GetTick>
 80010ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	0798      	lsls	r0, r3, #30
 80010f0:	f57f af6d 	bpl.w	8000fce <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff f880 	bl	80001f8 <HAL_GetTick>
 80010f8:	1b80      	subs	r0, r0, r6
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d9f6      	bls.n	80010ec <HAL_RCC_OscConfig+0x130>
 80010fe:	e79f      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001100:	69aa      	ldr	r2, [r5, #24]
 8001102:	4c4a      	ldr	r4, [pc, #296]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001104:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <HAL_RCC_OscConfig+0x278>)
 8001106:	b1da      	cbz	r2, 8001140 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800110c:	f7ff f874 	bl	80001f8 <HAL_GetTick>
 8001110:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001114:	079b      	lsls	r3, r3, #30
 8001116:	d50d      	bpl.n	8001134 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001118:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	fbb3 f3f2 	udiv	r3, r3, r2
 8001124:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001126:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001128:	9b01      	ldr	r3, [sp, #4]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	9201      	str	r2, [sp, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f9      	bne.n	8001126 <HAL_RCC_OscConfig+0x16a>
 8001132:	e750      	b.n	8000fd6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff f860 	bl	80001f8 <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	2802      	cmp	r0, #2
 800113c:	d9e9      	bls.n	8001112 <HAL_RCC_OscConfig+0x156>
 800113e:	e77f      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001140:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff f859 	bl	80001f8 <HAL_GetTick>
 8001146:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800114a:	079f      	lsls	r7, r3, #30
 800114c:	f57f af43 	bpl.w	8000fd6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff f852 	bl	80001f8 <HAL_GetTick>
 8001154:	1b80      	subs	r0, r0, r6
 8001156:	2802      	cmp	r0, #2
 8001158:	d9f6      	bls.n	8001148 <HAL_RCC_OscConfig+0x18c>
 800115a:	e771      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4c33      	ldr	r4, [pc, #204]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	00d8      	lsls	r0, r3, #3
 8001162:	d424      	bmi.n	80011ae <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001164:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	69e3      	ldr	r3, [r4, #28]
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61e3      	str	r3, [r4, #28]
 800116e:	69e3      	ldr	r3, [r4, #28]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4e30      	ldr	r6, [pc, #192]	; (800123c <HAL_RCC_OscConfig+0x280>)
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	05d9      	lsls	r1, r3, #23
 800117e:	d518      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	68eb      	ldr	r3, [r5, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d126      	bne.n	80011d4 <HAL_RCC_OscConfig+0x218>
 8001186:	6a23      	ldr	r3, [r4, #32]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800118e:	f7ff f833 	bl	80001f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001196:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	6a23      	ldr	r3, [r4, #32]
 800119a:	079b      	lsls	r3, r3, #30
 800119c:	d53f      	bpl.n	800121e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800119e:	2f00      	cmp	r7, #0
 80011a0:	f43f af1d 	beq.w	8000fde <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a4:	69e3      	ldr	r3, [r4, #28]
 80011a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011aa:	61e3      	str	r3, [r4, #28]
 80011ac:	e717      	b.n	8000fde <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	2700      	movs	r7, #0
 80011b0:	e7e2      	b.n	8001178 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b2:	6833      	ldr	r3, [r6, #0]
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011ba:	f7ff f81d 	bl	80001f8 <HAL_GetTick>
 80011be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	05da      	lsls	r2, r3, #23
 80011c4:	d4dc      	bmi.n	8001180 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff f817 	bl	80001f8 <HAL_GetTick>
 80011ca:	eba0 0008 	sub.w	r0, r0, r8
 80011ce:	2864      	cmp	r0, #100	; 0x64
 80011d0:	d9f6      	bls.n	80011c0 <HAL_RCC_OscConfig+0x204>
 80011d2:	e735      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	b9ab      	cbnz	r3, 8001202 <HAL_RCC_OscConfig+0x246>
 80011d6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6223      	str	r3, [r4, #32]
 80011e2:	6a23      	ldr	r3, [r4, #32]
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011ea:	f7ff f805 	bl	80001f8 <HAL_GetTick>
 80011ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f0:	6a23      	ldr	r3, [r4, #32]
 80011f2:	0798      	lsls	r0, r3, #30
 80011f4:	d5d3      	bpl.n	800119e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7fe ffff 	bl	80001f8 <HAL_GetTick>
 80011fa:	1b80      	subs	r0, r0, r6
 80011fc:	4540      	cmp	r0, r8
 80011fe:	d9f7      	bls.n	80011f0 <HAL_RCC_OscConfig+0x234>
 8001200:	e71e      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	2b05      	cmp	r3, #5
 8001204:	6a23      	ldr	r3, [r4, #32]
 8001206:	d103      	bne.n	8001210 <HAL_RCC_OscConfig+0x254>
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6223      	str	r3, [r4, #32]
 800120e:	e7ba      	b.n	8001186 <HAL_RCC_OscConfig+0x1ca>
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6223      	str	r3, [r4, #32]
 8001216:	6a23      	ldr	r3, [r4, #32]
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	e7b6      	b.n	800118c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7fe ffeb 	bl	80001f8 <HAL_GetTick>
 8001222:	eba0 0008 	sub.w	r0, r0, r8
 8001226:	42b0      	cmp	r0, r6
 8001228:	d9b6      	bls.n	8001198 <HAL_RCC_OscConfig+0x1dc>
 800122a:	e709      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
 800122c:	40021000 	.word	0x40021000
 8001230:	42420000 	.word	0x42420000
 8001234:	42420480 	.word	0x42420480
 8001238:	20000130 	.word	0x20000130
 800123c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001240:	4c22      	ldr	r4, [pc, #136]	; (80012cc <HAL_RCC_OscConfig+0x310>)
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	f43f aee2 	beq.w	8001012 <HAL_RCC_OscConfig+0x56>
 800124e:	2300      	movs	r3, #0
 8001250:	4e1f      	ldr	r6, [pc, #124]	; (80012d0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001254:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	d12b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001258:	f7fe ffce 	bl	80001f8 <HAL_GetTick>
 800125c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	0199      	lsls	r1, r3, #6
 8001262:	d41f      	bmi.n	80012a4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001264:	6a2b      	ldr	r3, [r5, #32]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126c:	6862      	ldr	r2, [r4, #4]
 800126e:	68a9      	ldr	r1, [r5, #8]
 8001270:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001274:	430a      	orrs	r2, r1
 8001276:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001278:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800127a:	6862      	ldr	r2, [r4, #4]
 800127c:	430b      	orrs	r3, r1
 800127e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001282:	4313      	orrs	r3, r2
 8001284:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001286:	2301      	movs	r3, #1
 8001288:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800128a:	f7fe ffb5 	bl	80001f8 <HAL_GetTick>
 800128e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	019a      	lsls	r2, r3, #6
 8001294:	f53f aea7 	bmi.w	8000fe6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7fe ffae 	bl	80001f8 <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	2802      	cmp	r0, #2
 80012a0:	d9f6      	bls.n	8001290 <HAL_RCC_OscConfig+0x2d4>
 80012a2:	e6cd      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7fe ffa8 	bl	80001f8 <HAL_GetTick>
 80012a8:	1bc0      	subs	r0, r0, r7
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9d7      	bls.n	800125e <HAL_RCC_OscConfig+0x2a2>
 80012ae:	e6c7      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80012b0:	f7fe ffa2 	bl	80001f8 <HAL_GetTick>
 80012b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	f57f ae94 	bpl.w	8000fe6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012be:	f7fe ff9b 	bl	80001f8 <HAL_GetTick>
 80012c2:	1b40      	subs	r0, r0, r5
 80012c4:	2802      	cmp	r0, #2
 80012c6:	d9f6      	bls.n	80012b6 <HAL_RCC_OscConfig+0x2fa>
 80012c8:	e6ba      	b.n	8001040 <HAL_RCC_OscConfig+0x84>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	42420060 	.word	0x42420060

080012d4 <HAL_RCC_GetSysClockFreq>:
{
 80012d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80012d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012da:	ac02      	add	r4, sp, #8
 80012dc:	f103 0510 	add.w	r5, r3, #16
 80012e0:	4622      	mov	r2, r4
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	6859      	ldr	r1, [r3, #4]
 80012e6:	3308      	adds	r3, #8
 80012e8:	c203      	stmia	r2!, {r0, r1}
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	4614      	mov	r4, r2
 80012ee:	d1f7      	bne.n	80012e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012f0:	2301      	movs	r3, #1
 80012f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80012f6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80012f8:	4911      	ldr	r1, [pc, #68]	; (8001340 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012fa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80012fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001300:	f003 020c 	and.w	r2, r3, #12
 8001304:	2a08      	cmp	r2, #8
 8001306:	d117      	bne.n	8001338 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001308:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800130c:	a806      	add	r0, sp, #24
 800130e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001310:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001312:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001316:	d50c      	bpl.n	8001332 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001318:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001320:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001322:	aa06      	add	r2, sp, #24
 8001324:	4413      	add	r3, r2
 8001326:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800132a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800132e:	b007      	add	sp, #28
 8001330:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_RCC_GetSysClockFreq+0x74>)
 8001334:	4350      	muls	r0, r2
 8001336:	e7fa      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800133a:	e7f8      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x5a>
 800133c:	08006ce4 	.word	0x08006ce4
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	003d0900 	.word	0x003d0900

0800134c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_RCC_ClockConfig+0x138>)
{
 800134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001352:	6813      	ldr	r3, [r2, #0]
{
 8001354:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	428b      	cmp	r3, r1
{
 800135c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800135e:	d328      	bcc.n	80013b2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001360:	682a      	ldr	r2, [r5, #0]
 8001362:	0791      	lsls	r1, r2, #30
 8001364:	d432      	bmi.n	80013cc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	07d2      	lsls	r2, r2, #31
 8001368:	d438      	bmi.n	80013dc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800136a:	4a46      	ldr	r2, [pc, #280]	; (8001484 <HAL_RCC_ClockConfig+0x138>)
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	429e      	cmp	r6, r3
 8001374:	d373      	bcc.n	800145e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001376:	682a      	ldr	r2, [r5, #0]
 8001378:	4c43      	ldr	r4, [pc, #268]	; (8001488 <HAL_RCC_ClockConfig+0x13c>)
 800137a:	f012 0f04 	tst.w	r2, #4
 800137e:	d179      	bne.n	8001474 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	0713      	lsls	r3, r2, #28
 8001382:	d506      	bpl.n	8001392 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	692a      	ldr	r2, [r5, #16]
 8001388:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800138c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001390:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001392:	f7ff ff9f 	bl	80012d4 <HAL_RCC_GetSysClockFreq>
 8001396:	6863      	ldr	r3, [r4, #4]
 8001398:	4a3c      	ldr	r2, [pc, #240]	; (800148c <HAL_RCC_ClockConfig+0x140>)
 800139a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	40d8      	lsrs	r0, r3
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_ClockConfig+0x144>)
 80013a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7fe fee4 	bl	8000174 <HAL_InitTick>
  return HAL_OK;
 80013ac:	2000      	movs	r0, #0
}
 80013ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f023 0307 	bic.w	r3, r3, #7
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	4299      	cmp	r1, r3
 80013c4:	d0cc      	beq.n	8001360 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80013c6:	2001      	movs	r0, #1
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	492e      	ldr	r1, [pc, #184]	; (8001488 <HAL_RCC_ClockConfig+0x13c>)
 80013ce:	68a8      	ldr	r0, [r5, #8]
 80013d0:	684b      	ldr	r3, [r1, #4]
 80013d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d6:	4303      	orrs	r3, r0
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e7c4      	b.n	8001366 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013dc:	686a      	ldr	r2, [r5, #4]
 80013de:	4c2a      	ldr	r4, [pc, #168]	; (8001488 <HAL_RCC_ClockConfig+0x13c>)
 80013e0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	d0ec      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ec:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	f023 0303 	bic.w	r3, r3, #3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80013fa:	f7fe fefd 	bl	80001f8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001400:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	2b01      	cmp	r3, #1
 8001404:	d114      	bne.n	8001430 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001406:	6863      	ldr	r3, [r4, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b04      	cmp	r3, #4
 800140e:	d0ac      	beq.n	800136a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7fe fef2 	bl	80001f8 <HAL_GetTick>
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	4540      	cmp	r0, r8
 8001418:	d9f5      	bls.n	8001406 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800141a:	2003      	movs	r0, #3
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001420:	2a02      	cmp	r2, #2
 8001422:	d102      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001424:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001428:	e7df      	b.n	80013ea <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	f013 0f02 	tst.w	r3, #2
 800142e:	e7dc      	b.n	80013ea <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001430:	2b02      	cmp	r3, #2
 8001432:	d10f      	bne.n	8001454 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	6863      	ldr	r3, [r4, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d095      	beq.n	800136a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143e:	f7fe fedb 	bl	80001f8 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	4540      	cmp	r0, r8
 8001446:	d9f5      	bls.n	8001434 <HAL_RCC_ClockConfig+0xe8>
 8001448:	e7e7      	b.n	800141a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144a:	f7fe fed5 	bl	80001f8 <HAL_GetTick>
 800144e:	1bc0      	subs	r0, r0, r7
 8001450:	4540      	cmp	r0, r8
 8001452:	d8e2      	bhi.n	800141a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	f013 0f0c 	tst.w	r3, #12
 800145a:	d1f6      	bne.n	800144a <HAL_RCC_ClockConfig+0xfe>
 800145c:	e785      	b.n	800136a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f023 0307 	bic.w	r3, r3, #7
 8001464:	4333      	orrs	r3, r6
 8001466:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	429e      	cmp	r6, r3
 8001470:	d1a9      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x7a>
 8001472:	e780      	b.n	8001376 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	6863      	ldr	r3, [r4, #4]
 8001476:	68e9      	ldr	r1, [r5, #12]
 8001478:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800147c:	430b      	orrs	r3, r1
 800147e:	6063      	str	r3, [r4, #4]
 8001480:	e77e      	b.n	8001380 <HAL_RCC_ClockConfig+0x34>
 8001482:	bf00      	nop
 8001484:	40022000 	.word	0x40022000
 8001488:	40021000 	.word	0x40021000
 800148c:	080079f9 	.word	0x080079f9
 8001490:	20000130 	.word	0x20000130

08001494 <HAL_RCC_GetHCLKFreq>:
}
 8001494:	4b01      	ldr	r3, [pc, #4]	; (800149c <HAL_RCC_GetHCLKFreq+0x8>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000130 	.word	0x20000130

080014a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014ae:	6810      	ldr	r0, [r2, #0]
}    
 80014b0:	40d8      	lsrs	r0, r3
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08007a09 	.word	0x08007a09
 80014bc:	20000130 	.word	0x20000130

080014c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014ce:	6810      	ldr	r0, [r2, #0]
} 
 80014d0:	40d8      	lsrs	r0, r3
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08007a09 	.word	0x08007a09
 80014dc:	20000130 	.word	0x20000130

080014e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014e0:	6803      	ldr	r3, [r0, #0]
{
 80014e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014e6:	07d9      	lsls	r1, r3, #31
{
 80014e8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80014ea:	d520      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ec:	4c35      	ldr	r4, [pc, #212]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80014ee:	69e3      	ldr	r3, [r4, #28]
 80014f0:	00da      	lsls	r2, r3, #3
 80014f2:	d432      	bmi.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80014f4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61e3      	str	r3, [r4, #28]
 80014fe:	69e3      	ldr	r3, [r4, #28]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4e2f      	ldr	r6, [pc, #188]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800150a:	6833      	ldr	r3, [r6, #0]
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	d526      	bpl.n	800155e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001510:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001512:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001516:	d136      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001518:	6a23      	ldr	r3, [r4, #32]
 800151a:	686a      	ldr	r2, [r5, #4]
 800151c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001520:	4313      	orrs	r3, r2
 8001522:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001524:	b11f      	cbz	r7, 800152e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001526:	69e3      	ldr	r3, [r4, #28]
 8001528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800152e:	6828      	ldr	r0, [r5, #0]
 8001530:	0783      	lsls	r3, r0, #30
 8001532:	d506      	bpl.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001534:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001536:	68a9      	ldr	r1, [r5, #8]
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800153e:	430b      	orrs	r3, r1
 8001540:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001542:	f010 0010 	ands.w	r0, r0, #16
 8001546:	d01b      	beq.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800154a:	68e9      	ldr	r1, [r5, #12]
 800154c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800154e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001550:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001554:	430b      	orrs	r3, r1
 8001556:	6053      	str	r3, [r2, #4]
 8001558:	e012      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2700      	movs	r7, #0
 800155c:	e7d4      	b.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	6833      	ldr	r3, [r6, #0]
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001566:	f7fe fe47 	bl	80001f8 <HAL_GetTick>
 800156a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	6833      	ldr	r3, [r6, #0]
 800156e:	05d8      	lsls	r0, r3, #23
 8001570:	d4ce      	bmi.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7fe fe41 	bl	80001f8 <HAL_GetTick>
 8001576:	eba0 0008 	sub.w	r0, r0, r8
 800157a:	2864      	cmp	r0, #100	; 0x64
 800157c:	d9f6      	bls.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800157e:	2003      	movs	r0, #3
}
 8001580:	b002      	add	sp, #8
 8001582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001586:	686a      	ldr	r2, [r5, #4]
 8001588:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800158c:	4293      	cmp	r3, r2
 800158e:	d0c3      	beq.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001590:	2001      	movs	r0, #1
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001594:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001596:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001598:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800159a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800159e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80015a0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015a2:	07d9      	lsls	r1, r3, #31
 80015a4:	d5b8      	bpl.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80015a6:	f7fe fe27 	bl	80001f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	6a23      	ldr	r3, [r4, #32]
 80015b2:	079a      	lsls	r2, r3, #30
 80015b4:	d4b0      	bmi.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7fe fe1f 	bl	80001f8 <HAL_GetTick>
 80015ba:	1b80      	subs	r0, r0, r6
 80015bc:	4540      	cmp	r0, r8
 80015be:	d9f7      	bls.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80015c0:	e7dd      	b.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40007000 	.word	0x40007000
 80015cc:	42420440 	.word	0x42420440

080015d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d4:	4604      	mov	r4, r0
 80015d6:	4688      	mov	r8, r1
 80015d8:	4617      	mov	r7, r2
 80015da:	461d      	mov	r5, r3
 80015dc:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6893      	ldr	r3, [r2, #8]
 80015e2:	ea38 0303 	bics.w	r3, r8, r3
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	429f      	cmp	r7, r3
 80015ee:	d102      	bne.n	80015f6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80015f0:	2000      	movs	r0, #0
}
 80015f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80015f6:	1c6b      	adds	r3, r5, #1
 80015f8:	d0f2      	beq.n	80015e0 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80015fa:	bb55      	cbnz	r5, 8001652 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001604:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001606:	6862      	ldr	r2, [r4, #4]
 8001608:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800160c:	d10a      	bne.n	8001624 <SPI_WaitFlagStateUntilTimeout+0x54>
 800160e:	68a2      	ldr	r2, [r4, #8]
 8001610:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001614:	d002      	beq.n	800161c <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001616:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800161a:	d103      	bne.n	8001624 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001622:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001624:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001626:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800162a:	d109      	bne.n	8001640 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001632:	0412      	lsls	r2, r2, #16
 8001634:	0c12      	lsrs	r2, r2, #16
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800163e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001640:	2301      	movs	r3, #1
 8001642:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001646:	2300      	movs	r3, #0
 8001648:	2003      	movs	r0, #3
 800164a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001652:	f7fe fdd1 	bl	80001f8 <HAL_GetTick>
 8001656:	1b80      	subs	r0, r0, r6
 8001658:	4285      	cmp	r5, r0
 800165a:	d8c0      	bhi.n	80015de <SPI_WaitFlagStateUntilTimeout+0xe>
 800165c:	e7ce      	b.n	80015fc <SPI_WaitFlagStateUntilTimeout+0x2c>

0800165e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800165e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001660:	460b      	mov	r3, r1
 8001662:	9200      	str	r2, [sp, #0]
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	2200      	movs	r2, #0
{
 8001668:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800166a:	f7ff ffb1 	bl	80015d0 <SPI_WaitFlagStateUntilTimeout>
 800166e:	b120      	cbz	r0, 800167a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001670:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001672:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800167a:	b002      	add	sp, #8
 800167c:	bd10      	pop	{r4, pc}

0800167e <HAL_SPI_TransmitReceive>:
{
 800167e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001682:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001684:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001688:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800168a:	2b01      	cmp	r3, #1
{
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	4616      	mov	r6, r2
 8001692:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001694:	f000 80ee 	beq.w	8001874 <HAL_SPI_TransmitReceive+0x1f6>
 8001698:	2301      	movs	r3, #1
 800169a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800169e:	f7fe fdab 	bl	80001f8 <HAL_GetTick>
  tmp  = hspi->State;
 80016a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80016a6:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80016a8:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80016aa:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 80016ac:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80016ae:	d00a      	beq.n	80016c6 <HAL_SPI_TransmitReceive+0x48>
 80016b0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80016b4:	f040 80dc 	bne.w	8001870 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80016b8:	68a2      	ldr	r2, [r4, #8]
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	f040 80d8 	bne.w	8001870 <HAL_SPI_TransmitReceive+0x1f2>
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	f040 80d5 	bne.w	8001870 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016c6:	2d00      	cmp	r5, #0
 80016c8:	d04e      	beq.n	8001768 <HAL_SPI_TransmitReceive+0xea>
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	d04c      	beq.n	8001768 <HAL_SPI_TransmitReceive+0xea>
 80016ce:	f1b9 0f00 	cmp.w	r9, #0
 80016d2:	d049      	beq.n	8001768 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80016d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80016d8:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80016da:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80016dc:	bf04      	itt	eq
 80016de:	2305      	moveq	r3, #5
 80016e0:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80016e8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80016ea:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80016ec:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80016ee:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80016f2:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80016f6:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80016f8:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80016fc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80016fe:	bf58      	it	pl
 8001700:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001702:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001704:	bf58      	it	pl
 8001706:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800170a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800170e:	bf58      	it	pl
 8001710:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001712:	68e2      	ldr	r2, [r4, #12]
 8001714:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001718:	d15d      	bne.n	80017d6 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800171a:	b119      	cbz	r1, 8001724 <HAL_SPI_TransmitReceive+0xa6>
 800171c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800171e:	b292      	uxth	r2, r2
 8001720:	2a01      	cmp	r2, #1
 8001722:	d106      	bne.n	8001732 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001724:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001728:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800172a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800172c:	3b01      	subs	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001732:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001736:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001738:	b29b      	uxth	r3, r3
 800173a:	b9bb      	cbnz	r3, 800176c <HAL_SPI_TransmitReceive+0xee>
 800173c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800173e:	b29b      	uxth	r3, r3
 8001740:	b9a3      	cbnz	r3, 800176c <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001742:	f8cd 8000 	str.w	r8, [sp]
 8001746:	463b      	mov	r3, r7
 8001748:	2201      	movs	r2, #1
 800174a:	2102      	movs	r1, #2
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff ff3f 	bl	80015d0 <SPI_WaitFlagStateUntilTimeout>
 8001752:	2800      	cmp	r0, #0
 8001754:	d135      	bne.n	80017c2 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001756:	4642      	mov	r2, r8
 8001758:	4639      	mov	r1, r7
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff ff7f 	bl	800165e <SPI_CheckFlag_BSY>
 8001760:	2800      	cmp	r0, #0
 8001762:	d07a      	beq.n	800185a <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001764:	2320      	movs	r3, #32
 8001766:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001768:	2001      	movs	r0, #1
 800176a:	e02b      	b.n	80017c4 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800176c:	f1b9 0f00 	cmp.w	r9, #0
 8001770:	d00f      	beq.n	8001792 <HAL_SPI_TransmitReceive+0x114>
 8001772:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001774:	b29b      	uxth	r3, r3
 8001776:	b163      	cbz	r3, 8001792 <HAL_SPI_TransmitReceive+0x114>
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	0791      	lsls	r1, r2, #30
 800177e:	d508      	bpl.n	8001792 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8001780:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001784:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001788:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800178a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800178c:	3b01      	subs	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001792:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001794:	b29b      	uxth	r3, r3
 8001796:	b163      	cbz	r3, 80017b2 <HAL_SPI_TransmitReceive+0x134>
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	07d2      	lsls	r2, r2, #31
 800179e:	d508      	bpl.n	80017b2 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 80017a0:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80017aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80017b2:	1c78      	adds	r0, r7, #1
 80017b4:	d0bf      	beq.n	8001736 <HAL_SPI_TransmitReceive+0xb8>
 80017b6:	f7fe fd1f 	bl	80001f8 <HAL_GetTick>
 80017ba:	eba0 0008 	sub.w	r0, r0, r8
 80017be:	4287      	cmp	r7, r0
 80017c0:	d8b9      	bhi.n	8001736 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80017c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80017ca:	2300      	movs	r3, #0
 80017cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80017d0:	b005      	add	sp, #20
 80017d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80017d6:	b119      	cbz	r1, 80017e0 <HAL_SPI_TransmitReceive+0x162>
 80017d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017da:	b292      	uxth	r2, r2
 80017dc:	2a01      	cmp	r2, #1
 80017de:	d106      	bne.n	80017ee <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80017e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80017e4:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80017e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80017ee:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b91b      	cbnz	r3, 8001800 <HAL_SPI_TransmitReceive+0x182>
 80017f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0a0      	beq.n	8001742 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001800:	f1b9 0f00 	cmp.w	r9, #0
 8001804:	d00f      	beq.n	8001826 <HAL_SPI_TransmitReceive+0x1a8>
 8001806:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001808:	b29b      	uxth	r3, r3
 800180a:	b163      	cbz	r3, 8001826 <HAL_SPI_TransmitReceive+0x1a8>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	0791      	lsls	r1, r2, #30
 8001812:	d508      	bpl.n	8001826 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001814:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001818:	782a      	ldrb	r2, [r5, #0]
 800181a:	3501      	adds	r5, #1
 800181c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800181e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001820:	3b01      	subs	r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001826:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001828:	b29b      	uxth	r3, r3
 800182a:	b16b      	cbz	r3, 8001848 <HAL_SPI_TransmitReceive+0x1ca>
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	07d2      	lsls	r2, r2, #31
 8001832:	d509      	bpl.n	8001848 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001834:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3601      	adds	r6, #1
 800183c:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001840:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001842:	3b01      	subs	r3, #1
 8001844:	b29b      	uxth	r3, r3
 8001846:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001848:	1c7b      	adds	r3, r7, #1
 800184a:	d0d2      	beq.n	80017f2 <HAL_SPI_TransmitReceive+0x174>
 800184c:	f7fe fcd4 	bl	80001f8 <HAL_GetTick>
 8001850:	eba0 0008 	sub.w	r0, r0, r8
 8001854:	4287      	cmp	r7, r0
 8001856:	d8cc      	bhi.n	80017f2 <HAL_SPI_TransmitReceive+0x174>
 8001858:	e7b3      	b.n	80017c2 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800185a:	68a3      	ldr	r3, [r4, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1b1      	bne.n	80017c4 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	9003      	str	r0, [sp, #12]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	9203      	str	r2, [sp, #12]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	9b03      	ldr	r3, [sp, #12]
 800186e:	e7a9      	b.n	80017c4 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001870:	2002      	movs	r0, #2
 8001872:	e7a7      	b.n	80017c4 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001874:	2002      	movs	r0, #2
 8001876:	e7ab      	b.n	80017d0 <HAL_SPI_TransmitReceive+0x152>

08001878 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001878:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800187a:	4604      	mov	r4, r0
 800187c:	2800      	cmp	r0, #0
 800187e:	d034      	beq.n	80018ea <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001884:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001888:	b90b      	cbnz	r3, 800188e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800188a:	f004 f8f3 	bl	8005a74 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800188e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001890:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001892:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001896:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001898:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800189a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800189e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	69a2      	ldr	r2, [r4, #24]
 80018a4:	4303      	orrs	r3, r0
 80018a6:	68e0      	ldr	r0, [r4, #12]
 80018a8:	4303      	orrs	r3, r0
 80018aa:	6920      	ldr	r0, [r4, #16]
 80018ac:	4303      	orrs	r3, r0
 80018ae:	6960      	ldr	r0, [r4, #20]
 80018b0:	4303      	orrs	r3, r0
 80018b2:	69e0      	ldr	r0, [r4, #28]
 80018b4:	4303      	orrs	r3, r0
 80018b6:	6a20      	ldr	r0, [r4, #32]
 80018b8:	4303      	orrs	r3, r0
 80018ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80018bc:	4303      	orrs	r3, r0
 80018be:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80018c2:	4303      	orrs	r3, r0
 80018c4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80018c6:	0c12      	lsrs	r2, r2, #16
 80018c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ca:	f002 0204 	and.w	r2, r2, #4
 80018ce:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80018d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80018d2:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80018d4:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018d6:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018d8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018de:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80018e0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018e2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80018e4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 80018e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
}
 80018ec:	bd10      	pop	{r4, pc}

080018ee <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80018ee:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80018f0:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80018f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80018fe:	2301      	movs	r3, #1
 8001900:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001904:	2000      	movs	r0, #0
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001908:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800190a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	4770      	bx	lr

0800191e <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 800191e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001922:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001924:	2b01      	cmp	r3, #1
 8001926:	f04f 0302 	mov.w	r3, #2
 800192a:	d01c      	beq.n	8001966 <HAL_TIM_ConfigClockSource+0x48>
 800192c:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 800192e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001932:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001934:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001938:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800193e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001944:	680a      	ldr	r2, [r1, #0]
 8001946:	2a40      	cmp	r2, #64	; 0x40
 8001948:	d079      	beq.n	8001a3e <HAL_TIM_ConfigClockSource+0x120>
 800194a:	d819      	bhi.n	8001980 <HAL_TIM_ConfigClockSource+0x62>
 800194c:	2a10      	cmp	r2, #16
 800194e:	f000 8093 	beq.w	8001a78 <HAL_TIM_ConfigClockSource+0x15a>
 8001952:	d80a      	bhi.n	800196a <HAL_TIM_ConfigClockSource+0x4c>
 8001954:	2a00      	cmp	r2, #0
 8001956:	f000 8089 	beq.w	8001a6c <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800195a:	2301      	movs	r3, #1
 800195c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001960:	2300      	movs	r3, #0
 8001962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001966:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001968:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800196a:	2a20      	cmp	r2, #32
 800196c:	f000 808a 	beq.w	8001a84 <HAL_TIM_ConfigClockSource+0x166>
 8001970:	2a30      	cmp	r2, #48	; 0x30
 8001972:	d1f2      	bne.n	800195a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001974:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800197a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800197e:	e036      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001980:	2a70      	cmp	r2, #112	; 0x70
 8001982:	d036      	beq.n	80019f2 <HAL_TIM_ConfigClockSource+0xd4>
 8001984:	d81b      	bhi.n	80019be <HAL_TIM_ConfigClockSource+0xa0>
 8001986:	2a50      	cmp	r2, #80	; 0x50
 8001988:	d042      	beq.n	8001a10 <HAL_TIM_ConfigClockSource+0xf2>
 800198a:	2a60      	cmp	r2, #96	; 0x60
 800198c:	d1e5      	bne.n	800195a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800198e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001990:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001992:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001996:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001998:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800199a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800199c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800199e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019aa:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80019ae:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80019b0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019b2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019b8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80019bc:	e017      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80019be:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80019c2:	d011      	beq.n	80019e8 <HAL_TIM_ConfigClockSource+0xca>
 80019c4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80019c8:	d1c7      	bne.n	800195a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ca:	688a      	ldr	r2, [r1, #8]
 80019cc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80019ce:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019d0:	68c9      	ldr	r1, [r1, #12]
 80019d2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019d4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019dc:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019de:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e6:	e002      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e7b3      	b.n	800195a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f2:	688a      	ldr	r2, [r1, #8]
 80019f4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80019f6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f8:	68c9      	ldr	r1, [r1, #12]
 80019fa:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019fc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a04:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001a06:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001a08:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a0a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001a0e:	e7ee      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a10:	684c      	ldr	r4, [r1, #4]
 8001a12:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a14:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a16:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a18:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a1c:	f025 0501 	bic.w	r5, r5, #1
 8001a20:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a22:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001a24:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a2a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a30:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a32:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a38:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001a3c:	e7d7      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a3e:	684c      	ldr	r4, [r1, #4]
 8001a40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a42:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a44:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a46:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a4a:	f025 0501 	bic.w	r5, r5, #1
 8001a4e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a50:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001a52:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a58:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a5e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a60:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a66:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001a6a:	e7c0      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a6c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a72:	f042 0207 	orr.w	r2, r2, #7
 8001a76:	e7ba      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a78:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a7e:	f042 0217 	orr.w	r2, r2, #23
 8001a82:	e7b4      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a84:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a8a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001a8e:	e7ae      	b.n	80019ee <HAL_TIM_ConfigClockSource+0xd0>

08001a90 <HAL_TIM_PeriodElapsedCallback>:
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_OC_DelayElapsedCallback>:
 8001a92:	4770      	bx	lr

08001a94 <HAL_TIM_IC_CaptureCallback>:
 8001a94:	4770      	bx	lr

08001a96 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001a96:	4770      	bx	lr

08001a98 <HAL_TIM_TriggerCallback>:
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a9a:	6803      	ldr	r3, [r0, #0]
{
 8001a9c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a9e:	691a      	ldr	r2, [r3, #16]
{
 8001aa0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa2:	0791      	lsls	r1, r2, #30
 8001aa4:	d50e      	bpl.n	8001ac4 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	0792      	lsls	r2, r2, #30
 8001aaa:	d50b      	bpl.n	8001ac4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aac:	f06f 0202 	mvn.w	r2, #2
 8001ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab8:	079b      	lsls	r3, r3, #30
 8001aba:	d077      	beq.n	8001bac <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	f7ff ffea 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	0750      	lsls	r0, r2, #29
 8001aca:	d510      	bpl.n	8001aee <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	0751      	lsls	r1, r2, #29
 8001ad0:	d50d      	bpl.n	8001aee <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad2:	f06f 0204 	mvn.w	r2, #4
 8001ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ada:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001adc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ade:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae4:	d068      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	f7ff ffd5 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	2300      	movs	r3, #0
 8001aec:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	0712      	lsls	r2, r2, #28
 8001af4:	d50f      	bpl.n	8001b16 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	0710      	lsls	r0, r2, #28
 8001afa:	d50c      	bpl.n	8001b16 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001afc:	f06f 0208 	mvn.w	r2, #8
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b02:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b04:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b06:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b08:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b0c:	d05a      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	f7ff ffc1 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b12:	2300      	movs	r3, #0
 8001b14:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	06d2      	lsls	r2, r2, #27
 8001b1c:	d510      	bpl.n	8001b40 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	06d0      	lsls	r0, r2, #27
 8001b22:	d50d      	bpl.n	8001b40 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b24:	f06f 0210 	mvn.w	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b2c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b30:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001b34:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b36:	d04b      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b38:	f7ff ffac 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	07d1      	lsls	r1, r2, #31
 8001b46:	d508      	bpl.n	8001b5a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	07d2      	lsls	r2, r2, #31
 8001b4c:	d505      	bpl.n	8001b5a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b4e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b56:	f7ff ff9b 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	0610      	lsls	r0, r2, #24
 8001b60:	d508      	bpl.n	8001b74 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	0611      	lsls	r1, r2, #24
 8001b66:	d505      	bpl.n	8001b74 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001b6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b70:	f000 f8ab 	bl	8001cca <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	0652      	lsls	r2, r2, #25
 8001b7a:	d508      	bpl.n	8001b8e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	0650      	lsls	r0, r2, #25
 8001b80:	d505      	bpl.n	8001b8e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001b86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b88:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b8a:	f7ff ff85 	bl	8001a98 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	0691      	lsls	r1, r2, #26
 8001b94:	d522      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	0692      	lsls	r2, r2, #26
 8001b9a:	d51f      	bpl.n	8001bdc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b9c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ba0:	4620      	mov	r0, r4
}
 8001ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001ba8:	f000 b88e 	b.w	8001cc8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bac:	f7ff ff71 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ff70 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bb6:	e783      	b.n	8001ac0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb8:	f7ff ff6b 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff ff6a 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bc2:	e792      	b.n	8001aea <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc4:	f7ff ff65 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ff64 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bce:	e7a0      	b.n	8001b12 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd0:	f7ff ff5f 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff ff5e 	bl	8001a96 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bda:	e7af      	b.n	8001b3c <HAL_TIM_IRQHandler+0xa2>
 8001bdc:	bd10      	pop	{r4, pc}
	...

08001be0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001be2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be4:	4290      	cmp	r0, r2
 8001be6:	d00a      	beq.n	8001bfe <TIM_Base_SetConfig+0x1e>
 8001be8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bec:	d007      	beq.n	8001bfe <TIM_Base_SetConfig+0x1e>
 8001bee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bf2:	4290      	cmp	r0, r2
 8001bf4:	d003      	beq.n	8001bfe <TIM_Base_SetConfig+0x1e>
 8001bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bfa:	4290      	cmp	r0, r2
 8001bfc:	d115      	bne.n	8001c2a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001bfe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c04:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <TIM_Base_SetConfig+0x6c>)
 8001c08:	4290      	cmp	r0, r2
 8001c0a:	d00a      	beq.n	8001c22 <TIM_Base_SetConfig+0x42>
 8001c0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c10:	d007      	beq.n	8001c22 <TIM_Base_SetConfig+0x42>
 8001c12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c16:	4290      	cmp	r0, r2
 8001c18:	d003      	beq.n	8001c22 <TIM_Base_SetConfig+0x42>
 8001c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c1e:	4290      	cmp	r0, r2
 8001c20:	d103      	bne.n	8001c2a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c22:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c28:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c2a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c34:	688b      	ldr	r3, [r1, #8]
 8001c36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c38:	680b      	ldr	r3, [r1, #0]
 8001c3a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <TIM_Base_SetConfig+0x6c>)
 8001c3e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001c40:	bf04      	itt	eq
 8001c42:	690b      	ldreq	r3, [r1, #16]
 8001c44:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001c46:	2301      	movs	r3, #1
 8001c48:	6143      	str	r3, [r0, #20]
 8001c4a:	4770      	bx	lr
 8001c4c:	40012c00 	.word	0x40012c00

08001c50 <HAL_TIM_Base_Init>:
{
 8001c50:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c52:	4604      	mov	r4, r0
 8001c54:	b1a0      	cbz	r0, 8001c80 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c5e:	b91b      	cbnz	r3, 8001c68 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c64:	f003 ff30 	bl	8005ac8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001c6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	1d21      	adds	r1, r4, #4
 8001c72:	f7ff ffb5 	bl	8001be0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c76:	2301      	movs	r3, #1
  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001c7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c80:	2001      	movs	r0, #1
}
 8001c82:	bd10      	pop	{r4, pc}

08001c84 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001c84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c88:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f04f 0302 	mov.w	r3, #2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c96:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001c98:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c9a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c9c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ca2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001cc4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001cc6:	bd10      	pop	{r4, pc}

08001cc8 <HAL_TIMEx_CommutationCallback>:
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	4770      	bx	lr

08001ccc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001ce4:	4770      	bx	lr
	...

08001ce8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cec:	6805      	ldr	r5, [r0, #0]
 8001cee:	68c2      	ldr	r2, [r0, #12]
 8001cf0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cf2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cfc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001cfe:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001d04:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001d08:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d0c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d12:	696b      	ldr	r3, [r5, #20]
 8001d14:	6982      	ldr	r2, [r0, #24]
 8001d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <UART_SetConfig+0x138>)
{
 8001d20:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001d22:	429d      	cmp	r5, r3
 8001d24:	f04f 0419 	mov.w	r4, #25
 8001d28:	d146      	bne.n	8001db8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d2a:	f7ff fbc9 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 8001d2e:	fb04 f300 	mul.w	r3, r4, r0
 8001d32:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001d36:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001d3a:	00b6      	lsls	r6, r6, #2
 8001d3c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d40:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d44:	011e      	lsls	r6, r3, #4
 8001d46:	f7ff fbbb 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 8001d4a:	4360      	muls	r0, r4
 8001d4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d56:	f7ff fbb3 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 8001d5a:	4360      	muls	r0, r4
 8001d5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d6a:	fb08 7313 	mls	r3, r8, r3, r7
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	3332      	adds	r3, #50	; 0x32
 8001d72:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d76:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001d7a:	f7ff fba1 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 8001d7e:	4360      	muls	r0, r4
 8001d80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	fbb0 faf2 	udiv	sl, r0, r2
 8001d8a:	f7ff fb99 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d8e:	4360      	muls	r0, r4
 8001d90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d9e:	fb08 a313 	mls	r3, r8, r3, sl
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	3332      	adds	r3, #50	; 0x32
 8001da6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	433b      	orrs	r3, r7
 8001db0:	4433      	add	r3, r6
 8001db2:	60ab      	str	r3, [r5, #8]
 8001db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db8:	f7ff fb72 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001dbc:	fb04 f300 	mul.w	r3, r4, r0
 8001dc0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001dc4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001dc8:	00b6      	lsls	r6, r6, #2
 8001dca:	fbb3 f3f6 	udiv	r3, r3, r6
 8001dce:	fbb3 f3f8 	udiv	r3, r3, r8
 8001dd2:	011e      	lsls	r6, r3, #4
 8001dd4:	f7ff fb64 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001dd8:	4360      	muls	r0, r4
 8001dda:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001de4:	f7ff fb5c 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001de8:	4360      	muls	r0, r4
 8001dea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001df8:	fb08 7313 	mls	r3, r8, r3, r7
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	3332      	adds	r3, #50	; 0x32
 8001e00:	fbb3 f3f8 	udiv	r3, r3, r8
 8001e04:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001e08:	f7ff fb4a 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	4360      	muls	r0, r4
 8001e0e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	fbb0 faf2 	udiv	sl, r0, r2
 8001e18:	f7ff fb42 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001e1c:	e7b7      	b.n	8001d8e <UART_SetConfig+0xa6>
 8001e1e:	bf00      	nop
 8001e20:	40013800 	.word	0x40013800

08001e24 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	4604      	mov	r4, r0
 8001e28:	460e      	mov	r6, r1
 8001e2a:	4617      	mov	r7, r2
 8001e2c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e2e:	6821      	ldr	r1, [r4, #0]
 8001e30:	680b      	ldr	r3, [r1, #0]
 8001e32:	ea36 0303 	bics.w	r3, r6, r3
 8001e36:	d101      	bne.n	8001e3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e3c:	1c6b      	adds	r3, r5, #1
 8001e3e:	d0f7      	beq.n	8001e30 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e40:	b995      	cbnz	r5, 8001e68 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e42:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001e44:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001e56:	2320      	movs	r3, #32
 8001e58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e5c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001e60:	2300      	movs	r3, #0
 8001e62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e68:	f7fe f9c6 	bl	80001f8 <HAL_GetTick>
 8001e6c:	1bc0      	subs	r0, r0, r7
 8001e6e:	4285      	cmp	r5, r0
 8001e70:	d2dd      	bcs.n	8001e2e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001e72:	e7e6      	b.n	8001e42 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001e74 <HAL_UART_Init>:
{
 8001e74:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e76:	4604      	mov	r4, r0
 8001e78:	b340      	cbz	r0, 8001ecc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e82:	b91b      	cbnz	r3, 8001e8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e88:	f003 fe52 	bl	8005b30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e8e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e94:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e96:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e9c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e9e:	f7ff ff23 	bl	8001ce8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ebc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001ebe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ec2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001ec6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001eca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
}
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <HAL_UART_Transmit>:
{
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001ed6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001eda:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001edc:	2b20      	cmp	r3, #32
{
 8001ede:	460d      	mov	r5, r1
 8001ee0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001ee2:	d14e      	bne.n	8001f82 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d049      	beq.n	8001f7c <HAL_UART_Transmit+0xac>
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d047      	beq.n	8001f7c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001eec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d046      	beq.n	8001f82 <HAL_UART_Transmit+0xb2>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efe:	2321      	movs	r3, #33	; 0x21
 8001f00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001f04:	f7fe f978 	bl	80001f8 <HAL_GetTick>
 8001f08:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001f0a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001f12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b96b      	cbnz	r3, 8001f34 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff ff80 	bl	8001e24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f24:	b9a8      	cbnz	r0, 8001f52 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001f26:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001f28:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001f2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001f34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f36:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f3e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f40:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f46:	4620      	mov	r0, r4
 8001f48:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f4a:	d10e      	bne.n	8001f6a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4c:	f7ff ff6a 	bl	8001e24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f50:	b110      	cbz	r0, 8001f58 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
 8001f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f58:	882b      	ldrh	r3, [r5, #0]
 8001f5a:	6822      	ldr	r2, [r4, #0]
 8001f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f60:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	b943      	cbnz	r3, 8001f78 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001f66:	3502      	adds	r5, #2
 8001f68:	e7d3      	b.n	8001f12 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	f7ff ff5b 	bl	8001e24 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	782a      	ldrb	r2, [r5, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	3501      	adds	r5, #1
 8001f7a:	e7ca      	b.n	8001f12 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001f82:	2002      	movs	r0, #2
}
 8001f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f88 <HAL_UART_TxCpltCallback>:
 8001f88:	4770      	bx	lr

08001f8a <HAL_UART_RxCpltCallback>:
 8001f8a:	4770      	bx	lr

08001f8c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001f8c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001f90:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001f92:	2b22      	cmp	r3, #34	; 0x22
 8001f94:	d136      	bne.n	8002004 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f96:	6883      	ldr	r3, [r0, #8]
 8001f98:	6901      	ldr	r1, [r0, #16]
 8001f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9e:	6802      	ldr	r2, [r0, #0]
 8001fa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001fa2:	d123      	bne.n	8001fec <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fa4:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001fa6:	b9e9      	cbnz	r1, 8001fe4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001fb0:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001fb2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001fb4:	3c01      	subs	r4, #1
 8001fb6:	b2a4      	uxth	r4, r4
 8001fb8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001fba:	b98c      	cbnz	r4, 8001fe0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fbc:	6803      	ldr	r3, [r0, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	f022 0220 	bic.w	r2, r2, #32
 8001fc4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001fdc:	f7ff ffd5 	bl	8001f8a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001fe0:	2000      	movs	r0, #0
}
 8001fe2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f823 2b01 	strh.w	r2, [r3], #1
 8001fea:	e7e1      	b.n	8001fb0 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001fec:	b921      	cbnz	r1, 8001ff8 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	6852      	ldr	r2, [r2, #4]
 8001ff2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e7dc      	b.n	8001fb2 <UART_Receive_IT+0x26>
 8001ff8:	6852      	ldr	r2, [r2, #4]
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	6281      	str	r1, [r0, #40]	; 0x28
 8001ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002002:	e7f7      	b.n	8001ff4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002004:	2002      	movs	r0, #2
 8002006:	bd10      	pop	{r4, pc}

08002008 <HAL_UART_ErrorCallback>:
 8002008:	4770      	bx	lr
	...

0800200c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800200c:	6803      	ldr	r3, [r0, #0]
{
 800200e:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002010:	681a      	ldr	r2, [r3, #0]
{
 8002012:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002014:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002016:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002018:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800201a:	d107      	bne.n	800202c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800201c:	0696      	lsls	r6, r2, #26
 800201e:	d55a      	bpl.n	80020d6 <HAL_UART_IRQHandler+0xca>
 8002020:	068d      	lsls	r5, r1, #26
 8002022:	d558      	bpl.n	80020d6 <HAL_UART_IRQHandler+0xca>
}
 8002024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002028:	f7ff bfb0 	b.w	8001f8c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800202c:	f015 0501 	ands.w	r5, r5, #1
 8002030:	d102      	bne.n	8002038 <HAL_UART_IRQHandler+0x2c>
 8002032:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002036:	d04e      	beq.n	80020d6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002038:	07d3      	lsls	r3, r2, #31
 800203a:	d505      	bpl.n	8002048 <HAL_UART_IRQHandler+0x3c>
 800203c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800203e:	bf42      	ittt	mi
 8002040:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002042:	f043 0301 	orrmi.w	r3, r3, #1
 8002046:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002048:	0750      	lsls	r0, r2, #29
 800204a:	d504      	bpl.n	8002056 <HAL_UART_IRQHandler+0x4a>
 800204c:	b11d      	cbz	r5, 8002056 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800204e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002056:	0793      	lsls	r3, r2, #30
 8002058:	d504      	bpl.n	8002064 <HAL_UART_IRQHandler+0x58>
 800205a:	b11d      	cbz	r5, 8002064 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800205c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002064:	0716      	lsls	r6, r2, #28
 8002066:	d504      	bpl.n	8002072 <HAL_UART_IRQHandler+0x66>
 8002068:	b11d      	cbz	r5, 8002072 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800206a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002072:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d066      	beq.n	8002146 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002078:	0695      	lsls	r5, r2, #26
 800207a:	d504      	bpl.n	8002086 <HAL_UART_IRQHandler+0x7a>
 800207c:	0688      	lsls	r0, r1, #26
 800207e:	d502      	bpl.n	8002086 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff ff83 	bl	8001f8c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002086:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002088:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800208a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800208c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800208e:	0711      	lsls	r1, r2, #28
 8002090:	d402      	bmi.n	8002098 <HAL_UART_IRQHandler+0x8c>
 8002092:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002096:	d01a      	beq.n	80020ce <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002098:	f7ff fe18 	bl	8001ccc <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	0652      	lsls	r2, r2, #25
 80020a2:	d510      	bpl.n	80020c6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80020a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ac:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80020ae:	b150      	cbz	r0, 80020c6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_UART_IRQHandler+0x13c>)
 80020b2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020b4:	f7fe f932 	bl	800031c <HAL_DMA_Abort_IT>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d044      	beq.n	8002146 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80020be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020c4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff ff9e 	bl	8002008 <HAL_UART_ErrorCallback>
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80020ce:	f7ff ff9b 	bl	8002008 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020d6:	0616      	lsls	r6, r2, #24
 80020d8:	d527      	bpl.n	800212a <HAL_UART_IRQHandler+0x11e>
 80020da:	060d      	lsls	r5, r1, #24
 80020dc:	d525      	bpl.n	800212a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80020de:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80020e2:	2a21      	cmp	r2, #33	; 0x21
 80020e4:	d12f      	bne.n	8002146 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020e6:	68a2      	ldr	r2, [r4, #8]
 80020e8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80020ec:	6a22      	ldr	r2, [r4, #32]
 80020ee:	d117      	bne.n	8002120 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020f0:	8811      	ldrh	r1, [r2, #0]
 80020f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80020f6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80020f8:	6921      	ldr	r1, [r4, #16]
 80020fa:	b979      	cbnz	r1, 800211c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80020fc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80020fe:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002100:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002102:	3a01      	subs	r2, #1
 8002104:	b292      	uxth	r2, r2
 8002106:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002108:	b9ea      	cbnz	r2, 8002146 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800211c:	3201      	adds	r2, #1
 800211e:	e7ee      	b.n	80020fe <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002120:	1c51      	adds	r1, r2, #1
 8002122:	6221      	str	r1, [r4, #32]
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	e7ea      	b.n	8002100 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800212a:	0650      	lsls	r0, r2, #25
 800212c:	d50b      	bpl.n	8002146 <HAL_UART_IRQHandler+0x13a>
 800212e:	064a      	lsls	r2, r1, #25
 8002130:	d509      	bpl.n	8002146 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002132:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002134:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800213c:	2320      	movs	r3, #32
 800213e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002142:	f7ff ff21 	bl	8001f88 <HAL_UART_TxCpltCallback>
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	0800214d 	.word	0x0800214d

0800214c <UART_DMAAbortOnError>:
{
 800214c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800214e:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002150:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002152:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002154:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002156:	f7ff ff57 	bl	8002008 <HAL_UART_ErrorCallback>
 800215a:	bd08      	pop	{r3, pc}

0800215c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800215c:	b084      	sub	sp, #16
 800215e:	a801      	add	r0, sp, #4
 8002160:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002164:	b004      	add	sp, #16
 8002166:	2000      	movs	r0, #0
 8002168:	4770      	bx	lr

0800216a <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800216a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800216e:	b29b      	uxth	r3, r3
 8002170:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002174:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002178:	2000      	movs	r0, #0
 800217a:	4770      	bx	lr

0800217c <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800217c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002180:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002184:	045b      	lsls	r3, r3, #17
 8002186:	0c5b      	lsrs	r3, r3, #17
 8002188:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800218c:	2000      	movs	r0, #0
 800218e:	4770      	bx	lr

08002190 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002194:	b084      	sub	sp, #16
 8002196:	b510      	push	{r4, lr}
 8002198:	ac03      	add	r4, sp, #12
 800219a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800219e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80021a2:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80021aa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80021ae:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80021b2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80021b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80021ba:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80021c2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80021c6:	4610      	mov	r0, r2
 80021c8:	4770      	bx	lr
	...

080021cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80021ce:	78cb      	ldrb	r3, [r1, #3]
 80021d0:	780a      	ldrb	r2, [r1, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d80f      	bhi.n	80021f6 <USB_ActivateEndpoint+0x2a>
 80021d6:	e8df f003 	tbb	[pc, r3]
 80021da:	6402      	.short	0x6402
 80021dc:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80021de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80021f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80021f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80021fa:	780c      	ldrb	r4, [r1, #0]
 80021fc:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002200:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8002204:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002208:	401a      	ands	r2, r3
 800220a:	432a      	orrs	r2, r5
 800220c:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002210:	7a8a      	ldrb	r2, [r1, #10]
 8002212:	780d      	ldrb	r5, [r1, #0]
 8002214:	2a00      	cmp	r2, #0
 8002216:	f040 8097 	bne.w	8002348 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 800221a:	784c      	ldrb	r4, [r1, #1]
 800221c:	888a      	ldrh	r2, [r1, #4]
 800221e:	2c00      	cmp	r4, #0
 8002220:	d04a      	beq.n	80022b8 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002222:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002226:	0852      	lsrs	r2, r2, #1
 8002228:	b2a4      	uxth	r4, r4
 800222a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800222e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002232:	0052      	lsls	r2, r2, #1
 8002234:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002238:	780c      	ldrb	r4, [r1, #0]
 800223a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800223e:	0652      	lsls	r2, r2, #25
 8002240:	d508      	bpl.n	8002254 <USB_ActivateEndpoint+0x88>
 8002242:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002246:	4013      	ands	r3, r2
 8002248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002250:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002254:	780a      	ldrb	r2, [r1, #0]
 8002256:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002272:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002276:	2000      	movs	r0, #0
 8002278:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800227a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800227e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	e7b2      	b.n	80021f2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800228c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002290:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80022a0:	e7a7      	b.n	80021f2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80022a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b6:	e79c      	b.n	80021f2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022bc:	0852      	lsrs	r2, r2, #1
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3304      	adds	r3, #4
 80022c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80022c6:	0052      	lsls	r2, r2, #1
 80022c8:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80022cc:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80022d4:	690d      	ldr	r5, [r1, #16]
 80022d6:	b292      	uxth	r2, r2
 80022d8:	780b      	ldrb	r3, [r1, #0]
 80022da:	3206      	adds	r2, #6
 80022dc:	2d3e      	cmp	r5, #62	; 0x3e
 80022de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80022e2:	d929      	bls.n	8002338 <USB_ActivateEndpoint+0x16c>
 80022e4:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80022e8:	06eb      	lsls	r3, r5, #27
 80022ea:	bf04      	itt	eq
 80022ec:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80022f0:	b29e      	uxtheq	r6, r3
 80022f2:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <USB_ActivateEndpoint+0x2e0>)
 80022f4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022fe:	780a      	ldrb	r2, [r1, #0]
 8002300:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002304:	045e      	lsls	r6, r3, #17
 8002306:	d50b      	bpl.n	8002320 <USB_ActivateEndpoint+0x154>
 8002308:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800230c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	0d1b      	lsrs	r3, r3, #20
 8002314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002320:	780a      	ldrb	r2, [r1, #0]
 8002322:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002336:	e798      	b.n	800226a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002338:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800233c:	07ed      	lsls	r5, r5, #31
 800233e:	bf44      	itt	mi
 8002340:	3301      	addmi	r3, #1
 8002342:	b29b      	uxthmi	r3, r3
 8002344:	029b      	lsls	r3, r3, #10
 8002346:	e7d7      	b.n	80022f8 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002348:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800234c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002350:	0512      	lsls	r2, r2, #20
 8002352:	0d12      	lsrs	r2, r2, #20
 8002354:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002358:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800235c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002360:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002364:	780c      	ldrb	r4, [r1, #0]
 8002366:	b292      	uxth	r2, r2
 8002368:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800236c:	88cc      	ldrh	r4, [r1, #6]
 800236e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002372:	0864      	lsrs	r4, r4, #1
 8002374:	0064      	lsls	r4, r4, #1
 8002376:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800237a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800237e:	780c      	ldrb	r4, [r1, #0]
 8002380:	b292      	uxth	r2, r2
 8002382:	3204      	adds	r2, #4
 8002384:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002388:	890c      	ldrh	r4, [r1, #8]
 800238a:	0864      	lsrs	r4, r4, #1
 800238c:	0064      	lsls	r4, r4, #1
 800238e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002392:	784a      	ldrb	r2, [r1, #1]
 8002394:	780c      	ldrb	r4, [r1, #0]
 8002396:	2a00      	cmp	r2, #0
 8002398:	d147      	bne.n	800242a <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800239a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800239e:	0455      	lsls	r5, r2, #17
 80023a0:	d508      	bpl.n	80023b4 <USB_ActivateEndpoint+0x1e8>
 80023a2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023b4:	780a      	ldrb	r2, [r1, #0]
 80023b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023ba:	065c      	lsls	r4, r3, #25
 80023bc:	d50b      	bpl.n	80023d6 <USB_ActivateEndpoint+0x20a>
 80023be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	051b      	lsls	r3, r3, #20
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80023d6:	780a      	ldrb	r2, [r1, #0]
 80023d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	0d1b      	lsrs	r3, r3, #20
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023f0:	f248 0280 	movw	r2, #32896	; 0x8080
 80023f4:	780c      	ldrb	r4, [r1, #0]
 80023f6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800240a:	4313      	orrs	r3, r2
 800240c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002410:	7809      	ldrb	r1, [r1, #0]
 8002412:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	4313      	orrs	r3, r2
 8002424:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002428:	e725      	b.n	8002276 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800242a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800242e:	0452      	lsls	r2, r2, #17
 8002430:	d508      	bpl.n	8002444 <USB_ActivateEndpoint+0x278>
 8002432:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002436:	4013      	ands	r3, r2
 8002438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002444:	780a      	ldrb	r2, [r1, #0]
 8002446:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800244a:	065b      	lsls	r3, r3, #25
 800244c:	d50b      	bpl.n	8002466 <USB_ActivateEndpoint+0x29a>
 800244e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	0d1b      	lsrs	r3, r3, #20
 800245a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002462:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002466:	780a      	ldrb	r2, [r1, #0]
 8002468:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800246c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002470:	051b      	lsls	r3, r3, #20
 8002472:	0d1b      	lsrs	r3, r3, #20
 8002474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002480:	f248 0280 	movw	r2, #32896	; 0x8080
 8002484:	780c      	ldrb	r4, [r1, #0]
 8002486:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800248a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	4313      	orrs	r3, r2
 8002498:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800249c:	7809      	ldrb	r1, [r1, #0]
 800249e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80024a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	e7b8      	b.n	800241e <USB_ActivateEndpoint+0x252>
 80024ac:	ffff8000 	.word	0xffff8000

080024b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80024b0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80024b2:	7a8c      	ldrb	r4, [r1, #10]
 80024b4:	784a      	ldrb	r2, [r1, #1]
 80024b6:	780b      	ldrb	r3, [r1, #0]
 80024b8:	bbcc      	cbnz	r4, 800252e <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80024ba:	b302      	cbz	r2, 80024fe <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024c0:	0652      	lsls	r2, r2, #25
 80024c2:	d50b      	bpl.n	80024dc <USB_DeactivateEndpoint+0x2c>
 80024c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80024c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024cc:	0512      	lsls	r2, r2, #20
 80024ce:	0d12      	lsrs	r2, r2, #20
 80024d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80024d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80024dc:	780a      	ldrb	r2, [r1, #0]
 80024de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80024fa:	2000      	movs	r0, #0
 80024fc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002502:	0454      	lsls	r4, r2, #17
 8002504:	d50b      	bpl.n	800251e <USB_DeactivateEndpoint+0x6e>
 8002506:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800250a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800250e:	0512      	lsls	r2, r2, #20
 8002510:	0d12      	lsrs	r2, r2, #20
 8002512:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800251a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800251e:	780a      	ldrb	r2, [r1, #0]
 8002520:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252c:	e7dd      	b.n	80024ea <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 800252e:	2a00      	cmp	r2, #0
 8002530:	d148      	bne.n	80025c4 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002532:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002536:	0452      	lsls	r2, r2, #17
 8002538:	d50b      	bpl.n	8002552 <USB_DeactivateEndpoint+0xa2>
 800253a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800253e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002542:	0512      	lsls	r2, r2, #20
 8002544:	0d12      	lsrs	r2, r2, #20
 8002546:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800254a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002552:	780a      	ldrb	r2, [r1, #0]
 8002554:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002558:	065c      	lsls	r4, r3, #25
 800255a:	d50b      	bpl.n	8002574 <USB_DeactivateEndpoint+0xc4>
 800255c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	0d1b      	lsrs	r3, r3, #20
 8002568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002570:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002574:	780a      	ldrb	r2, [r1, #0]
 8002576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800257a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257e:	051b      	lsls	r3, r3, #20
 8002580:	0d1b      	lsrs	r3, r3, #20
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800258a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800258e:	f248 0280 	movw	r2, #32896	; 0x8080
 8002592:	780c      	ldrb	r4, [r1, #0]
 8002594:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025aa:	7809      	ldrb	r1, [r1, #0]
 80025ac:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	4313      	orrs	r3, r2
 80025be:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80025c2:	e79a      	b.n	80024fa <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80025c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025c8:	0452      	lsls	r2, r2, #17
 80025ca:	d50b      	bpl.n	80025e4 <USB_DeactivateEndpoint+0x134>
 80025cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025d4:	0512      	lsls	r2, r2, #20
 80025d6:	0d12      	lsrs	r2, r2, #20
 80025d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025e4:	780a      	ldrb	r2, [r1, #0]
 80025e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025ea:	065b      	lsls	r3, r3, #25
 80025ec:	d50b      	bpl.n	8002606 <USB_DeactivateEndpoint+0x156>
 80025ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f6:	051b      	lsls	r3, r3, #20
 80025f8:	0d1b      	lsrs	r3, r3, #20
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002602:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002606:	780a      	ldrb	r2, [r1, #0]
 8002608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800260c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	0d1b      	lsrs	r3, r3, #20
 8002614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002620:	f248 0280 	movw	r2, #32896	; 0x8080
 8002624:	780c      	ldrb	r4, [r1, #0]
 8002626:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800262a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	4313      	orrs	r3, r2
 8002638:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800263c:	7809      	ldrb	r1, [r1, #0]
 800263e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264a:	e7b5      	b.n	80025b8 <USB_DeactivateEndpoint+0x108>

0800264c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800264c:	780a      	ldrb	r2, [r1, #0]
 800264e:	b98a      	cbnz	r2, 8002674 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002650:	8803      	ldrh	r3, [r0, #0]
 8002652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002662:	f083 0310 	eor.w	r3, r3, #16
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002670:	2000      	movs	r0, #0
 8002672:	4770      	bx	lr
    if (ep->is_in)
 8002674:	784b      	ldrb	r3, [r1, #1]
 8002676:	b183      	cbz	r3, 800269a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002678:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800267c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002698:	e7ea      	b.n	8002670 <USB_EPSetStall+0x24>
 800269a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800269e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026ae:	e7ed      	b.n	800268c <USB_EPSetStall+0x40>

080026b0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80026b0:	784b      	ldrb	r3, [r1, #1]
 80026b2:	780a      	ldrb	r2, [r1, #0]
 80026b4:	b313      	cbz	r3, 80026fc <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026ba:	065b      	lsls	r3, r3, #25
 80026bc:	d50b      	bpl.n	80026d6 <USB_EPClearStall+0x26>
 80026be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c6:	051b      	lsls	r3, r3, #20
 80026c8:	0d1b      	lsrs	r3, r3, #20
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80026d6:	780a      	ldrb	r2, [r1, #0]
 80026d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002700:	045b      	lsls	r3, r3, #17
 8002702:	d50b      	bpl.n	800271c <USB_EPClearStall+0x6c>
 8002704:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	0d1b      	lsrs	r3, r3, #20
 8002710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800271c:	780a      	ldrb	r2, [r1, #0]
 800271e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002732:	e7db      	b.n	80026ec <USB_EPClearStall+0x3c>

08002734 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002734:	b911      	cbnz	r1, 800273c <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 800273c:	2000      	movs	r0, #0
 800273e:	4770      	bx	lr

08002740 <USB_DevConnect>:
 8002740:	2000      	movs	r0, #0
 8002742:	4770      	bx	lr

08002744 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002744:	2000      	movs	r0, #0
 8002746:	4770      	bx	lr

08002748 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002748:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800274c:	b280      	uxth	r0, r0
 800274e:	4770      	bx	lr

08002750 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002750:	2000      	movs	r0, #0
 8002752:	4770      	bx	lr

08002754 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002754:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002756:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002758:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800275a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800275e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002760:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002764:	42a3      	cmp	r3, r4
 8002766:	d100      	bne.n	800276a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002768:	bd10      	pop	{r4, pc}
 800276a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800276e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002772:	3401      	adds	r4, #1
 8002774:	e7f6      	b.n	8002764 <USB_WritePMA+0x10>
	...

08002778 <USB_EPStartXfer>:
{
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 800277c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800277e:	7849      	ldrb	r1, [r1, #1]
{
 8002780:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002782:	2901      	cmp	r1, #1
 8002784:	6933      	ldr	r3, [r6, #16]
 8002786:	7ab0      	ldrb	r0, [r6, #10]
 8002788:	d166      	bne.n	8002858 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800278a:	429a      	cmp	r2, r3
 800278c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 800278e:	bf9b      	ittet	ls
 8002790:	2300      	movls	r3, #0
 8002792:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002794:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002796:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002798:	bf88      	it	hi
 800279a:	61b2      	strhi	r2, [r6, #24]
 800279c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 800279e:	bb10      	cbnz	r0, 80027e6 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80027a0:	88b2      	ldrh	r2, [r6, #4]
 80027a2:	6971      	ldr	r1, [r6, #20]
 80027a4:	4628      	mov	r0, r5
 80027a6:	f7ff ffd5 	bl	8002754 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80027aa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80027ae:	7832      	ldrb	r2, [r6, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3302      	adds	r3, #2
 80027b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80027b8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80027bc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80027c0:	7832      	ldrb	r2, [r6, #0]
 80027c2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027de:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80027e2:	2000      	movs	r0, #0
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80027e6:	7832      	ldrb	r2, [r6, #0]
 80027e8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027f2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80027f6:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80027f8:	d01a      	beq.n	8002830 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027fa:	3102      	adds	r1, #2
 80027fc:	440a      	add	r2, r1
 80027fe:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002802:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002806:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002808:	6971      	ldr	r1, [r6, #20]
 800280a:	4628      	mov	r0, r5
 800280c:	f7ff ffa2 	bl	8002754 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002810:	7873      	ldrb	r3, [r6, #1]
 8002812:	7832      	ldrb	r2, [r6, #0]
 8002814:	b99b      	cbnz	r3, 800283e <USB_EPStartXfer+0xc6>
 8002816:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800281a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281e:	051b      	lsls	r3, r3, #20
 8002820:	0d1b      	lsrs	r3, r3, #20
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800282a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800282e:	e7c7      	b.n	80027c0 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002830:	440a      	add	r2, r1
 8002832:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002836:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 800283a:	88f2      	ldrh	r2, [r6, #6]
 800283c:	e7e4      	b.n	8002808 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800283e:	2b01      	cmp	r3, #1
 8002840:	d1be      	bne.n	80027c0 <USB_EPStartXfer+0x48>
 8002842:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800284a:	051b      	lsls	r3, r3, #20
 800284c:	0d1b      	lsrs	r3, r3, #20
 800284e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	e7e8      	b.n	800282a <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002858:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 800285a:	bf93      	iteet	ls
 800285c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800285e:	1ad2      	subhi	r2, r2, r3
 8002860:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002862:	61b3      	strls	r3, [r6, #24]
 8002864:	bf98      	it	ls
 8002866:	4613      	movls	r3, r2
 8002868:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 800286a:	bb70      	cbnz	r0, 80028ca <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800286c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002870:	2b3e      	cmp	r3, #62	; 0x3e
 8002872:	b289      	uxth	r1, r1
 8002874:	f101 0106 	add.w	r1, r1, #6
 8002878:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800287c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002880:	d918      	bls.n	80028b4 <USB_EPStartXfer+0x13c>
 8002882:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002886:	06db      	lsls	r3, r3, #27
 8002888:	bf04      	itt	eq
 800288a:	f102 33ff 	addeq.w	r3, r2, #4294967295
 800288e:	b29a      	uxtheq	r2, r3
 8002890:	4b38      	ldr	r3, [pc, #224]	; (8002974 <USB_EPStartXfer+0x1fc>)
 8002892:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002896:	b29b      	uxth	r3, r3
 8002898:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800289c:	7832      	ldrb	r2, [r6, #0]
 800289e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80028a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80028b2:	e790      	b.n	80027d6 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80028b4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80028b8:	07dc      	lsls	r4, r3, #31
 80028ba:	bf44      	itt	mi
 80028bc:	3201      	addmi	r2, #1
 80028be:	b292      	uxthmi	r2, r2
 80028c0:	0292      	lsls	r2, r2, #10
 80028c2:	b292      	uxth	r2, r2
 80028c4:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80028c8:	e7e8      	b.n	800289c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80028ca:	b9b9      	cbnz	r1, 80028fc <USB_EPStartXfer+0x184>
 80028cc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80028d0:	2b3e      	cmp	r3, #62	; 0x3e
 80028d2:	b289      	uxth	r1, r1
 80028d4:	f101 0102 	add.w	r1, r1, #2
 80028d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80028dc:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 80028e0:	d928      	bls.n	8002934 <USB_EPStartXfer+0x1bc>
 80028e2:	f3c3 104f 	ubfx	r0, r3, #5, #16
 80028e6:	06da      	lsls	r2, r3, #27
 80028e8:	bf04      	itt	eq
 80028ea:	f100 32ff 	addeq.w	r2, r0, #4294967295
 80028ee:	b290      	uxtheq	r0, r2
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <USB_EPStartXfer+0x1fc>)
 80028f2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80028f6:	b292      	uxth	r2, r2
 80028f8:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80028fc:	7872      	ldrb	r2, [r6, #1]
 80028fe:	7831      	ldrb	r1, [r6, #0]
 8002900:	bb5a      	cbnz	r2, 800295a <USB_EPStartXfer+0x1e2>
 8002902:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002906:	2b3e      	cmp	r3, #62	; 0x3e
 8002908:	b292      	uxth	r2, r2
 800290a:	f102 0206 	add.w	r2, r2, #6
 800290e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002912:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002916:	d915      	bls.n	8002944 <USB_EPStartXfer+0x1cc>
 8002918:	f3c3 114f 	ubfx	r1, r3, #5, #16
 800291c:	06dc      	lsls	r4, r3, #27
 800291e:	bf04      	itt	eq
 8002920:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002924:	b299      	uxtheq	r1, r3
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <USB_EPStartXfer+0x1fc>)
 8002928:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800292c:	b29b      	uxth	r3, r3
 800292e:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002932:	e7b3      	b.n	800289c <USB_EPStartXfer+0x124>
 8002934:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002938:	07d8      	lsls	r0, r3, #31
 800293a:	bf44      	itt	mi
 800293c:	3201      	addmi	r2, #1
 800293e:	b292      	uxthmi	r2, r2
 8002940:	0292      	lsls	r2, r2, #10
 8002942:	e7d8      	b.n	80028f6 <USB_EPStartXfer+0x17e>
 8002944:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002948:	07db      	lsls	r3, r3, #31
 800294a:	bf44      	itt	mi
 800294c:	3101      	addmi	r1, #1
 800294e:	b289      	uxthmi	r1, r1
 8002950:	0289      	lsls	r1, r1, #10
 8002952:	b289      	uxth	r1, r1
 8002954:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002958:	e7a0      	b.n	800289c <USB_EPStartXfer+0x124>
 800295a:	2a01      	cmp	r2, #1
 800295c:	d19e      	bne.n	800289c <USB_EPStartXfer+0x124>
 800295e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002962:	b292      	uxth	r2, r2
 8002964:	3202      	adds	r2, #2
 8002966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800296a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800296e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002972:	e793      	b.n	800289c <USB_EPStartXfer+0x124>
 8002974:	ffff8000 	.word	0xffff8000

08002978 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002978:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800297a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800297c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800297e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002982:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002984:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002988:	42a3      	cmp	r3, r4
 800298a:	d100      	bne.n	800298e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800298c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800298e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002992:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002996:	3401      	adds	r4, #1
 8002998:	e7f6      	b.n	8002988 <USB_ReadPMA+0x10>

0800299a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800299a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800299e:	b11b      	cbz	r3, 80029a8 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80029a0:	2000      	movs	r0, #0
 80029a2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80029a6:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80029a8:	2002      	movs	r0, #2
  }
}
 80029aa:	4770      	bx	lr

080029ac <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80029ac:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80029b0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80029b2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80029b6:	b15b      	cbz	r3, 80029d0 <USBD_CDC_EP0_RxReady+0x24>
 80029b8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80029bc:	28ff      	cmp	r0, #255	; 0xff
 80029be:	d007      	beq.n	80029d0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80029c6:	4621      	mov	r1, r4
 80029c8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80029ca:	23ff      	movs	r3, #255	; 0xff
 80029cc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80029d0:	2000      	movs	r0, #0
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80029d4:	2343      	movs	r3, #67	; 0x43
 80029d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80029d8:	4800      	ldr	r0, [pc, #0]	; (80029dc <USBD_CDC_GetFSCfgDesc+0x8>)
 80029da:	4770      	bx	lr
 80029dc:	20000040 	.word	0x20000040

080029e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80029e0:	2343      	movs	r3, #67	; 0x43
 80029e2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80029e4:	4800      	ldr	r0, [pc, #0]	; (80029e8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80029e6:	4770      	bx	lr
 80029e8:	20000084 	.word	0x20000084

080029ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80029ec:	2343      	movs	r3, #67	; 0x43
 80029ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80029f0:	4800      	ldr	r0, [pc, #0]	; (80029f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80029f2:	4770      	bx	lr
 80029f4:	200000d4 	.word	0x200000d4

080029f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80029f8:	230a      	movs	r3, #10
 80029fa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80029fc:	4800      	ldr	r0, [pc, #0]	; (8002a00 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80029fe:	4770      	bx	lr
 8002a00:	200000c8 	.word	0x200000c8

08002a04 <USBD_CDC_DataOut>:
{      
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a08:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a0c:	f003 fa8e 	bl	8005f2c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002a10:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002a14:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002a18:	b14b      	cbz	r3, 8002a2e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002a1a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002a1e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002a28:	4798      	blx	r3
    return USBD_OK;
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002a2e:	2002      	movs	r0, #2
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a34 <USBD_CDC_Setup>:
{
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a36:	780f      	ldrb	r7, [r1, #0]
{
 8002a38:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a3a:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002a3e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a40:	d023      	beq.n	8002a8a <USBD_CDC_Setup+0x56>
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d119      	bne.n	8002a7a <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002a46:	88ca      	ldrh	r2, [r1, #6]
 8002a48:	784b      	ldrb	r3, [r1, #1]
 8002a4a:	b1c2      	cbz	r2, 8002a7e <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002a4c:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a4e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002a52:	d50b      	bpl.n	8002a6c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a54:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	688f      	ldr	r7, [r1, #8]
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002a60:	4629      	mov	r1, r5
 8002a62:	4630      	mov	r0, r6
 8002a64:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8002a66:	f000 fb72 	bl	800314e <USBD_CtlSendData>
      break;
 8002a6a:	e006      	b.n	8002a7a <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002a6c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002a70:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002a74:	4629      	mov	r1, r5
 8002a76:	f000 fb7f 	bl	8003178 <USBD_CtlPrepareRx>
}
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002a7e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002a82:	6884      	ldr	r4, [r0, #8]
 8002a84:	4618      	mov	r0, r3
 8002a86:	47a0      	blx	r4
 8002a88:	e7f7      	b.n	8002a7a <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002a8a:	784b      	ldrb	r3, [r1, #1]
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d1f4      	bne.n	8002a7a <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002a90:	2201      	movs	r2, #1
 8002a92:	4901      	ldr	r1, [pc, #4]	; (8002a98 <USBD_CDC_Setup+0x64>)
 8002a94:	e7e7      	b.n	8002a66 <USBD_CDC_Setup+0x32>
 8002a96:	bf00      	nop
 8002a98:	20000364 	.word	0x20000364

08002a9c <USBD_CDC_DeInit>:
{
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002aa0:	2181      	movs	r1, #129	; 0x81
 8002aa2:	f003 f9df 	bl	8005e64 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f003 f9db 	bl	8005e64 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002aae:	2182      	movs	r1, #130	; 0x82
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f003 f9d7 	bl	8005e64 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002ab6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002aba:	b153      	cbz	r3, 8002ad2 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002abc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ac4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002ac8:	f003 fa3a 	bl	8005f40 <USBD_static_free>
    pdev->pClassData = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	bd10      	pop	{r4, pc}

08002ad6 <USBD_CDC_Init>:
{
 8002ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ad8:	7c03      	ldrb	r3, [r0, #16]
{
 8002ada:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002adc:	bb7b      	cbnz	r3, 8002b3e <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	2181      	movs	r1, #129	; 0x81
 8002ae6:	f003 f9ad 	bl	8005e44 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002aea:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002aee:	2202      	movs	r2, #2
 8002af0:	2101      	movs	r1, #1
 8002af2:	4620      	mov	r0, r4
 8002af4:	f003 f9a6 	bl	8005e44 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002af8:	2308      	movs	r3, #8
 8002afa:	2203      	movs	r2, #3
 8002afc:	2182      	movs	r1, #130	; 0x82
 8002afe:	4620      	mov	r0, r4
 8002b00:	f003 f9a0 	bl	8005e44 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002b04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002b08:	f003 fa16 	bl	8005f38 <USBD_static_malloc>
 8002b0c:	4606      	mov	r6, r0
 8002b0e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002b12:	b320      	cbz	r0, 8002b5e <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002b14:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002b16:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b1e:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002b20:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002b24:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b28:	b987      	cbnz	r7, 8002b4c <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b32:	2101      	movs	r1, #1
 8002b34:	4620      	mov	r0, r4
 8002b36:	f003 f9eb 	bl	8005f10 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002b3e:	2340      	movs	r3, #64	; 0x40
 8002b40:	2202      	movs	r2, #2
 8002b42:	2181      	movs	r1, #129	; 0x81
 8002b44:	f003 f97e 	bl	8005e44 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002b48:	2340      	movs	r3, #64	; 0x40
 8002b4a:	e7d0      	b.n	8002aee <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002b4c:	2340      	movs	r3, #64	; 0x40
 8002b4e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002b52:	2101      	movs	r1, #1
 8002b54:	4620      	mov	r0, r4
 8002b56:	f003 f9db 	bl	8005f10 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002b5e:	2001      	movs	r0, #1
}
 8002b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b62 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002b62:	b119      	cbz	r1, 8002b6c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002b64:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002b68:	2000      	movs	r0, #0
 8002b6a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002b6c:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002b6e:	4770      	bx	lr

08002b70 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b70:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002b74:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002b76:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002b7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002b7e:	4770      	bx	lr

08002b80 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002b80:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002b84:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002b86:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002b8a:	4770      	bx	lr

08002b8c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b8c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002b90:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002b92:	b162      	cbz	r2, 8002bae <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b94:	7c04      	ldrb	r4, [r0, #16]
 8002b96:	b944      	cbnz	r4, 8002baa <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002b98:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002b9c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f003 f9b5 	bl	8005f10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	e7f6      	b.n	8002b9c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002bae:	2002      	movs	r0, #2
  }
}
 8002bb0:	bd10      	pop	{r4, pc}

08002bb2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002bb2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002bb4:	b180      	cbz	r0, 8002bd8 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002bb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bba:	b113      	cbz	r3, 8002bc2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002bc2:	b109      	cbz	r1, 8002bc8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002bc4:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002bc8:	2301      	movs	r3, #1
  pdev->id = id;
 8002bca:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002bcc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002bd0:	f003 f8e2 	bl	8005d98 <USBD_LL_Init>
  
  return USBD_OK; 
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002bd8:	2002      	movs	r0, #2
}
 8002bda:	bd08      	pop	{r3, pc}

08002bdc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002bdc:	b119      	cbz	r1, 8002be6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002bde:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002be2:	2000      	movs	r0, #0
 8002be4:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002be6:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002be8:	4770      	bx	lr

08002bea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002bea:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002bec:	f003 f91c 	bl	8005e28 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	bd08      	pop	{r3, pc}

08002bf4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002bf4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002bf6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bfa:	b90b      	cbnz	r3, 8002c00 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4798      	blx	r3
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d1f9      	bne.n	8002bfc <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002c08:	bd08      	pop	{r3, pc}

08002c0a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002c0a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002c0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4798      	blx	r3
  return USBD_OK;
}
 8002c14:	2000      	movs	r0, #0
 8002c16:	bd08      	pop	{r3, pc}

08002c18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c18:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c1a:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002c1e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 fa64 	bl	80030ee <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c26:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002c28:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c2c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002c30:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002c34:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002c38:	f001 031f 	and.w	r3, r1, #31
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d00e      	beq.n	8002c5e <USBD_LL_SetupStage+0x46>
 8002c40:	d307      	bcc.n	8002c52 <USBD_LL_SetupStage+0x3a>
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d010      	beq.n	8002c68 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002c46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f003 f918 	bl	8005e80 <USBD_LL_StallEP>
    break;
 8002c50:	e003      	b.n	8002c5a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002c52:	4629      	mov	r1, r5
 8002c54:	4620      	mov	r0, r4
 8002c56:	f000 f8d5 	bl	8002e04 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4620      	mov	r0, r4
 8002c62:	f000 f9c9 	bl	8002ff8 <USBD_StdItfReq>
    break;
 8002c66:	e7f8      	b.n	8002c5a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 f9dc 	bl	8003028 <USBD_StdEPReq>
    break;
 8002c70:	e7f3      	b.n	8002c5a <USBD_LL_SetupStage+0x42>

08002c72 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002c72:	b538      	push	{r3, r4, r5, lr}
 8002c74:	4604      	mov	r4, r0
 8002c76:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002c78:	bb11      	cbnz	r1, 8002cc0 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002c7a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d10f      	bne.n	8002ca2 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002c82:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002c86:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d90b      	bls.n	8002ca6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002c8e:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002c90:	429a      	cmp	r2, r3
 8002c92:	bf28      	it	cs
 8002c94:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002c96:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f000 fa7a 	bl	8003196 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ca6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	b123      	cbz	r3, 8002cb8 <USBD_LL_DataOutStage+0x46>
 8002cae:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002cb2:	2a03      	cmp	r2, #3
 8002cb4:	d100      	bne.n	8002cb8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002cb6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 fa74 	bl	80031a6 <USBD_CtlSendStatus>
 8002cbe:	e7f0      	b.n	8002ca2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002cc0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0eb      	beq.n	8002ca2 <USBD_LL_DataOutStage+0x30>
 8002cca:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002cce:	2a03      	cmp	r2, #3
 8002cd0:	d1e7      	bne.n	8002ca2 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002cd2:	4798      	blx	r3
 8002cd4:	e7e5      	b.n	8002ca2 <USBD_LL_DataOutStage+0x30>

08002cd6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002cd6:	b570      	push	{r4, r5, r6, lr}
 8002cd8:	4613      	mov	r3, r2
 8002cda:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002cdc:	460e      	mov	r6, r1
 8002cde:	2900      	cmp	r1, #0
 8002ce0:	d13d      	bne.n	8002d5e <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002ce2:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002ce6:	2a02      	cmp	r2, #2
 8002ce8:	d10f      	bne.n	8002d0a <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002cea:	69c5      	ldr	r5, [r0, #28]
 8002cec:	6a02      	ldr	r2, [r0, #32]
 8002cee:	4295      	cmp	r5, r2
 8002cf0:	d914      	bls.n	8002d1c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002cf2:	1aaa      	subs	r2, r5, r2
 8002cf4:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	f000 fa35 	bl	8003168 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002cfe:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002d00:	461a      	mov	r2, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	4620      	mov	r0, r4
 8002d06:	f003 f903 	bl	8005f10 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002d0a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002d18:	2000      	movs	r0, #0
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002d1c:	6983      	ldr	r3, [r0, #24]
 8002d1e:	fbb3 f5f2 	udiv	r5, r3, r2
 8002d22:	fb02 3515 	mls	r5, r2, r5, r3
 8002d26:	b965      	cbnz	r5, 8002d42 <USBD_LL_DataInStage+0x6c>
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d80a      	bhi.n	8002d42 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002d2c:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d206      	bcs.n	8002d42 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002d34:	462a      	mov	r2, r5
 8002d36:	f000 fa17 	bl	8003168 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002d3a:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002d3e:	462b      	mov	r3, r5
 8002d40:	e7de      	b.n	8002d00 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002d42:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	b12b      	cbz	r3, 8002d56 <USBD_LL_DataInStage+0x80>
 8002d4a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002d4e:	2a03      	cmp	r2, #3
 8002d50:	d101      	bne.n	8002d56 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002d52:	4620      	mov	r0, r4
 8002d54:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 fa30 	bl	80031bc <USBD_CtlReceiveStatus>
 8002d5c:	e7d5      	b.n	8002d0a <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002d5e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0d7      	beq.n	8002d18 <USBD_LL_DataInStage+0x42>
 8002d68:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d6c:	2a03      	cmp	r2, #3
 8002d6e:	d1d3      	bne.n	8002d18 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002d70:	4798      	blx	r3
 8002d72:	e7d1      	b.n	8002d18 <USBD_LL_DataInStage+0x42>

08002d74 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002d74:	2200      	movs	r2, #0
{
 8002d76:	b538      	push	{r3, r4, r5, lr}
 8002d78:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d7a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	f003 f860 	bl	8005e44 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002d84:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d86:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f003 f858 	bl	8005e44 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002d9a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d9e:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002da0:	b12b      	cbz	r3, 8002dae <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002da2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002da6:	7921      	ldrb	r1, [r4, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4620      	mov	r0, r4
 8002dac:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002dae:	2000      	movs	r0, #0
 8002db0:	bd38      	pop	{r3, r4, r5, pc}

08002db2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002db2:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002db4:	2000      	movs	r0, #0
 8002db6:	4770      	bx	lr

08002db8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002db8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002dbc:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	4770      	bx	lr

08002dca <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002dca:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002dce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	4770      	bx	lr

08002dd6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002dd6:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002dd8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ddc:	2a03      	cmp	r2, #3
 8002dde:	d104      	bne.n	8002dea <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002de0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	b103      	cbz	r3, 8002dea <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002de8:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002dea:	2000      	movs	r0, #0
 8002dec:	bd08      	pop	{r3, pc}

08002dee <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002dee:	b510      	push	{r4, lr}
 8002df0:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	f003 f844 	bl	8005e80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002df8:	4620      	mov	r0, r4
}
 8002dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f003 b83e 	b.w	8005e80 <USBD_LL_StallEP>

08002e04 <USBD_StdDevReq>:
{
 8002e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002e06:	784b      	ldrb	r3, [r1, #1]
{
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d879      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
 8002e10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e14:	00e500c9 	.word	0x00e500c9
 8002e18:	00d90078 	.word	0x00d90078
 8002e1c:	006d0078 	.word	0x006d0078
 8002e20:	0078000a 	.word	0x0078000a
 8002e24:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002e28:	884b      	ldrh	r3, [r1, #2]
 8002e2a:	0a1a      	lsrs	r2, r3, #8
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	2a06      	cmp	r2, #6
 8002e30:	d868      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
 8002e32:	e8df f002 	tbb	[pc, r2]
 8002e36:	1c04      	.short	0x1c04
 8002e38:	49676729 	.word	0x49676729
 8002e3c:	52          	.byte	0x52
 8002e3d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002e3e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002e42:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002e44:	f10d 0106 	add.w	r1, sp, #6
 8002e48:	7c20      	ldrb	r0, [r4, #16]
 8002e4a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002e4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d067      	beq.n	8002f24 <USBD_StdDevReq+0x120>
 8002e54:	88eb      	ldrh	r3, [r5, #6]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d064      	beq.n	8002f24 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	bf28      	it	cs
 8002e5e:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002e60:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002e62:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002e66:	4620      	mov	r0, r4
 8002e68:	f000 f971 	bl	800314e <USBD_CtlSendData>
 8002e6c:	e05a      	b.n	8002f24 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002e6e:	7c02      	ldrb	r2, [r0, #16]
 8002e70:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e74:	b932      	cbnz	r2, 8002e84 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002e78:	f10d 0006 	add.w	r0, sp, #6
 8002e7c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002e7e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002e80:	7043      	strb	r3, [r0, #1]
 8002e82:	e7e3      	b.n	8002e4c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	e7f7      	b.n	8002e78 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d83a      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
 8002e8e:	e8df f003 	tbb	[pc, r3]
 8002e92:	0703      	.short	0x0703
 8002e94:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002e98:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	e7d1      	b.n	8002e44 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002ea0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	e7cd      	b.n	8002e44 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002ea8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	e7c9      	b.n	8002e44 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002eb0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	e7c5      	b.n	8002e44 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002eb8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	e7c1      	b.n	8002e44 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ec0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	e7bd      	b.n	8002e44 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002ec8:	7c03      	ldrb	r3, [r0, #16]
 8002eca:	b9db      	cbnz	r3, 8002f04 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002ecc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ed0:	f10d 0006 	add.w	r0, sp, #6
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	4798      	blx	r3
 8002ed8:	e7b8      	b.n	8002e4c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002eda:	7c03      	ldrb	r3, [r0, #16]
 8002edc:	b993      	cbnz	r3, 8002f04 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002ede:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ee2:	f10d 0006 	add.w	r0, sp, #6
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002eea:	2307      	movs	r3, #7
 8002eec:	e7c8      	b.n	8002e80 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002eee:	888b      	ldrh	r3, [r1, #4]
 8002ef0:	b943      	cbnz	r3, 8002f04 <USBD_StdDevReq+0x100>
 8002ef2:	88cb      	ldrh	r3, [r1, #6]
 8002ef4:	b933      	cbnz	r3, 8002f04 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002ef6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002efa:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002efc:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002efe:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002f02:	d103      	bne.n	8002f0c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ff72 	bl	8002dee <USBD_CtlError.constprop.0>
    break;
 8002f0a:	e00b      	b.n	8002f24 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002f0c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002f10:	4629      	mov	r1, r5
 8002f12:	f002 ffe1 	bl	8005ed8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002f16:	4620      	mov	r0, r4
 8002f18:	f000 f945 	bl	80031a6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002f1c:	b12d      	cbz	r5, 8002f2a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002f1e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002f20:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b003      	add	sp, #12
 8002f28:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e7f8      	b.n	8002f20 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002f2e:	7889      	ldrb	r1, [r1, #2]
 8002f30:	4d30      	ldr	r5, [pc, #192]	; (8002ff4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002f32:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002f34:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002f36:	d8e5      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002f38:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d00c      	beq.n	8002f5a <USBD_StdDevReq+0x156>
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d1df      	bne.n	8002f04 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002f44:	b9b1      	cbnz	r1, 8002f74 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f46:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002f48:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002f4a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002f4e:	f7ff fe5c 	bl	8002c0a <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002f52:	4620      	mov	r0, r4
 8002f54:	f000 f927 	bl	80031a6 <USBD_CtlSendStatus>
 8002f58:	e7e4      	b.n	8002f24 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d0f9      	beq.n	8002f52 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002f5e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002f60:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002f62:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002f64:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f7ff fe43 	bl	8002bf4 <USBD_SetClassConfig>
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	d1ef      	bne.n	8002f52 <USBD_StdDevReq+0x14e>
 8002f72:	e7c7      	b.n	8002f04 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002f74:	6841      	ldr	r1, [r0, #4]
 8002f76:	2901      	cmp	r1, #1
 8002f78:	d0eb      	beq.n	8002f52 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002f7a:	b2c9      	uxtb	r1, r1
 8002f7c:	f7ff fe45 	bl	8002c0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002f80:	7829      	ldrb	r1, [r5, #0]
 8002f82:	6061      	str	r1, [r4, #4]
 8002f84:	e7f0      	b.n	8002f68 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002f86:	88ca      	ldrh	r2, [r1, #6]
 8002f88:	2a01      	cmp	r2, #1
 8002f8a:	d1bb      	bne.n	8002f04 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002f8c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d003      	beq.n	8002f9c <USBD_StdDevReq+0x198>
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d1b5      	bne.n	8002f04 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002f98:	1d01      	adds	r1, r0, #4
 8002f9a:	e764      	b.n	8002e66 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f841 3f08 	str.w	r3, [r1, #8]!
 8002fa4:	e75f      	b.n	8002e66 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002fa6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002faa:	3b02      	subs	r3, #2
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d8a9      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002fb4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002fb8:	b10b      	cbz	r3, 8002fbe <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002fba:	2303      	movs	r3, #3
 8002fbc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f104 010c 	add.w	r1, r4, #12
 8002fc4:	e74f      	b.n	8002e66 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002fc6:	884b      	ldrh	r3, [r1, #2]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d1ab      	bne.n	8002f24 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002fcc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002fd0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4798      	blx	r3
 8002fdc:	e7b9      	b.n	8002f52 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002fde:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002fe2:	3b02      	subs	r3, #2
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d88d      	bhi.n	8002f04 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002fe8:	884b      	ldrh	r3, [r1, #2]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d19a      	bne.n	8002f24 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e7ec      	b.n	8002fcc <USBD_StdDevReq+0x1c8>
 8002ff2:	bf00      	nop
 8002ff4:	20000365 	.word	0x20000365

08002ff8 <USBD_StdItfReq>:
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002ffa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002ffe:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003000:	2b03      	cmp	r3, #3
{
 8003002:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003004:	d10d      	bne.n	8003022 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003006:	790b      	ldrb	r3, [r1, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d80a      	bhi.n	8003022 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800300c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003014:	88eb      	ldrh	r3, [r5, #6]
 8003016:	b913      	cbnz	r3, 800301e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003018:	4620      	mov	r0, r4
 800301a:	f000 f8c4 	bl	80031a6 <USBD_CtlSendStatus>
}
 800301e:	2000      	movs	r0, #0
 8003020:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003022:	f7ff fee4 	bl	8002dee <USBD_CtlError.constprop.0>
    break;
 8003026:	e7fa      	b.n	800301e <USBD_StdItfReq+0x26>

08003028 <USBD_StdEPReq>:
{
 8003028:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800302a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800302c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800302e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003032:	2a20      	cmp	r2, #32
{
 8003034:	4604      	mov	r4, r0
 8003036:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003038:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800303a:	d105      	bne.n	8003048 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800303c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4798      	blx	r3
}
 8003044:	2000      	movs	r0, #0
 8003046:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003048:	784a      	ldrb	r2, [r1, #1]
 800304a:	2a01      	cmp	r2, #1
 800304c:	d01c      	beq.n	8003088 <USBD_StdEPReq+0x60>
 800304e:	d32a      	bcc.n	80030a6 <USBD_StdEPReq+0x7e>
 8003050:	2a03      	cmp	r2, #3
 8003052:	d1f7      	bne.n	8003044 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003054:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003058:	2a02      	cmp	r2, #2
 800305a:	d040      	beq.n	80030de <USBD_StdEPReq+0xb6>
 800305c:	2a03      	cmp	r2, #3
 800305e:	d002      	beq.n	8003066 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003060:	f7ff fec5 	bl	8002dee <USBD_CtlError.constprop.0>
      break;
 8003064:	e7ee      	b.n	8003044 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003066:	884a      	ldrh	r2, [r1, #2]
 8003068:	b922      	cbnz	r2, 8003074 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800306a:	065e      	lsls	r6, r3, #25
 800306c:	d002      	beq.n	8003074 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800306e:	4619      	mov	r1, r3
 8003070:	f002 ff06 	bl	8005e80 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003074:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003078:	4629      	mov	r1, r5
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4620      	mov	r0, r4
 800307e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003080:	4620      	mov	r0, r4
 8003082:	f000 f890 	bl	80031a6 <USBD_CtlSendStatus>
 8003086:	e7dd      	b.n	8003044 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003088:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800308c:	2a02      	cmp	r2, #2
 800308e:	d026      	beq.n	80030de <USBD_StdEPReq+0xb6>
 8003090:	2a03      	cmp	r2, #3
 8003092:	d1e5      	bne.n	8003060 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003094:	884a      	ldrh	r2, [r1, #2]
 8003096:	2a00      	cmp	r2, #0
 8003098:	d1d4      	bne.n	8003044 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800309a:	0659      	lsls	r1, r3, #25
 800309c:	d0f0      	beq.n	8003080 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800309e:	4619      	mov	r1, r3
 80030a0:	f002 fefc 	bl	8005e9c <USBD_LL_ClearStallEP>
 80030a4:	e7e6      	b.n	8003074 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80030a6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80030aa:	2a02      	cmp	r2, #2
 80030ac:	d017      	beq.n	80030de <USBD_StdEPReq+0xb6>
 80030ae:	2a03      	cmp	r2, #3
 80030b0:	d1d6      	bne.n	8003060 <USBD_StdEPReq+0x38>
 80030b2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80030b6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80030ba:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80030be:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80030c0:	bf14      	ite	ne
 80030c2:	3514      	addne	r5, #20
 80030c4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80030c8:	f002 fef6 	bl	8005eb8 <USBD_LL_IsStallEP>
 80030cc:	b168      	cbz	r0, 80030ea <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80030ce:	2301      	movs	r3, #1
 80030d0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80030d2:	2202      	movs	r2, #2
 80030d4:	4629      	mov	r1, r5
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 f839 	bl	800314e <USBD_CtlSendData>
      break;
 80030dc:	e7b2      	b.n	8003044 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80030de:	065a      	lsls	r2, r3, #25
 80030e0:	d0b0      	beq.n	8003044 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80030e2:	4619      	mov	r1, r3
 80030e4:	f002 fecc 	bl	8005e80 <USBD_LL_StallEP>
 80030e8:	e7ac      	b.n	8003044 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80030ea:	6028      	str	r0, [r5, #0]
 80030ec:	e7f1      	b.n	80030d2 <USBD_StdEPReq+0xaa>

080030ee <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80030ee:	780b      	ldrb	r3, [r1, #0]
 80030f0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80030f2:	784b      	ldrb	r3, [r1, #1]
 80030f4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80030f6:	78ca      	ldrb	r2, [r1, #3]
 80030f8:	788b      	ldrb	r3, [r1, #2]
 80030fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80030fe:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003100:	794a      	ldrb	r2, [r1, #5]
 8003102:	790b      	ldrb	r3, [r1, #4]
 8003104:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003108:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800310a:	79ca      	ldrb	r2, [r1, #7]
 800310c:	798b      	ldrb	r3, [r1, #6]
 800310e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003112:	80c3      	strh	r3, [r0, #6]
 8003114:	4770      	bx	lr

08003116 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003116:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003118:	b188      	cbz	r0, 800313e <USBD_GetString+0x28>
 800311a:	4605      	mov	r5, r0
 800311c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800311e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2c00      	cmp	r4, #0
 8003126:	d1f9      	bne.n	800311c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	3302      	adds	r3, #2
 800312c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800312e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003130:	2303      	movs	r3, #3
 8003132:	704b      	strb	r3, [r1, #1]
 8003134:	2302      	movs	r3, #2
 8003136:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8003138:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800313c:	b905      	cbnz	r5, 8003140 <USBD_GetString+0x2a>
 800313e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	54cd      	strb	r5, [r1, r3]
 8003144:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8003146:	3302      	adds	r3, #2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	548c      	strb	r4, [r1, r2]
 800314c:	e7f4      	b.n	8003138 <USBD_GetString+0x22>

0800314e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800314e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003150:	2202      	movs	r2, #2
{
 8003152:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003154:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003158:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800315a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800315c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800315e:	2100      	movs	r1, #0
 8003160:	f002 fec8 	bl	8005ef4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003164:	2000      	movs	r0, #0
 8003166:	bd10      	pop	{r4, pc}

08003168 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003168:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800316a:	4613      	mov	r3, r2
 800316c:	460a      	mov	r2, r1
 800316e:	2100      	movs	r1, #0
 8003170:	f002 fec0 	bl	8005ef4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003174:	2000      	movs	r0, #0
 8003176:	bd08      	pop	{r3, pc}

08003178 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003178:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800317a:	2203      	movs	r2, #3
{
 800317c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800317e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003182:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003186:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003188:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800318c:	2100      	movs	r1, #0
 800318e:	f002 febf 	bl	8005f10 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003192:	2000      	movs	r0, #0
 8003194:	bd10      	pop	{r4, pc}

08003196 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003196:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003198:	4613      	mov	r3, r2
 800319a:	460a      	mov	r2, r1
 800319c:	2100      	movs	r1, #0
 800319e:	f002 feb7 	bl	8005f10 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80031a2:	2000      	movs	r0, #0
 80031a4:	bd08      	pop	{r3, pc}

080031a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80031a6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80031a8:	2304      	movs	r3, #4
 80031aa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80031ae:	2300      	movs	r3, #0
 80031b0:	461a      	mov	r2, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	f002 fe9e 	bl	8005ef4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80031b8:	2000      	movs	r0, #0
 80031ba:	bd08      	pop	{r3, pc}

080031bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80031bc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80031be:	2305      	movs	r3, #5
 80031c0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80031c4:	2300      	movs	r3, #0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	f002 fea1 	bl	8005f10 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80031ce:	2000      	movs	r0, #0
 80031d0:	bd08      	pop	{r3, pc}
	...

080031d4 <dhcp_n6sec_tick>:
// Lease time renewal and time keeping.
// you must call this function every 6 seconds. It is save
// to do this from interrupt
void dhcp_n6sec_tick(void)
{
        dhcp_6sec_cnt++;
 80031d4:	4a02      	ldr	r2, [pc, #8]	; (80031e0 <dhcp_n6sec_tick+0xc>)
 80031d6:	7813      	ldrb	r3, [r2, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	7013      	strb	r3, [r2, #0]
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000366 	.word	0x20000366

080031e4 <make_dhcp_message_template>:

// This function writes a basic message template into buf
// It processes all fields excluding the options section.
// Most fields are initialized with zero.
void make_dhcp_message_template(uint8_t *buf,const uint8_t transactionID)
{
 80031e4:	b530      	push	{r4, r5, lr}
 80031e6:	4604      	mov	r4, r0
        uint8_t i=0;
        uint8_t allxff[6]={0xff,0xff,0xff,0xff,0xff,0xff}; // all of it can be used as mac, the first 4 can be used as IP
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <make_dhcp_message_template+0x9c>)
{
 80031ea:	b085      	sub	sp, #20
        uint8_t allxff[6]={0xff,0xff,0xff,0xff,0xff,0xff}; // all of it can be used as mac, the first 4 can be used as IP
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	889b      	ldrh	r3, [r3, #4]
 80031f0:	aa02      	add	r2, sp, #8
{
 80031f2:	460d      	mov	r5, r1
        uint8_t allxff[6]={0xff,0xff,0xff,0xff,0xff,0xff}; // all of it can be used as mac, the first 4 can be used as IP
 80031f4:	8093      	strh	r3, [r2, #4]
 80031f6:	9002      	str	r0, [sp, #8]

        send_udp_prepare(buf,DHCP_SRV_DST_PORT,allxff,DHCP_SRV_SRC_PORT,allxff);
 80031f8:	9200      	str	r2, [sp, #0]
 80031fa:	2343      	movs	r3, #67	; 0x43
 80031fc:	2144      	movs	r1, #68	; 0x44
 80031fe:	4620      	mov	r0, r4
 8003200:	f001 f9ac 	bl	800455c <send_udp_prepare>
        while(i<4){
                buf[IP_SRC_P +i]=0;
                i++;
        }
        // now fill the bootstrap protocol layer starting at UDP_DATA_P
        buf[UDP_DATA_P]=1;// message type = boot request
 8003204:	2201      	movs	r2, #1
                buf[IP_SRC_P +i]=0;
 8003206:	2300      	movs	r3, #0
        buf[UDP_DATA_P]=1;// message type = boot request
 8003208:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
        buf[UDP_DATA_P+1]=1;// hw type
 800320c:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
        buf[UDP_DATA_P+2]=6;// mac len
 8003210:	2106      	movs	r1, #6
        buf[UDP_DATA_P+3]=0;// hops
        // we use only one byte TIDs, we fill the first byte with 1 and
        // the rest with transactionID. The first byte is used to
        // distinguish inital requests from renew requests.
        buf[UDP_DATA_P+4]=1;
 8003212:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        i=0;
        while(i<3){
                buf[UDP_DATA_P+i+5]=transactionID;
 8003216:	4622      	mov	r2, r4
        buf[UDP_DATA_P+2]=6;// mac len
 8003218:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
                buf[IP_SRC_P +i]=0;
 800321c:	76a3      	strb	r3, [r4, #26]
 800321e:	76e3      	strb	r3, [r4, #27]
 8003220:	7723      	strb	r3, [r4, #28]
 8003222:	7763      	strb	r3, [r4, #29]
        buf[UDP_DATA_P+3]=0;// hops
 8003224:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                buf[UDP_DATA_P+i+5]=transactionID;
 8003228:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
 800322c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 8003230:	f104 0145 	add.w	r1, r4, #69	; 0x45
 8003234:	f802 5f31 	strb.w	r5, [r2, #49]!
        //
        // set my own MAC the rest is empty:
        // a while loop produces smaller code than memset
        i=8; // start at 8
        while(i<28){
                buf[UDP_DATA_P +i]=0;
 8003238:	f802 3f01 	strb.w	r3, [r2, #1]!
        while(i<28){
 800323c:	428a      	cmp	r2, r1
 800323e:	d1fb      	bne.n	8003238 <make_dhcp_message_template+0x54>
 8003240:	1d63      	adds	r3, r4, #5
 8003242:	f104 020b 	add.w	r2, r4, #11
                i++;
        }
        // own mac (send_udp_prepare did fill it at eth level):
        i=0;
        while(i<6){
                buf[UDP_DATA_P+i+28]=buf[ETH_SRC_MAC +i];
 8003246:	f813 1f01 	ldrb.w	r1, [r3, #1]!
        while(i<6){
 800324a:	429a      	cmp	r2, r3
                buf[UDP_DATA_P+i+28]=buf[ETH_SRC_MAC +i];
 800324c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
        while(i<6){
 8003250:	d1f9      	bne.n	8003246 <make_dhcp_message_template+0x62>
        }
        // now we need to write 202 bytes of zero
        // a while loop produces smaller code than memset, don't use memset
        i=34; // start at 8
        while(i<236){
                buf[UDP_DATA_P +i]=0;
 8003252:	2100      	movs	r1, #0
 8003254:	f104 034b 	add.w	r3, r4, #75	; 0x4b
 8003258:	f204 1215 	addw	r2, r4, #277	; 0x115
 800325c:	f803 1f01 	strb.w	r1, [r3, #1]!
        while(i<236){
 8003260:	429a      	cmp	r2, r3
 8003262:	d1fb      	bne.n	800325c <make_dhcp_message_template+0x78>
                i++;
        }
        // the magic cookie has to be:
        // 99, 130, 83, 99
        buf[UDP_DATA_P+MAGIC_COOKIE_P]=0x63;
        buf[UDP_DATA_P+MAGIC_COOKIE_P+1]=0x82;
 8003264:	2282      	movs	r2, #130	; 0x82
        buf[UDP_DATA_P+MAGIC_COOKIE_P]=0x63;
 8003266:	2363      	movs	r3, #99	; 0x63
        buf[UDP_DATA_P+MAGIC_COOKIE_P+1]=0x82;
 8003268:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
        buf[UDP_DATA_P+MAGIC_COOKIE_P+2]=0x53;
 800326c:	2253      	movs	r2, #83	; 0x53
        buf[UDP_DATA_P+MAGIC_COOKIE_P]=0x63;
 800326e:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
        buf[UDP_DATA_P+MAGIC_COOKIE_P+2]=0x53;
 8003272:	f884 2118 	strb.w	r2, [r4, #280]	; 0x118
        buf[UDP_DATA_P+MAGIC_COOKIE_P+3]=0x63;
 8003276:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
}
 800327a:	b005      	add	sp, #20
 800327c:	bd30      	pop	{r4, r5, pc}
 800327e:	bf00      	nop
 8003280:	08006cf4 	.word	0x08006cf4

08003284 <send_dhcp_discover>:

// the answer to this message will come as a broadcast
uint8_t send_dhcp_discover(uint8_t *buf,const uint8_t transactionID)
{
 8003284:	b538      	push	{r3, r4, r5, lr}
 8003286:	4604      	mov	r4, r0
        make_dhcp_message_template(buf,transactionID);
 8003288:	f7ff ffac 	bl	80031e4 <make_dhcp_message_template>
        // option dhcp message type:
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET]=0x35; // 53
 800328c:	2335      	movs	r3, #53	; 0x35
 800328e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+1]=1; //len
 8003292:	2301      	movs	r3, #1
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+2]=DHCP_DISCOVER_V;
        // option paramter request list:
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+3]=0x37; // 55
 8003294:	2237      	movs	r2, #55	; 0x37
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+1]=1; //len
 8003296:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+2]=DHCP_DISCOVER_V;
 800329a:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
        // we want: subnet mask, router
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+4]=2; // len
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+5]=1; // subnet mask
 800329e:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+6]=3; // router=default GW
 80032a2:	2303      	movs	r3, #3
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+3]=0x37; // 55
 80032a4:	f884 211d 	strb.w	r2, [r4, #285]	; 0x11d
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+6]=3; // router=default GW
 80032a8:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+4]=2; // len
 80032ac:	2202      	movs	r2, #2
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+7]=0xff; // end of options
 80032ae:	23ff      	movs	r3, #255	; 0xff
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+8]=0; 
 80032b0:	2500      	movs	r5, #0
        // no padding
        // the length of the udp message part is now DHCP_OPTION_OFFSET+8
        send_udp_transmit(buf,DHCP_OPTION_OFFSET+8);
 80032b2:	4620      	mov	r0, r4
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+4]=2; // len
 80032b4:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+7]=0xff; // end of options
 80032b8:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+8]=0; 
 80032bc:	f884 5122 	strb.w	r5, [r4, #290]	; 0x122
        send_udp_transmit(buf,DHCP_OPTION_OFFSET+8);
 80032c0:	21f8      	movs	r1, #248	; 0xf8
 80032c2:	f001 f997 	bl	80045f4 <send_udp_transmit>
        return(0);
}
 80032c6:	4628      	mov	r0, r5
 80032c8:	bd38      	pop	{r3, r4, r5, pc}

080032ca <dhcp_get_message_type>:
uint8_t dhcp_get_message_type(uint8_t *buf,uint16_t plen)
{
        uint16_t option_idx;
        uint8_t option_len;
        // the smallest option is 3 bytes
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 80032ca:	f5b1 7f8e 	cmp.w	r1, #284	; 0x11c
{
 80032ce:	b530      	push	{r4, r5, lr}
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 80032d0:	d904      	bls.n	80032dc <dhcp_get_message_type+0x12>
 80032d2:	f44f 728d 	mov.w	r2, #282	; 0x11a
        // options are coded in the form: option_type,option_len,option_val
        option_idx=UDP_DATA_P+DHCP_OPTION_OFFSET;
        while(option_idx+2 <plen ){
 80032d6:	1c93      	adds	r3, r2, #2
 80032d8:	4299      	cmp	r1, r3
 80032da:	dc01      	bgt.n	80032e0 <dhcp_get_message_type+0x16>
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 80032dc:	2300      	movs	r3, #0
 80032de:	e009      	b.n	80032f4 <dhcp_get_message_type+0x2a>
                option_len=buf[option_idx+1];
 80032e0:	1884      	adds	r4, r0, r2
 80032e2:	7863      	ldrb	r3, [r4, #1]
                if ((option_len<1) || ((option_idx + option_len + 1)> plen)) break;
 80032e4:	b133      	cbz	r3, 80032f4 <dhcp_get_message_type+0x2a>
 80032e6:	189d      	adds	r5, r3, r2
 80032e8:	428d      	cmp	r5, r1
 80032ea:	daf7      	bge.n	80032dc <dhcp_get_message_type+0x12>
                if (buf[option_idx]==53){
 80032ec:	5c85      	ldrb	r5, [r0, r2]
 80032ee:	2d35      	cmp	r5, #53	; 0x35
 80032f0:	d102      	bne.n	80032f8 <dhcp_get_message_type+0x2e>
                        // found message type, return it:
                        return(buf[option_idx+2]);
 80032f2:	78a3      	ldrb	r3, [r4, #2]
                }
                option_idx+=2+option_len;
        }
        return(0);
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd30      	pop	{r4, r5, pc}
                option_idx+=2+option_len;
 80032f8:	3302      	adds	r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	e7ea      	b.n	80032d6 <dhcp_get_message_type+0xc>

08003300 <dhcp_get_yiaddr>:

// use this on DHCPACK or DHCPOFFER messages to read "your ip address"
uint8_t dhcp_get_yiaddr(uint8_t *buf,uint16_t plen)
{
        // DHCP offer up to options section is at least 0x100 bytes
        if (plen<0x100) return(0);
 8003300:	29ff      	cmp	r1, #255	; 0xff
 8003302:	d909      	bls.n	8003318 <dhcp_get_yiaddr+0x18>
        if (buf[UDP_DATA_P+16]!=0){
 8003304:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003308:	b123      	cbz	r3, 8003314 <dhcp_get_yiaddr+0x14>
                // we have a yiaddr
                memcpy(dhcp_yiaddr, buf+UDP_DATA_P+16, 4);
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <dhcp_get_yiaddr+0x1c>)
 800330c:	f8d0 203a 	ldr.w	r2, [r0, #58]	; 0x3a
 8003310:	601a      	str	r2, [r3, #0]
                return(1);
 8003312:	2301      	movs	r3, #1
        }
        return(0);
}
 8003314:	4618      	mov	r0, r3
 8003316:	4770      	bx	lr
        if (plen<0x100) return(0);
 8003318:	2300      	movs	r3, #0
 800331a:	e7fb      	b.n	8003314 <dhcp_get_yiaddr+0x14>
 800331c:	20000377 	.word	0x20000377

08003320 <is_dhcp_msg_for_me>:

// this will as well update dhcp_yiaddr
uint8_t is_dhcp_msg_for_me(uint8_t *buf,uint16_t plen,const uint8_t transactionID)
{
        // DHCP offer up to options section is at least 0x100 bytes
        if (plen<0x100) return(0);
 8003320:	29ff      	cmp	r1, #255	; 0xff
 8003322:	d911      	bls.n	8003348 <is_dhcp_msg_for_me+0x28>
        if (buf[UDP_SRC_PORT_L_P] != DHCP_SRV_SRC_PORT) return(0);
 8003324:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8003328:	2b43      	cmp	r3, #67	; 0x43
 800332a:	d10d      	bne.n	8003348 <is_dhcp_msg_for_me+0x28>
        if (buf[UDP_DATA_P]!=2) return(0); // message type DHCP boot reply =2
 800332c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8003330:	2b02      	cmp	r3, #2
 8003332:	d109      	bne.n	8003348 <is_dhcp_msg_for_me+0x28>
        if (buf[UDP_DATA_P+5]!=transactionID) return(0);
 8003334:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8003338:	4293      	cmp	r3, r2
 800333a:	d105      	bne.n	8003348 <is_dhcp_msg_for_me+0x28>
        if (buf[UDP_DATA_P+6]!=transactionID) return(0);
 800333c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
        if (plen<0x100) return(0);
 8003340:	1ac3      	subs	r3, r0, r3
 8003342:	4258      	negs	r0, r3
 8003344:	4158      	adcs	r0, r3
 8003346:	4770      	bx	lr
 8003348:	2000      	movs	r0, #0
        return(1);

}
 800334a:	4770      	bx	lr

0800334c <dhcp_is_renew_tid>:

// check if this message was part of a renew or 
uint8_t dhcp_is_renew_tid(uint8_t *buf,uint16_t plen)
{
        if (plen<0x100) return(0);
 800334c:	29ff      	cmp	r1, #255	; 0xff
 800334e:	d905      	bls.n	800335c <dhcp_is_renew_tid+0x10>
        if (buf[UDP_DATA_P+4]==2) return(1); // we did set first byte in transaction ID to 2 to indicate renew request. This trick makes the processing of the DHCPACK message easier.
 8003350:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8003354:	1e83      	subs	r3, r0, #2
 8003356:	4258      	negs	r0, r3
 8003358:	4158      	adcs	r0, r3
 800335a:	4770      	bx	lr
 800335c:	2000      	movs	r0, #0
        return(0);
}
 800335e:	4770      	bx	lr

08003360 <dhcp_option_parser>:
        uint16_t option_idx;
        uint8_t option_len;
        uint8_t i;
        uint32_t ltime_int32=0;
        // the smallest option is 3 bytes
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 8003360:	f5b1 7f8e 	cmp.w	r1, #284	; 0x11c
{
 8003364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 8003368:	f240 808c 	bls.w	8003484 <dhcp_option_parser+0x124>
 800336c:	2500      	movs	r5, #0
 800336e:	f44f 748d 	mov.w	r4, #282	; 0x11a
 8003372:	462e      	mov	r6, r5
                                // lease time is infinity
                                dhcp_opt_leasetime_minutes=0xffff;
                                break; // end of switch
                        }
                        ltime_int32=ltime_int32>>6; // an inexpesive way to divide by 64 (which is roughly equal to divide by 60)
                        if (ltime_int32> 0xfffd){ //0xffff is not handeled here because of the above break
 8003374:	f64f 78fd 	movw	r8, #65533	; 0xfffd
 8003378:	4f43      	ldr	r7, [pc, #268]	; (8003488 <dhcp_option_parser+0x128>)
                        // rfc 2131: A DHCP server always returns its 
                        // own address in the 'server identifier' option
                case 54: if (option_len==4){
                                i=0;
                                while(i<4){
                                        dhcp_opt_server_id[i]=buf[option_idx+2+i];
 800337a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8003490 <dhcp_option_parser+0x130>
 800337e:	883a      	ldrh	r2, [r7, #0]
                                        dhcp_opt_mask[i]=buf[option_idx+2+i];
 8003380:	f8df a110 	ldr.w	sl, [pc, #272]	; 8003494 <dhcp_option_parser+0x134>
 8003384:	9701      	str	r7, [sp, #4]
        while(option_idx+2 <plen ){
 8003386:	1ca3      	adds	r3, r4, #2
 8003388:	4299      	cmp	r1, r3
 800338a:	dd04      	ble.n	8003396 <dhcp_option_parser+0x36>
                option_len=buf[option_idx+1];
 800338c:	1c63      	adds	r3, r4, #1
 800338e:	eb00 0e03 	add.w	lr, r0, r3
 8003392:	5cc3      	ldrb	r3, [r0, r3]
                if ((option_len<1) || ((option_idx + option_len + 1)> plen)) break;
 8003394:	b933      	cbnz	r3, 80033a4 <dhcp_option_parser+0x44>
 8003396:	b10d      	cbz	r5, 800339c <dhcp_option_parser+0x3c>
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	801a      	strh	r2, [r3, #0]
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 800339c:	2001      	movs	r0, #1
                        break;
                }
                option_idx+=2+option_len;
        }
        return(1);
}
 800339e:	b003      	add	sp, #12
 80033a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((option_len<1) || ((option_idx + option_len + 1)> plen)) break;
 80033a4:	eb03 0c04 	add.w	ip, r3, r4
 80033a8:	458c      	cmp	ip, r1
 80033aa:	daf4      	bge.n	8003396 <dhcp_option_parser+0x36>
                switch (buf[option_idx]){
 80033ac:	f810 b004 	ldrb.w	fp, [r0, r4]
 80033b0:	eb00 0c04 	add.w	ip, r0, r4
 80033b4:	f1bb 0f03 	cmp.w	fp, #3
 80033b8:	d032      	beq.n	8003420 <dhcp_option_parser+0xc0>
 80033ba:	d809      	bhi.n	80033d0 <dhcp_option_parser+0x70>
 80033bc:	f1bb 0f00 	cmp.w	fp, #0
 80033c0:	d01c      	beq.n	80033fc <dhcp_option_parser+0x9c>
 80033c2:	f1bb 0f01 	cmp.w	fp, #1
 80033c6:	d01b      	beq.n	8003400 <dhcp_option_parser+0xa0>
                option_idx+=2+option_len;
 80033c8:	3302      	adds	r3, #2
 80033ca:	441c      	add	r4, r3
 80033cc:	b2a4      	uxth	r4, r4
 80033ce:	e7da      	b.n	8003386 <dhcp_option_parser+0x26>
                switch (buf[option_idx]){
 80033d0:	f1bb 0f33 	cmp.w	fp, #51	; 0x33
 80033d4:	d035      	beq.n	8003442 <dhcp_option_parser+0xe2>
 80033d6:	f1bb 0f36 	cmp.w	fp, #54	; 0x36
 80033da:	d1f5      	bne.n	80033c8 <dhcp_option_parser+0x68>
                case 54: if (option_len==4){
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d1f3      	bne.n	80033c8 <dhcp_option_parser+0x68>
 80033e0:	f04f 0e00 	mov.w	lr, #0
                                        dhcp_opt_server_id[i]=buf[option_idx+2+i];
 80033e4:	eb0c 0b0e 	add.w	fp, ip, lr
 80033e8:	f89b b002 	ldrb.w	fp, [fp, #2]
 80033ec:	f80e b009 	strb.w	fp, [lr, r9]
 80033f0:	f10e 0e01 	add.w	lr, lr, #1
                                while(i<4){
 80033f4:	f1be 0f04 	cmp.w	lr, #4
 80033f8:	d1f4      	bne.n	80033e4 <dhcp_option_parser+0x84>
 80033fa:	e7e5      	b.n	80033c8 <dhcp_option_parser+0x68>
                switch (buf[option_idx]){
 80033fc:	460c      	mov	r4, r1
 80033fe:	e7e3      	b.n	80033c8 <dhcp_option_parser+0x68>
                case 1: if (option_len==4){
 8003400:	2b04      	cmp	r3, #4
 8003402:	d1e1      	bne.n	80033c8 <dhcp_option_parser+0x68>
 8003404:	f04f 0e00 	mov.w	lr, #0
                                        dhcp_opt_mask[i]=buf[option_idx+2+i];
 8003408:	eb0c 0b0e 	add.w	fp, ip, lr
 800340c:	f89b b002 	ldrb.w	fp, [fp, #2]
 8003410:	f80e b00a 	strb.w	fp, [lr, sl]
 8003414:	f10e 0e01 	add.w	lr, lr, #1
                                while(i<4){
 8003418:	f1be 0f04 	cmp.w	lr, #4
 800341c:	d1f4      	bne.n	8003408 <dhcp_option_parser+0xa8>
 800341e:	e7d3      	b.n	80033c8 <dhcp_option_parser+0x68>
                case 3: if (option_len==4){
 8003420:	2b04      	cmp	r3, #4
 8003422:	d1d1      	bne.n	80033c8 <dhcp_option_parser+0x68>
 8003424:	f04f 0e00 	mov.w	lr, #0
                                        dhcp_opt_defaultgw[i]=buf[option_idx+2+i];
 8003428:	eb0c 0b0e 	add.w	fp, ip, lr
 800342c:	f89b b002 	ldrb.w	fp, [fp, #2]
 8003430:	4f16      	ldr	r7, [pc, #88]	; (800348c <dhcp_option_parser+0x12c>)
 8003432:	f80e b007 	strb.w	fp, [lr, r7]
 8003436:	f10e 0e01 	add.w	lr, lr, #1
                                while(i<4){
 800343a:	f1be 0f04 	cmp.w	lr, #4
 800343e:	d1f3      	bne.n	8003428 <dhcp_option_parser+0xc8>
 8003440:	e7c2      	b.n	80033c8 <dhcp_option_parser+0x68>
                        if (option_len!=4){
 8003442:	2b04      	cmp	r3, #4
 8003444:	d112      	bne.n	800346c <dhcp_option_parser+0x10c>
 8003446:	1d62      	adds	r2, r4, #5
 8003448:	4402      	add	r2, r0
                                ltime_int32=(ltime_int32<<8) | buf[option_idx+i+2];
 800344a:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
                        while(i<4){
 800344e:	4572      	cmp	r2, lr
                                ltime_int32=(ltime_int32<<8) | buf[option_idx+i+2];
 8003450:	ea45 2606 	orr.w	r6, r5, r6, lsl #8
                        while(i<4){
 8003454:	d1f9      	bne.n	800344a <dhcp_option_parser+0xea>
                        if (ltime_int32==0xffffffff){
 8003456:	1c72      	adds	r2, r6, #1
 8003458:	d00c      	beq.n	8003474 <dhcp_option_parser+0x114>
                        ltime_int32=ltime_int32>>6; // an inexpesive way to divide by 64 (which is roughly equal to divide by 60)
 800345a:	09b6      	lsrs	r6, r6, #6
                        if (ltime_int32> 0xfffd){ //0xffff is not handeled here because of the above break
 800345c:	4546      	cmp	r6, r8
 800345e:	d80d      	bhi.n	800347c <dhcp_option_parser+0x11c>
 8003460:	b2b2      	uxth	r2, r6
 8003462:	2a05      	cmp	r2, #5
 8003464:	bf38      	it	cc
 8003466:	2205      	movcc	r2, #5
                                dhcp_opt_leasetime_minutes=ltime_int32 & 0xffff;
 8003468:	2501      	movs	r5, #1
 800346a:	e7ad      	b.n	80033c8 <dhcp_option_parser+0x68>
                        if (option_len!=4){
 800346c:	2501      	movs	r5, #1
                                dhcp_opt_leasetime_minutes=1440; // just to have a reasonable value: 1 day
 800346e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003472:	e7a9      	b.n	80033c8 <dhcp_option_parser+0x68>
                        if (ltime_int32==0xffffffff){
 8003474:	2501      	movs	r5, #1
                                dhcp_opt_leasetime_minutes=0xffff;
 8003476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347a:	e7a5      	b.n	80033c8 <dhcp_option_parser+0x68>
                        if (ltime_int32> 0xfffd){ //0xffff is not handeled here because of the above break
 800347c:	2501      	movs	r5, #1
                                dhcp_opt_leasetime_minutes=0xfffd;
 800347e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003482:	e7a1      	b.n	80033c8 <dhcp_option_parser+0x68>
        if (plen<(UDP_DATA_P+DHCP_OPTION_OFFSET+3)) return(0);
 8003484:	2000      	movs	r0, #0
 8003486:	e78a      	b.n	800339e <dhcp_option_parser+0x3e>
 8003488:	2000036c 	.word	0x2000036c
 800348c:	20000367 	.word	0x20000367
 8003490:	20000372 	.word	0x20000372
 8003494:	2000036e 	.word	0x2000036e

08003498 <send_dhcp_request>:

// the answer to this message will come as a broadcast
uint8_t send_dhcp_request(uint8_t *buf,const uint8_t transactionID)
{
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4605      	mov	r5, r0
        uint8_t i=0;
        make_dhcp_message_template(buf,transactionID);
 800349c:	f7ff fea2 	bl	80031e4 <make_dhcp_message_template>
        // option dhcp message type:
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET]=0x35; // 53
 80034a0:	2335      	movs	r3, #53	; 0x35
 80034a2:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+1]=1; //len
 80034a6:	2301      	movs	r3, #1
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+2]=DHCP_REQUEST_V;
 80034a8:	2103      	movs	r1, #3
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+1]=1; //len
 80034aa:	f885 311b 	strb.w	r3, [r5, #283]	; 0x11b
        i=3;
        if (dhcp_opt_server_id[0]!=0){
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <send_dhcp_request+0x84>)
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+2]=DHCP_REQUEST_V;
 80034b0:	f885 111c 	strb.w	r1, [r5, #284]	; 0x11c
        if (dhcp_opt_server_id[0]!=0){
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	b14a      	cbz	r2, 80034cc <send_dhcp_request+0x34>
                buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i]=0x36; // 54=server identifier
 80034b8:	2236      	movs	r2, #54	; 0x36
 80034ba:	f885 211d 	strb.w	r2, [r5, #285]	; 0x11d
                buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+1]=4; // len
 80034be:	2204      	movs	r2, #4
                memcpy(buf+UDP_DATA_P+DHCP_OPTION_OFFSET+i+2,dhcp_opt_server_id, 4);
                i=i+6;
 80034c0:	2109      	movs	r1, #9
                memcpy(buf+UDP_DATA_P+DHCP_OPTION_OFFSET+i+2,dhcp_opt_server_id, 4);
 80034c2:	681b      	ldr	r3, [r3, #0]
                buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+1]=4; // len
 80034c4:	f885 211e 	strb.w	r2, [r5, #286]	; 0x11e
                memcpy(buf+UDP_DATA_P+DHCP_OPTION_OFFSET+i+2,dhcp_opt_server_id, 4);
 80034c8:	f8c5 311f 	str.w	r3, [r5, #287]	; 0x11f
        }
        if (dhcp_yiaddr[0]!=0){
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <send_dhcp_request+0x88>)
 80034ce:	7813      	ldrb	r3, [r2, #0]
 80034d0:	b15b      	cbz	r3, 80034ea <send_dhcp_request+0x52>
                buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i]=0x32; // 50=requested IP address
 80034d2:	2032      	movs	r0, #50	; 0x32
 80034d4:	186b      	adds	r3, r5, r1
 80034d6:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
                buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+1]=4; // len
 80034da:	2004      	movs	r0, #4
 80034dc:	f883 011b 	strb.w	r0, [r3, #283]	; 0x11b
                memcpy(buf+UDP_DATA_P+DHCP_OPTION_OFFSET+i+2,dhcp_yiaddr, 4);
 80034e0:	6812      	ldr	r2, [r2, #0]
                i=i+6;
 80034e2:	3106      	adds	r1, #6
                memcpy(buf+UDP_DATA_P+DHCP_OPTION_OFFSET+i+2,dhcp_yiaddr, 4);
 80034e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                i=i+6;
 80034e8:	b2c9      	uxtb	r1, r1
        }
        // option paramter request list:
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i]=0x37; // 55
 80034ea:	2237      	movs	r2, #55	; 0x37
 80034ec:	186b      	adds	r3, r5, r1
 80034ee:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        // we want: subnet mask, router
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+1]=2; // len
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+2]=1; // subnet mask
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+3]=3; // router=default GW
 80034fe:	2203      	movs	r2, #3
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+4]=0xff; // end of options
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+5]=0; 
 8003500:	2400      	movs	r4, #0
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+3]=3; // router=default GW
 8003502:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+4]=0xff; // end of options
 8003506:	22ff      	movs	r2, #255	; 0xff
        // the length of the udp message part is now DHCP_OPTION_OFFSET+i+5
        send_udp_transmit(buf,DHCP_OPTION_OFFSET+i+5);
 8003508:	4628      	mov	r0, r5
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+4]=0xff; // end of options
 800350a:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
        buf[UDP_DATA_P+DHCP_OPTION_OFFSET+i+5]=0; 
 800350e:	f883 411f 	strb.w	r4, [r3, #287]	; 0x11f
        send_udp_transmit(buf,DHCP_OPTION_OFFSET+i+5);
 8003512:	31f5      	adds	r1, #245	; 0xf5
 8003514:	f001 f86e 	bl	80045f4 <send_udp_transmit>
        return(0);
}
 8003518:	4620      	mov	r0, r4
 800351a:	bd38      	pop	{r3, r4, r5, pc}
 800351c:	20000372 	.word	0x20000372
 8003520:	20000377 	.word	0x20000377

08003524 <packetloop_dhcp_initial_ip_assignment>:
// and all boards reboot afterwards at the same time. At that moment they
// must all have different TIDs otherwise there will be an IP address mess-up.
//
// The function returns 1 once we have a valid IP. 
// At this point you must not call the function again.
uint8_t packetloop_dhcp_initial_ip_assignment(uint8_t *buf,uint16_t plen,uint8_t initial_tid){
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	b09f      	sub	sp, #124	; 0x7c
 8003528:	4606      	mov	r6, r0
 800352a:	460d      	mov	r5, r1
 800352c:	4617      	mov	r7, r2
        uint8_t cmd;
        char str[50];
        UART_HandleTypeDef huart1;

        // do nothing if the link is down
        if (!enc28j60linkup())
 800352e:	f000 fc09 	bl	8003d44 <enc28j60linkup>
 8003532:	4604      	mov	r4, r0
 8003534:	b978      	cbnz	r0, 8003556 <packetloop_dhcp_initial_ip_assignment+0x32>
        {
        	snprintf(str,sizeof(str),"enc28j60 link is down :(\r\n");
 8003536:	4935      	ldr	r1, [pc, #212]	; (800360c <packetloop_dhcp_initial_ip_assignment+0xe8>)
 8003538:	a801      	add	r0, sp, #4
 800353a:	f002 fe99 	bl	8006270 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800353e:	a801      	add	r0, sp, #4
 8003540:	f7fc fe04 	bl	800014c <strlen>
 8003544:	2364      	movs	r3, #100	; 0x64
 8003546:	b282      	uxth	r2, r0
 8003548:	a901      	add	r1, sp, #4
 800354a:	a80e      	add	r0, sp, #56	; 0x38
 800354c:	f7fe fcc0 	bl	8001ed0 <HAL_UART_Transmit>
                        enc28j60DisableBroadcast();
                        return(1);
                }
        }
        return(0);
}
 8003550:	4620      	mov	r0, r4
 8003552:	b01f      	add	sp, #124	; 0x7c
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (plen==0){
 8003556:	bb55      	cbnz	r5, 80035ae <packetloop_dhcp_initial_ip_assignment+0x8a>
                if (init==2){
 8003558:	492d      	ldr	r1, [pc, #180]	; (8003610 <packetloop_dhcp_initial_ip_assignment+0xec>)
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	4608      	mov	r0, r1
 800355e:	2b02      	cmp	r3, #2
 8003560:	d10d      	bne.n	800357e <packetloop_dhcp_initial_ip_assignment+0x5a>
                        init=1;
 8003562:	2301      	movs	r3, #1
                        dhcp_tid=initial_tid;
 8003564:	4c2b      	ldr	r4, [pc, #172]	; (8003614 <packetloop_dhcp_initial_ip_assignment+0xf0>)
                        init=1;
 8003566:	600b      	str	r3, [r1, #0]
                        dhcp_6sec_cnt=0;
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <packetloop_dhcp_initial_ip_assignment+0xf4>)
                        dhcp_tid=initial_tid;
 800356a:	7027      	strb	r7, [r4, #0]
                        dhcp_6sec_cnt=0;
 800356c:	701d      	strb	r5, [r3, #0]
                        enc28j60EnableBroadcast();
 800356e:	f000 fbd5 	bl	8003d1c <enc28j60EnableBroadcast>
                        send_dhcp_discover(buf,dhcp_tid);
 8003572:	7821      	ldrb	r1, [r4, #0]
 8003574:	4630      	mov	r0, r6
 8003576:	f7ff fe85 	bl	8003284 <send_dhcp_discover>
                return(0);
 800357a:	2400      	movs	r4, #0
 800357c:	e7e8      	b.n	8003550 <packetloop_dhcp_initial_ip_assignment+0x2c>
                if (dhcp_yiaddr[0]==0 && dhcp_6sec_cnt > 5){
 800357e:	4a27      	ldr	r2, [pc, #156]	; (800361c <packetloop_dhcp_initial_ip_assignment+0xf8>)
 8003580:	7814      	ldrb	r4, [r2, #0]
 8003582:	b97c      	cbnz	r4, 80035a4 <packetloop_dhcp_initial_ip_assignment+0x80>
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <packetloop_dhcp_initial_ip_assignment+0xf4>)
 8003586:	7811      	ldrb	r1, [r2, #0]
 8003588:	2905      	cmp	r1, #5
 800358a:	d90b      	bls.n	80035a4 <packetloop_dhcp_initial_ip_assignment+0x80>
                        dhcp_tid++;
 800358c:	4d21      	ldr	r5, [pc, #132]	; (8003614 <packetloop_dhcp_initial_ip_assignment+0xf0>)
                        dhcp_6sec_cnt=0;
 800358e:	7014      	strb	r4, [r2, #0]
                        dhcp_tid++;
 8003590:	782b      	ldrb	r3, [r5, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	702b      	strb	r3, [r5, #0]
                        enc28j60EnableBroadcast();
 8003596:	f000 fbc1 	bl	8003d1c <enc28j60EnableBroadcast>
                        send_dhcp_discover(buf,dhcp_tid);
 800359a:	7829      	ldrb	r1, [r5, #0]
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff fe71 	bl	8003284 <send_dhcp_discover>
                        return(0);
 80035a2:	e7d5      	b.n	8003550 <packetloop_dhcp_initial_ip_assignment+0x2c>
                if (init>2){
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d9e8      	bls.n	800357a <packetloop_dhcp_initial_ip_assignment+0x56>
                        init--;
 80035a8:	3b01      	subs	r3, #1
 80035aa:	6003      	str	r3, [r0, #0]
 80035ac:	e7e5      	b.n	800357a <packetloop_dhcp_initial_ip_assignment+0x56>
        if (is_dhcp_msg_for_me(buf,plen,dhcp_tid)){
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <packetloop_dhcp_initial_ip_assignment+0xf0>)
 80035b0:	4629      	mov	r1, r5
 80035b2:	781f      	ldrb	r7, [r3, #0]
 80035b4:	4630      	mov	r0, r6
 80035b6:	463a      	mov	r2, r7
 80035b8:	f7ff feb2 	bl	8003320 <is_dhcp_msg_for_me>
 80035bc:	4604      	mov	r4, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0c6      	beq.n	8003550 <packetloop_dhcp_initial_ip_assignment+0x2c>
                if (dhcp_is_renew_tid(buf,plen)==1) return(0); // should have been initial tid, just return
 80035c2:	4629      	mov	r1, r5
 80035c4:	4630      	mov	r0, r6
 80035c6:	f7ff fec1 	bl	800334c <dhcp_is_renew_tid>
 80035ca:	2801      	cmp	r0, #1
 80035cc:	d0d5      	beq.n	800357a <packetloop_dhcp_initial_ip_assignment+0x56>
                cmd=dhcp_get_message_type(buf,plen);
 80035ce:	4629      	mov	r1, r5
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7ff fe7a 	bl	80032ca <dhcp_get_message_type>
                if (cmd==2){ // DHCPOFFER =2
 80035d6:	2802      	cmp	r0, #2
 80035d8:	d10f      	bne.n	80035fa <packetloop_dhcp_initial_ip_assignment+0xd6>
                        init=1; // no more init needed
 80035da:	2201      	movs	r2, #1
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <packetloop_dhcp_initial_ip_assignment+0xec>)
                        dhcp_get_yiaddr(buf,plen);
 80035de:	4629      	mov	r1, r5
 80035e0:	4630      	mov	r0, r6
                        init=1; // no more init needed
 80035e2:	601a      	str	r2, [r3, #0]
                        dhcp_get_yiaddr(buf,plen);
 80035e4:	f7ff fe8c 	bl	8003300 <dhcp_get_yiaddr>
                        dhcp_option_parser(buf,plen);
 80035e8:	4629      	mov	r1, r5
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff feb8 	bl	8003360 <dhcp_option_parser>
                        send_dhcp_request(buf,dhcp_tid);
 80035f0:	4639      	mov	r1, r7
 80035f2:	4630      	mov	r0, r6
 80035f4:	f7ff ff50 	bl	8003498 <send_dhcp_request>
 80035f8:	e7bf      	b.n	800357a <packetloop_dhcp_initial_ip_assignment+0x56>
                if (cmd==5){ // DHCPACK =5
 80035fa:	2805      	cmp	r0, #5
 80035fc:	d1bd      	bne.n	800357a <packetloop_dhcp_initial_ip_assignment+0x56>
                        init=1; // no more init needed
 80035fe:	2401      	movs	r4, #1
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <packetloop_dhcp_initial_ip_assignment+0xec>)
 8003602:	601c      	str	r4, [r3, #0]
                        enc28j60DisableBroadcast();
 8003604:	f000 fb94 	bl	8003d30 <enc28j60DisableBroadcast>
                        return(1);
 8003608:	e7a2      	b.n	8003550 <packetloop_dhcp_initial_ip_assignment+0x2c>
 800360a:	bf00      	nop
 800360c:	08006cfa 	.word	0x08006cfa
 8003610:	20000118 	.word	0x20000118
 8003614:	20000376 	.word	0x20000376
 8003618:	20000366 	.word	0x20000366
 800361c:	20000377 	.word	0x20000377

08003620 <dhcp_get_my_ip>:
// returns {0,0,0,0} in assigend_yiaddr if called before we have a valid IP been offered
// otherwise returns back the IP address (4bytes) in assigend_yiaddr.
// assigend_netmask will hold the netmask and assigend_gw the default gateway
// You can fill fields that you don't want (not interessted in) to NULL
void dhcp_get_my_ip(uint8_t *assigend_yiaddr,uint8_t *assigend_netmask, uint8_t *assigend_gw){
        if (assigend_yiaddr) memcpy(assigend_yiaddr,dhcp_yiaddr,4); 
 8003620:	b110      	cbz	r0, 8003628 <dhcp_get_my_ip+0x8>
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <dhcp_get_my_ip+0x1c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6003      	str	r3, [r0, #0]
        if (assigend_netmask) memcpy(assigend_netmask,dhcp_opt_mask,4); 
 8003628:	b111      	cbz	r1, 8003630 <dhcp_get_my_ip+0x10>
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <dhcp_get_my_ip+0x20>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	600b      	str	r3, [r1, #0]
        if (assigend_gw) memcpy(assigend_gw,dhcp_opt_defaultgw,4); 
 8003630:	b112      	cbz	r2, 8003638 <dhcp_get_my_ip+0x18>
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <dhcp_get_my_ip+0x24>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000377 	.word	0x20000377
 8003640:	2000036e 	.word	0x2000036e
 8003644:	20000367 	.word	0x20000367

08003648 <dnslkup_haveanswer>:


uint8_t dnslkup_haveanswer(void)
{       
        return(haveDNSanswer);
}
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <dnslkup_haveanswer+0x8>)
 800364a:	7818      	ldrb	r0, [r3, #0]
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000381 	.word	0x20000381

08003654 <dnslkup_get_ip>:
        return(dns_ansError);
}

// ip is the return value
void dnslkup_get_ip(uint8_t *ip)
{       
 8003654:	2300      	movs	r3, #0
        uint8_t i=0;
        while(i<4){ip[i]=dns_answerip[i];i++;}
 8003656:	4903      	ldr	r1, [pc, #12]	; (8003664 <dnslkup_get_ip+0x10>)
 8003658:	5c5a      	ldrb	r2, [r3, r1]
 800365a:	54c2      	strb	r2, [r0, r3]
 800365c:	3301      	adds	r3, #1
 800365e:	2b04      	cmp	r3, #4
 8003660:	d1fa      	bne.n	8003658 <dnslkup_get_ip+0x4>
}
 8003662:	4770      	bx	lr
 8003664:	2000037c 	.word	0x2000037c

08003668 <string_is_ipv4>:

// Determine if the string is a hostname or an IP address
// A valid IP is e.g. "10.0.11.22"
uint8_t string_is_ipv4(const char *str){
        uint8_t previous_char_was_digit=0;
        uint8_t dotcnt=0;
 8003668:	2300      	movs	r3, #0
uint8_t string_is_ipv4(const char *str){
 800366a:	b510      	push	{r4, lr}
 800366c:	1e41      	subs	r1, r0, #1
        while(*str){
                if (isdigit(*str)){
                        previous_char_was_digit=1;
                }else if (*str=='.' && previous_char_was_digit==1){
                        previous_char_was_digit=0;
 800366e:	2000      	movs	r0, #0
        while(*str){
 8003670:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003674:	b922      	cbnz	r2, 8003680 <string_is_ipv4+0x18>
                }else{
                        return(0); // any other char: not an IP
                }
                str++;
        }
        if (previous_char_was_digit==1 && dotcnt==3){
 8003676:	b180      	cbz	r0, 800369a <string_is_ipv4+0x32>
                return(1); // ok looks like a numeric IP
        }
        return(0); // not an IP: did not end in a digit
 8003678:	3b03      	subs	r3, #3
 800367a:	4258      	negs	r0, r3
 800367c:	4158      	adcs	r0, r3
 800367e:	bd10      	pop	{r4, pc}
                if (isdigit(*str)){
 8003680:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003684:	2c09      	cmp	r4, #9
 8003686:	d905      	bls.n	8003694 <string_is_ipv4+0x2c>
                }else if (*str=='.' && previous_char_was_digit==1){
 8003688:	2a2e      	cmp	r2, #46	; 0x2e
 800368a:	d105      	bne.n	8003698 <string_is_ipv4+0x30>
 800368c:	b128      	cbz	r0, 800369a <string_is_ipv4+0x32>
                        dotcnt++;
 800368e:	3301      	adds	r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e7ec      	b.n	800366e <string_is_ipv4+0x6>
                        previous_char_was_digit=1;
 8003694:	2001      	movs	r0, #1
 8003696:	e7eb      	b.n	8003670 <string_is_ipv4+0x8>
        return(0); // not an IP: did not end in a digit
 8003698:	2000      	movs	r0, #0
}
 800369a:	bd10      	pop	{r4, pc}

0800369c <dnslkup_request>:
// See http://www.ietf.org/rfc/rfc1034.txt 
// and http://www.ietf.org/rfc/rfc1035.txt
// gwmac is the internal mac addess of your router
// because we use 8.8.8.8 as a DNS server
uint8_t dnslkup_request(uint8_t *buf,const char *hostname,const uint8_t *gwmac)
{
 800369c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        uint8_t i,lenpos,lencnt;
        haveDNSanswer=0;
 80036a0:	2600      	movs	r6, #0
 80036a2:	4b35      	ldr	r3, [pc, #212]	; (8003778 <dnslkup_request+0xdc>)
{
 80036a4:	4604      	mov	r4, r0
        haveDNSanswer=0;
 80036a6:	701e      	strb	r6, [r3, #0]
{
 80036a8:	460d      	mov	r5, r1
 80036aa:	4690      	mov	r8, r2
        if(!enc28j60linkup()){
 80036ac:	f000 fb4a 	bl	8003d44 <enc28j60linkup>
 80036b0:	4b32      	ldr	r3, [pc, #200]	; (800377c <dnslkup_request+0xe0>)
 80036b2:	b928      	cbnz	r0, 80036c0 <dnslkup_request+0x24>
                dns_ansError=4; // could not send request, link down
 80036b4:	2204      	movs	r2, #4
                return(1);
 80036b6:	2001      	movs	r0, #1
                dns_ansError=4; // could not send request, link down
 80036b8:	701a      	strb	r2, [r3, #0]
        // this way we can easily jump over the query section
        // of the answer:
        buf[UDP_DATA_P]=i-12;
        send_udp_transmit(buf,i);
        return(0);
}
 80036ba:	b002      	add	sp, #8
 80036bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dnstid_l++; // increment for next request, finally wrap
 80036c0:	4f2f      	ldr	r7, [pc, #188]	; (8003780 <dnslkup_request+0xe4>)
        dns_ansError=0;
 80036c2:	701e      	strb	r6, [r3, #0]
        dnstid_l++; // increment for next request, finally wrap
 80036c4:	7839      	ldrb	r1, [r7, #0]
        send_udp_prepare(buf,(DNSCLIENT_SRC_PORT_H<<8)|(dnstid_l&0xff),dnsip,53,gwmac);
 80036c6:	2335      	movs	r3, #53	; 0x35
        dnstid_l++; // increment for next request, finally wrap
 80036c8:	3101      	adds	r1, #1
 80036ca:	b2c9      	uxtb	r1, r1
 80036cc:	7039      	strb	r1, [r7, #0]
        send_udp_prepare(buf,(DNSCLIENT_SRC_PORT_H<<8)|(dnstid_l&0xff),dnsip,53,gwmac);
 80036ce:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <dnslkup_request+0xe8>)
 80036d0:	f8cd 8000 	str.w	r8, [sp]
 80036d4:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80036d8:	4620      	mov	r0, r4
 80036da:	f000 ff3f 	bl	800455c <send_udp_prepare>
        buf[UDP_DATA_P+1]=dnstid_l;
 80036de:	783b      	ldrb	r3, [r7, #0]
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
 80036e0:	2201      	movs	r2, #1
        buf[UDP_DATA_P+1]=dnstid_l;
 80036e2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        buf[UDP_DATA_P+2]=1; // flags, standard recursive query
 80036e6:	4623      	mov	r3, r4
 80036e8:	f803 2f2c 	strb.w	r2, [r3, #44]!
 80036ec:	f104 0235 	add.w	r2, r4, #53	; 0x35
                buf[UDP_DATA_P+i]=0;
 80036f0:	f803 6f01 	strb.w	r6, [r3, #1]!
        while(i<12){ 
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1fb      	bne.n	80036f0 <dnslkup_request+0x54>
        buf[UDP_DATA_P+5]=1; // 1 question
 80036f8:	2301      	movs	r3, #1
        while(*hostname){
 80036fa:	4629      	mov	r1, r5
        lenpos=12;
 80036fc:	200c      	movs	r0, #12
        buf[UDP_DATA_P+5]=1; // 1 question
 80036fe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8003702:	f1c5 070d 	rsb	r7, r5, #13
 8003706:	19ca      	adds	r2, r1, r7
        while(*hostname){
 8003708:	780d      	ldrb	r5, [r1, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	18a6      	adds	r6, r4, r2
 800370e:	bb25      	cbnz	r5, 800375a <dnslkup_request+0xbe>
        buf[UDP_DATA_P+i]=1; // type A
 8003710:	2101      	movs	r1, #1
        buf[UDP_DATA_P+lenpos]=lencnt-1;
 8003712:	4420      	add	r0, r4
 8003714:	3b01      	subs	r3, #1
 8003716:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        i++;
 800371a:	1c53      	adds	r3, r2, #1
        buf[UDP_DATA_P+i]=0;
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4423      	add	r3, r4
        buf[UDP_DATA_P+i]=0; // terminate with zero, means root domain.
 8003720:	f886 502a 	strb.w	r5, [r6, #42]	; 0x2a
        buf[UDP_DATA_P+i]=0;
 8003724:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
        i++;
 8003728:	1c93      	adds	r3, r2, #2
        buf[UDP_DATA_P+i]=1; // type A
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4423      	add	r3, r4
 800372e:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
        i++;
 8003732:	1cd3      	adds	r3, r2, #3
        buf[UDP_DATA_P+i]=0; 
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4423      	add	r3, r4
 8003738:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
        i++;
 800373c:	1d13      	adds	r3, r2, #4
        buf[UDP_DATA_P+i]=1; // class IN
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4423      	add	r3, r4
 8003742:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
        buf[UDP_DATA_P]=i-12;
 8003746:	1fd3      	subs	r3, r2, #7
        i++;
 8003748:	1d51      	adds	r1, r2, #5
        send_udp_transmit(buf,i);
 800374a:	4620      	mov	r0, r4
        buf[UDP_DATA_P]=i-12;
 800374c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        send_udp_transmit(buf,i);
 8003750:	b2c9      	uxtb	r1, r1
 8003752:	f000 ff4f 	bl	80045f4 <send_udp_transmit>
        return(0);
 8003756:	4628      	mov	r0, r5
 8003758:	e7af      	b.n	80036ba <dnslkup_request+0x1e>
                if (*hostname=='.'){
 800375a:	2d2e      	cmp	r5, #46	; 0x2e
 800375c:	d105      	bne.n	800376a <dnslkup_request+0xce>
                        buf[UDP_DATA_P+lenpos]=lencnt-1; // fill the length field
 800375e:	4420      	add	r0, r4
 8003760:	3b01      	subs	r3, #1
 8003762:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8003766:	4610      	mov	r0, r2
                        lencnt=0;
 8003768:	2300      	movs	r3, #0
                buf[UDP_DATA_P+i]=*hostname;
 800376a:	f811 2b01 	ldrb.w	r2, [r1], #1
                lencnt++;
 800376e:	3301      	adds	r3, #1
                buf[UDP_DATA_P+i]=*hostname;
 8003770:	f886 202a 	strb.w	r2, [r6, #42]	; 0x2a
                lencnt++;
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e7c6      	b.n	8003706 <dnslkup_request+0x6a>
 8003778:	20000381 	.word	0x20000381
 800377c:	2000037b 	.word	0x2000037b
 8003780:	20000380 	.word	0x20000380
 8003784:	2000011c 	.word	0x2000011c

08003788 <udp_client_check_for_dns_answer>:
// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
 8003788:	2945      	cmp	r1, #69	; 0x45
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
 800378a:	b530      	push	{r4, r5, lr}
        if (plen<70){
 800378c:	d91a      	bls.n	80037c4 <udp_client_check_for_dns_answer+0x3c>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
 800378e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8003792:	2b35      	cmp	r3, #53	; 0x35
 8003794:	d116      	bne.n	80037c4 <udp_client_check_for_dns_answer+0x3c>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
 8003796:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800379a:	2be0      	cmp	r3, #224	; 0xe0
 800379c:	d112      	bne.n	80037c4 <udp_client_check_for_dns_answer+0x3c>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <udp_client_check_for_dns_answer+0xc4>)
 80037a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10c      	bne.n	80037c4 <udp_client_check_for_dns_answer+0x3c>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
 80037aa:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d108      	bne.n	80037c4 <udp_client_check_for_dns_answer+0x3c>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
 80037b2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80037b6:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d004      	beq.n	80037c8 <udp_client_check_for_dns_answer+0x40>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
 80037be:	2201      	movs	r2, #1
                return(0);
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
                dns_ansError=2; // not IPv4
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <udp_client_check_for_dns_answer+0xc8>)
 80037c2:	701a      	strb	r2, [r3, #0]
                return(0);
 80037c4:	2500      	movs	r5, #0
 80037c6:	e03f      	b.n	8003848 <udp_client_check_for_dns_answer+0xc0>
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
 80037c8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
                while(i<plen-UDP_DATA_P-7){
 80037cc:	3931      	subs	r1, #49	; 0x31
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
 80037ce:	330c      	adds	r3, #12
 80037d0:	b2db      	uxtb	r3, r3
        if (buf[UDP_DATA_P+i] & 0xc0){
 80037d2:	18c2      	adds	r2, r0, r3
 80037d4:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80037d8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80037dc:	d01c      	beq.n	8003818 <udp_client_check_for_dns_answer+0x90>
                                i++;
 80037de:	3302      	adds	r3, #2
 80037e0:	b2db      	uxtb	r3, r3
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
 80037e2:	18c2      	adds	r2, r0, r3
 80037e4:	f892 502b 	ldrb.w	r5, [r2, #43]	; 0x2b
 80037e8:	2d01      	cmp	r5, #1
 80037ea:	d018      	beq.n	800381e <udp_client_check_for_dns_answer+0x96>
                i += 2 + 2 + 4;    // skip type & class & TTL
 80037ec:	f103 0208 	add.w	r2, r3, #8
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4402      	add	r2, r0
 80037f4:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 80037f8:	330a      	adds	r3, #10
 80037fa:	4413      	add	r3, r2
 80037fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
                if (i < plen-UDP_DATA_P-7){
 8003800:	428b      	cmp	r3, r1
 8003802:	dbe6      	blt.n	80037d2 <udp_client_check_for_dns_answer+0x4a>
                dns_ansError=3; // no A record found but packet ends 
 8003804:	2203      	movs	r2, #3
 8003806:	e7db      	b.n	80037c0 <udp_client_check_for_dns_answer+0x38>
                        i++;
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	b2d2      	uxtb	r2, r2
                        if (buf[UDP_DATA_P+i]==0){
 800380c:	1884      	adds	r4, r0, r2
 800380e:	f894 402a 	ldrb.w	r4, [r4, #42]	; 0x2a
 8003812:	2c00      	cmp	r4, #0
 8003814:	d0e3      	beq.n	80037de <udp_client_check_for_dns_answer+0x56>
                        i++;
 8003816:	4613      	mov	r3, r2
                while(i<plen-UDP_DATA_P-7){
 8003818:	428b      	cmp	r3, r1
 800381a:	dbf5      	blt.n	8003808 <udp_client_check_for_dns_answer+0x80>
 800381c:	e7e1      	b.n	80037e2 <udp_client_check_for_dns_answer+0x5a>
        if (buf[UDP_DATA_P+i+9] !=4 ){
 800381e:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003822:	2a04      	cmp	r2, #4
 8003824:	d001      	beq.n	800382a <udp_client_check_for_dns_answer+0xa2>
                dns_ansError=2; // not IPv4
 8003826:	2202      	movs	r2, #2
 8003828:	e7ca      	b.n	80037c0 <udp_client_check_for_dns_answer+0x38>
                return(0);
        }
        i+=10;
 800382a:	2200      	movs	r2, #0
 800382c:	330a      	adds	r3, #10
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
 800382e:	4c09      	ldr	r4, [pc, #36]	; (8003854 <udp_client_check_for_dns_answer+0xcc>)
        i+=10;
 8003830:	b2db      	uxtb	r3, r3
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
 8003832:	1899      	adds	r1, r3, r2
 8003834:	4401      	add	r1, r0
 8003836:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
 800383a:	5511      	strb	r1, [r2, r4]
 800383c:	3201      	adds	r2, #1
        while(j<4){
 800383e:	2a04      	cmp	r2, #4
 8003840:	d1f7      	bne.n	8003832 <udp_client_check_for_dns_answer+0xaa>
                j++;
        }
        haveDNSanswer=1;
 8003842:	2201      	movs	r2, #1
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <udp_client_check_for_dns_answer+0xd0>)
 8003846:	701a      	strb	r2, [r3, #0]
        return(1);
}
 8003848:	4628      	mov	r0, r5
 800384a:	bd30      	pop	{r4, r5, pc}
 800384c:	20000380 	.word	0x20000380
 8003850:	2000037b 	.word	0x2000037b
 8003854:	2000037c 	.word	0x2000037c
 8003858:	20000381 	.word	0x20000381

0800385c <EE_Format>:

//##########################################################################################################
//##########################################################################################################
//##########################################################################################################
bool	EE_Format(void)
{
 800385c:	b510      	push	{r4, lr}
 800385e:	b086      	sub	sp, #24
	uint32_t	error;
	HAL_FLASH_Unlock();
 8003860:	f7fc fdcc 	bl	80003fc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 8003864:	2301      	movs	r3, #1
	#if ( _EEPROM_F1_LOW_DESTINY==1 || _EEPROM_F1_MEDIUM_DESTINY==1 || _EEPROM_F1_HIGH_DESTINY==1 )
	flashErase.Banks = FLASH_BANK_1;
	#endif
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003866:	2400      	movs	r4, #0
	flashErase.NbPages=1;
 8003868:	9305      	str	r3, [sp, #20]
	flashErase.Banks = FLASH_BANK_1;
 800386a:	9303      	str	r3, [sp, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <EE_Format+0x38>)
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 800386e:	a901      	add	r1, sp, #4
 8003870:	a802      	add	r0, sp, #8
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8003872:	9304      	str	r3, [sp, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8003874:	9402      	str	r4, [sp, #8]
	if(HAL_FLASHEx_Erase(&flashErase,&error)==HAL_OK)
 8003876:	f7fc fe71 	bl	800055c <HAL_FLASHEx_Erase>
 800387a:	b938      	cbnz	r0, 800388c <EE_Format+0x30>
	{
		HAL_FLASH_Lock();
 800387c:	f7fc fdd0 	bl	8000420 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8003880:	9801      	ldr	r0, [sp, #4]
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	4258      	negs	r0, r3
 8003886:	4158      	adcs	r0, r3
		else
			return true;	
	}
	HAL_FLASH_Lock();
	return false;	
}
 8003888:	b006      	add	sp, #24
 800388a:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 800388c:	f7fc fdc8 	bl	8000420 <HAL_FLASH_Lock>
	return false;	
 8003890:	4620      	mov	r0, r4
 8003892:	e7f9      	b.n	8003888 <EE_Format+0x2c>
 8003894:	0800f800 	.word	0x0800f800

08003898 <EE_Read>:
//##########################################################################################################
bool EE_Read(uint16_t VirtualAddress, uint32_t* Data)
{
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 8003898:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
		return false;
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 800389c:	bf3f      	itttt	cc
 800389e:	0080      	lslcc	r0, r0, #2
 80038a0:	f100 6000 	addcc.w	r0, r0, #134217728	; 0x8000000
 80038a4:	f500 4078 	addcc.w	r0, r0, #63488	; 0xf800
 80038a8:	6803      	ldrcc	r3, [r0, #0]
	return true;
 80038aa:	bf3a      	itte	cc
 80038ac:	2001      	movcc	r0, #1
	*Data =  (*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80038ae:	600b      	strcc	r3, [r1, #0]
		return false;
 80038b0:	2000      	movcs	r0, #0
}
 80038b2:	4770      	bx	lr

080038b4 <EE_Reads>:
	return true;
}
//##########################################################################################################
bool EE_Reads(uint16_t StartVirtualAddress,uint16_t HowMuchToRead,uint32_t* Data)
{
	if((StartVirtualAddress+HowMuchToRead) >	(_EEPROM_FLASH_PAGE_SIZE/4))
 80038b4:	4401      	add	r1, r0
 80038b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80038ba:	dd0b      	ble.n	80038d4 <EE_Reads+0x20>
		return false;
 80038bc:	2000      	movs	r0, #0
	{
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
		Data++;
	}
	return true;
}
 80038be:	4770      	bx	lr
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80038c0:	0083      	lsls	r3, r0, #2
 80038c2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80038c6:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80038ca:	681b      	ldr	r3, [r3, #0]
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 80038cc:	3001      	adds	r0, #1
		*Data =  (*(__IO uint32_t*)((i*4)+_EEPROM_FLASH_PAGE_ADDRESS));
 80038ce:	f842 3b04 	str.w	r3, [r2], #4
	for(uint16_t	i=StartVirtualAddress ; i<HowMuchToRead+StartVirtualAddress ; i++)
 80038d2:	b280      	uxth	r0, r0
 80038d4:	4281      	cmp	r1, r0
 80038d6:	dcf3      	bgt.n	80038c0 <EE_Reads+0xc>
	return true;
 80038d8:	2001      	movs	r0, #1
 80038da:	4770      	bx	lr

080038dc <EE_Write>:
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 80038dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
{
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	4605      	mov	r5, r0
 80038e6:	460f      	mov	r7, r1
	if(VirtualAddress >=	(_EEPROM_FLASH_PAGE_SIZE/4))
 80038e8:	d21a      	bcs.n	8003920 <EE_Write+0x44>
	if((*(__IO uint32_t*)((VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS)) != 0xFFFFFFFF)
 80038ea:	0084      	lsls	r4, r0, #2
 80038ec:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 80038f0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	d108      	bne.n	800390c <EE_Write+0x30>
	HAL_FLASH_Unlock();
 80038fa:	f7fc fd7f 	bl	80003fc <HAL_FLASH_Unlock>
	if(Data!=0xFFFFFFFF)
 80038fe:	1c7b      	adds	r3, r7, #1
 8003900:	d12a      	bne.n	8003958 <EE_Write+0x7c>
			HAL_FLASH_Lock();
 8003902:	f7fc fd8d 	bl	8000420 <HAL_FLASH_Lock>
			return true;
 8003906:	2001      	movs	r0, #1
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if( EE_Reads(0,(_EEPROM_FLASH_PAGE_SIZE/4),EEPROMPageBackup)==false)
 800390c:	4e17      	ldr	r6, [pc, #92]	; (800396c <EE_Write+0x90>)
 800390e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003912:	4632      	mov	r2, r6
 8003914:	2000      	movs	r0, #0
 8003916:	f7ff ffcd 	bl	80038b4 <EE_Reads>
 800391a:	b920      	cbnz	r0, 8003926 <EE_Write+0x4a>
			HAL_FLASH_Lock();
 800391c:	f7fc fd80 	bl	8000420 <HAL_FLASH_Lock>
		return false;
 8003920:	2000      	movs	r0, #0
}
 8003922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EEPROMPageBackup[VirtualAddress]=Data;
 8003926:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
		EE_Format();
 800392a:	f7ff ff97 	bl	800385c <EE_Format>
		HAL_FLASH_Unlock();
 800392e:	f7fc fd65 	bl	80003fc <HAL_FLASH_Unlock>
 8003932:	4d0f      	ldr	r5, [pc, #60]	; (8003970 <EE_Write+0x94>)
		for(uint16_t	i=0 ; i<_EEPROM_FLASH_PAGE_SIZE/4 ; i++)
 8003934:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003974 <EE_Write+0x98>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(i*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)EEPROMPageBackup[i])!=HAL_OK)
 8003938:	f105 4378 	add.w	r3, r5, #4160749568	; 0xf8000000
 800393c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003940:	58f2      	ldr	r2, [r6, r3]
 8003942:	4629      	mov	r1, r5
 8003944:	2300      	movs	r3, #0
 8003946:	2002      	movs	r0, #2
 8003948:	f7fc fd9e 	bl	8000488 <HAL_FLASH_Program>
 800394c:	2800      	cmp	r0, #0
 800394e:	d1e5      	bne.n	800391c <EE_Write+0x40>
 8003950:	3504      	adds	r5, #4
		for(uint16_t	i=0 ; i<_EEPROM_FLASH_PAGE_SIZE/4 ; i++)
 8003952:	4545      	cmp	r5, r8
 8003954:	d1f0      	bne.n	8003938 <EE_Write+0x5c>
 8003956:	e7d0      	b.n	80038fa <EE_Write+0x1e>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(VirtualAddress*4)+_EEPROM_FLASH_PAGE_ADDRESS,(uint64_t)Data)==HAL_OK)
 8003958:	463a      	mov	r2, r7
 800395a:	2300      	movs	r3, #0
 800395c:	4621      	mov	r1, r4
 800395e:	2002      	movs	r0, #2
 8003960:	f7fc fd92 	bl	8000488 <HAL_FLASH_Program>
 8003964:	2800      	cmp	r0, #0
 8003966:	d1d9      	bne.n	800391c <EE_Write+0x40>
 8003968:	e7cb      	b.n	8003902 <EE_Write+0x26>
 800396a:	bf00      	nop
 800396c:	20000630 	.word	0x20000630
 8003970:	0800f800 	.word	0x0800f800
 8003974:	08010000 	.word	0x08010000

08003978 <enc28j60_set_spi>:
}
#endif

void enc28j60_set_spi(SPI_HandleTypeDef *hspi_new)
{
	hspi = hspi_new;
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <enc28j60_set_spi+0x8>)
 800397a:	6018      	str	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000388 	.word	0x20000388

08003984 <ENC28J60_SendByte>:
}

void HardwareError (float error_num, char infinite);
unsigned char ENC28J60_SendByte(uint8_t tx)
{
 8003984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (hspi == NULL)
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <ENC28J60_SendByte+0x38>)
{
 8003988:	f88d 000f 	strb.w	r0, [sp, #15]
	if (hspi == NULL)
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	b190      	cbz	r0, 80039b6 <ENC28J60_SendByte+0x32>

	if (r != HAL_OK)
		error(r, 0);
*/

	uint8_t rx = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	aa06      	add	r2, sp, #24
 8003994:	f802 3d01 	strb.w	r3, [r2, #-1]!
	int r;

	r = HAL_SPI_TransmitReceive(hspi, &tx, &rx, 1, 0xffffffff);
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	f10d 010f 	add.w	r1, sp, #15
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2301      	movs	r3, #1
 80039a4:	f7fd fe6b 	bl	800167e <HAL_SPI_TransmitReceive>

	if (r != HAL_OK)
 80039a8:	b118      	cbz	r0, 80039b2 <ENC28J60_SendByte+0x2e>
		Error_Handler();
 80039aa:	217b      	movs	r1, #123	; 0x7b
 80039ac:	4804      	ldr	r0, [pc, #16]	; (80039c0 <ENC28J60_SendByte+0x3c>)
 80039ae:	f002 f80f 	bl	80059d0 <_Error_Handler>

	return rx;
 80039b2:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 80039b6:	b007      	add	sp, #28
 80039b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039bc:	20000388 	.word	0x20000388
 80039c0:	08006d15 	.word	0x08006d15

080039c4 <enc28j60ReadOp>:

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		uint8_t temp;
        enableChip;
 80039c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039ca:	4d12      	ldr	r5, [pc, #72]	; (8003a14 <enc28j60ReadOp+0x50>)
{
 80039cc:	460e      	mov	r6, r1
        enableChip;
 80039ce:	612b      	str	r3, [r5, #16]
 80039d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 80039d4:	4607      	mov	r7, r0
        enableChip;
 80039d6:	4c10      	ldr	r4, [pc, #64]	; (8003a18 <enc28j60ReadOp+0x54>)
 80039d8:	2005      	movs	r0, #5
 80039da:	6123      	str	r3, [r4, #16]
        // issue read command
        ENC28J60_SendByte(op | (address & ADDR_MASK));
 80039dc:	b276      	sxtb	r6, r6
        enableChip;
 80039de:	f7fc fc11 	bl	8000204 <HAL_Delay>
        ENC28J60_SendByte(op | (address & ADDR_MASK));
 80039e2:	f006 001f 	and.w	r0, r6, #31
 80039e6:	4338      	orrs	r0, r7
 80039e8:	f7ff ffcc 	bl	8003984 <ENC28J60_SendByte>
        temp = ENC28J60_SendByte(0xFF);
 80039ec:	20ff      	movs	r0, #255	; 0xff
 80039ee:	f7ff ffc9 	bl	8003984 <ENC28J60_SendByte>
        if (address & 0x80)
 80039f2:	2e00      	cmp	r6, #0
        temp = ENC28J60_SendByte(0xFF);
 80039f4:	4607      	mov	r7, r0
        if (address & 0x80)
 80039f6:	da03      	bge.n	8003a00 <enc28j60ReadOp+0x3c>
            temp = ENC28J60_SendByte(0xFF);
 80039f8:	20ff      	movs	r0, #255	; 0xff
 80039fa:	f7ff ffc3 	bl	8003984 <ENC28J60_SendByte>
 80039fe:	4607      	mov	r7, r0

        // release CS
        disableChip;
 8003a00:	2310      	movs	r3, #16
 8003a02:	612b      	str	r3, [r5, #16]
 8003a04:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a08:	2005      	movs	r0, #5
 8003a0a:	6123      	str	r3, [r4, #16]
 8003a0c:	f7fc fbfa 	bl	8000204 <HAL_Delay>
        return temp;
}
 8003a10:	4638      	mov	r0, r7
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a14:	40010800 	.word	0x40010800
 8003a18:	40011000 	.word	0x40011000

08003a1c <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
    enableChip;
 8003a1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
{
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    enableChip;
 8003a24:	4e0f      	ldr	r6, [pc, #60]	; (8003a64 <enc28j60WriteOp+0x48>)
{
 8003a26:	460c      	mov	r4, r1
    enableChip;
 8003a28:	6133      	str	r3, [r6, #16]
 8003a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8003a2e:	4680      	mov	r8, r0
 8003a30:	4617      	mov	r7, r2
    enableChip;
 8003a32:	4d0d      	ldr	r5, [pc, #52]	; (8003a68 <enc28j60WriteOp+0x4c>)
 8003a34:	2005      	movs	r0, #5
 8003a36:	612b      	str	r3, [r5, #16]
 8003a38:	f7fc fbe4 	bl	8000204 <HAL_Delay>
    ENC28J60_SendByte(op | (address & ADDR_MASK));
 8003a3c:	f004 001f 	and.w	r0, r4, #31
 8003a40:	ea40 0008 	orr.w	r0, r0, r8
 8003a44:	f7ff ff9e 	bl	8003984 <ENC28J60_SendByte>
    ENC28J60_SendByte(data);
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f7ff ff9b 	bl	8003984 <ENC28J60_SendByte>
    disableChip;
 8003a4e:	2310      	movs	r3, #16
 8003a50:	6133      	str	r3, [r6, #16]
 8003a52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a56:	2005      	movs	r0, #5
 8003a58:	612b      	str	r3, [r5, #16]
}
 8003a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    disableChip;
 8003a5e:	f7fc bbd1 	b.w	8000204 <HAL_Delay>
 8003a62:	bf00      	nop
 8003a64:	40010800 	.word	0x40010800
 8003a68:	40011000 	.word	0x40011000

08003a6c <enc28j60ReadBuffer>:
 while(!enc28j60Read(ESTAT) & ESTAT_CLKRDY);
}


void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    enableChip;
 8003a6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a72:	4d10      	ldr	r5, [pc, #64]	; (8003ab4 <enc28j60ReadBuffer+0x48>)
 8003a74:	4c10      	ldr	r4, [pc, #64]	; (8003ab8 <enc28j60ReadBuffer+0x4c>)
 8003a76:	612b      	str	r3, [r5, #16]
 8003a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8003a7c:	4607      	mov	r7, r0
    enableChip;
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	2005      	movs	r0, #5
{
 8003a82:	460e      	mov	r6, r1
    enableChip;
 8003a84:	f7fc fbbe 	bl	8000204 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_READ_BUF_MEM);
 8003a88:	203a      	movs	r0, #58	; 0x3a
 8003a8a:	f7ff ff7b 	bl	8003984 <ENC28J60_SendByte>
 8003a8e:	4437      	add	r7, r6
    while (len--) {
 8003a90:	42be      	cmp	r6, r7
 8003a92:	d109      	bne.n	8003aa8 <enc28j60ReadBuffer+0x3c>
        *data++ = ENC28J60_SendByte(0x00);
    }
    disableChip;
 8003a94:	2310      	movs	r3, #16
 8003a96:	612b      	str	r3, [r5, #16]
 8003a98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a9c:	2005      	movs	r0, #5
 8003a9e:	6123      	str	r3, [r4, #16]
    // Remove next line suggested by user epam - not needed
//    *data='\0';
}
 8003aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    disableChip;
 8003aa4:	f7fc bbae 	b.w	8000204 <HAL_Delay>
        *data++ = ENC28J60_SendByte(0x00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7ff ff6b 	bl	8003984 <ENC28J60_SendByte>
 8003aae:	f806 0b01 	strb.w	r0, [r6], #1
 8003ab2:	e7ed      	b.n	8003a90 <enc28j60ReadBuffer+0x24>
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	40011000 	.word	0x40011000

08003abc <enc28j60WriteBuffer>:
    return result;
}


void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    enableChip;
 8003abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ac2:	4d10      	ldr	r5, [pc, #64]	; (8003b04 <enc28j60WriteBuffer+0x48>)
 8003ac4:	4c10      	ldr	r4, [pc, #64]	; (8003b08 <enc28j60WriteBuffer+0x4c>)
 8003ac6:	612b      	str	r3, [r5, #16]
 8003ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8003acc:	4607      	mov	r7, r0
    enableChip;
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	2005      	movs	r0, #5
{
 8003ad2:	460e      	mov	r6, r1
    enableChip;
 8003ad4:	f7fc fb96 	bl	8000204 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_WRITE_BUF_MEM);
 8003ad8:	207a      	movs	r0, #122	; 0x7a
 8003ada:	f7ff ff53 	bl	8003984 <ENC28J60_SendByte>
 8003ade:	4437      	add	r7, r6
    while (len--)
 8003ae0:	42be      	cmp	r6, r7
 8003ae2:	d109      	bne.n	8003af8 <enc28j60WriteBuffer+0x3c>
        ENC28J60_SendByte(*data++);

    disableChip;
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	612b      	str	r3, [r5, #16]
 8003ae8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003aec:	2005      	movs	r0, #5
 8003aee:	6123      	str	r3, [r4, #16]
}
 8003af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    disableChip;
 8003af4:	f7fc bb86 	b.w	8000204 <HAL_Delay>
        ENC28J60_SendByte(*data++);
 8003af8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003afc:	f7ff ff42 	bl	8003984 <ENC28J60_SendByte>
 8003b00:	e7ee      	b.n	8003ae0 <enc28j60WriteBuffer+0x24>
 8003b02:	bf00      	nop
 8003b04:	40010800 	.word	0x40010800
 8003b08:	40011000 	.word	0x40011000

08003b0c <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8003b0e:	4d0a      	ldr	r5, [pc, #40]	; (8003b38 <enc28j60SetBank+0x2c>)
 8003b10:	f000 0460 	and.w	r4, r0, #96	; 0x60
 8003b14:	782b      	ldrb	r3, [r5, #0]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d00c      	beq.n	8003b34 <enc28j60SetBank+0x28>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	211f      	movs	r1, #31
 8003b1e:	20a0      	movs	r0, #160	; 0xa0
 8003b20:	f7ff ff7c 	bl	8003a1c <enc28j60WriteOp>
        Enc28j60Bank = address & BANK_MASK;
 8003b24:	702c      	strb	r4, [r5, #0]
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8003b26:	0962      	lsrs	r2, r4, #5
 8003b28:	211f      	movs	r1, #31
    }
}
 8003b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8003b2e:	2080      	movs	r0, #128	; 0x80
 8003b30:	f7ff bf74 	b.w	8003a1c <enc28j60WriteOp>
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
 8003b36:	bf00      	nop
 8003b38:	20000382 	.word	0x20000382

08003b3c <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	4604      	mov	r4, r0
        // set the bank
        enc28j60SetBank(address);
 8003b40:	f7ff ffe4 	bl	8003b0c <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 8003b44:	4621      	mov	r1, r4
}
 8003b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7ff bf3a 	b.w	80039c4 <enc28j60ReadOp>

08003b50 <enc28j60Write>:
	return (enc28j60Read(MIRDH));
}


void enc28j60Write(uint8_t address, uint8_t data)
{
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	460d      	mov	r5, r1
        // set the bank
        enc28j60SetBank(address);
 8003b56:	f7ff ffd9 	bl	8003b0c <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	4621      	mov	r1, r4
}
 8003b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003b62:	2040      	movs	r0, #64	; 0x40
 8003b64:	f7ff bf5a 	b.w	8003a1c <enc28j60WriteOp>

08003b68 <enc28j60WriteWord>:
void enc28j60WriteWord(uint8_t address, uint16_t data) {
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	460d      	mov	r5, r1
    enc28j60Write(address, data & 0xff);
 8003b6e:	b2c9      	uxtb	r1, r1
 8003b70:	f7ff ffee 	bl	8003b50 <enc28j60Write>
    enc28j60Write(address + 1, data >> 8);
 8003b74:	1c60      	adds	r0, r4, #1
 8003b76:	0a29      	lsrs	r1, r5, #8
 8003b78:	b2c0      	uxtb	r0, r0
}
 8003b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    enc28j60Write(address + 1, data >> 8);
 8003b7e:	f7ff bfe7 	b.w	8003b50 <enc28j60Write>

08003b82 <enc28j60PhyReadH>:
	enc28j60Write(MIREGADR, address);
 8003b82:	4601      	mov	r1, r0
{
 8003b84:	b508      	push	{r3, lr}
	enc28j60Write(MIREGADR, address);
 8003b86:	20d4      	movs	r0, #212	; 0xd4
 8003b88:	f7ff ffe2 	bl	8003b50 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
 8003b8c:	20d2      	movs	r0, #210	; 0xd2
 8003b8e:	2101      	movs	r1, #1
 8003b90:	f7ff ffde 	bl	8003b50 <enc28j60Write>
	Delay(15);
 8003b94:	200f      	movs	r0, #15
 8003b96:	f7fc fb35 	bl	8000204 <HAL_Delay>
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
 8003b9a:	20ea      	movs	r0, #234	; 0xea
 8003b9c:	f7ff ffce 	bl	8003b3c <enc28j60Read>
 8003ba0:	f010 0101 	ands.w	r1, r0, #1
 8003ba4:	d1f9      	bne.n	8003b9a <enc28j60PhyReadH+0x18>
	enc28j60Write(MICMD, 0x00);
 8003ba6:	20d2      	movs	r0, #210	; 0xd2
 8003ba8:	f7ff ffd2 	bl	8003b50 <enc28j60Write>
	return (enc28j60Read(MIRDH));
 8003bac:	20d9      	movs	r0, #217	; 0xd9
 8003bae:	f7ff ffc5 	bl	8003b3c <enc28j60Read>
}
 8003bb2:	bd08      	pop	{r3, pc}

08003bb4 <enc28j60PhyWrite>:


void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	460c      	mov	r4, r1
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 8003bb8:	4601      	mov	r1, r0
 8003bba:	20d4      	movs	r0, #212	; 0xd4
 8003bbc:	f7ff ffc8 	bl	8003b50 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 8003bc0:	b2e1      	uxtb	r1, r4
 8003bc2:	20d6      	movs	r0, #214	; 0xd6
 8003bc4:	f7ff ffc4 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 8003bc8:	0a21      	lsrs	r1, r4, #8
 8003bca:	20d7      	movs	r0, #215	; 0xd7
 8003bcc:	f7ff ffc0 	bl	8003b50 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8003bd0:	20ea      	movs	r0, #234	; 0xea
 8003bd2:	f7ff ffb3 	bl	8003b3c <enc28j60Read>
 8003bd6:	07c3      	lsls	r3, r0, #31
 8003bd8:	d400      	bmi.n	8003bdc <enc28j60PhyWrite+0x28>
                Delay(15);
        }
}
 8003bda:	bd10      	pop	{r4, pc}
                Delay(15);
 8003bdc:	200f      	movs	r0, #15
 8003bde:	f7fc fb11 	bl	8000204 <HAL_Delay>
 8003be2:	e7f5      	b.n	8003bd0 <enc28j60PhyWrite+0x1c>

08003be4 <enc28j60clkout>:
}
*/
void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
 8003be4:	f000 0107 	and.w	r1, r0, #7
 8003be8:	2075      	movs	r0, #117	; 0x75
 8003bea:	f7ff bfb1 	b.w	8003b50 <enc28j60Write>
	...

08003bf0 <enc28j60Init>:
}

void enc28j60Init( uint8_t* macaddr )
{
	enableChip; // ss=0
 8003bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 8003bf4:	b538      	push	{r3, r4, r5, lr}
	enableChip; // ss=0
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <enc28j60Init+0x10c>)
{
 8003bf8:	4604      	mov	r4, r0
	enableChip; // ss=0
 8003bfa:	611a      	str	r2, [r3, #16]
 8003bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c00:	2005      	movs	r0, #5
 8003c02:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8003c06:	f7fc fafd 	bl	8000204 <HAL_Delay>

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8003c0a:	22ff      	movs	r2, #255	; 0xff
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
 8003c0c:	2500      	movs	r5, #0
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8003c0e:	4610      	mov	r0, r2
 8003c10:	2100      	movs	r1, #0
 8003c12:	f7ff ff03 	bl	8003a1c <enc28j60WriteOp>
	HAL_Delay(50);
 8003c16:	2032      	movs	r0, #50	; 0x32
 8003c18:	f7fc faf4 	bl	8000204 <HAL_Delay>
	gNextPacketPtr = RXSTART_INIT;
 8003c1c:	4b38      	ldr	r3, [pc, #224]	; (8003d00 <enc28j60Init+0x110>)
        // Rx start
	enc28j60WriteWord(ERXSTL, RXSTART_INIT);
 8003c1e:	4629      	mov	r1, r5
 8003c20:	2008      	movs	r0, #8
	gNextPacketPtr = RXSTART_INIT;
 8003c22:	801d      	strh	r5, [r3, #0]
	enc28j60WriteWord(ERXSTL, RXSTART_INIT);
 8003c24:	f7ff ffa0 	bl	8003b68 <enc28j60WriteWord>
	// set receive pointer address
	enc28j60WriteWord(ERXRDPTL, RXSTART_INIT);
 8003c28:	4629      	mov	r1, r5
 8003c2a:	200c      	movs	r0, #12
 8003c2c:	f7ff ff9c 	bl	8003b68 <enc28j60WriteWord>
	// RX end
	enc28j60WriteWord(ERXNDL, RXSTOP_INIT);
 8003c30:	f641 11fe 	movw	r1, #6654	; 0x19fe
 8003c34:	200a      	movs	r0, #10
 8003c36:	f7ff ff97 	bl	8003b68 <enc28j60WriteWord>
	// TX start
	enc28j60WriteWord(ETXSTL, TXSTART_INIT);
 8003c3a:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8003c3e:	2004      	movs	r0, #4
 8003c40:	f7ff ff92 	bl	8003b68 <enc28j60WriteWord>
	// TX end
	enc28j60WriteWord(ETXNDL, TXSTOP_INIT);
 8003c44:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8003c48:	2006      	movs	r0, #6
 8003c4a:	f7ff ff8d 	bl	8003b68 <enc28j60WriteWord>
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
        //Change to add ERXFCON_BCEN recommended by epam
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
        erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN;
 8003c4e:	21b1      	movs	r1, #177	; 0xb1
 8003c50:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <enc28j60Init+0x114>)
	enc28j60Write(ERXFCON, erxfcon );
 8003c52:	2038      	movs	r0, #56	; 0x38
        erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN;
 8003c54:	7019      	strb	r1, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon );
 8003c56:	f7ff ff7b 	bl	8003b50 <enc28j60Write>
	enc28j60WriteWord(EPMM0, 0x303f);
 8003c5a:	f243 013f 	movw	r1, #12351	; 0x303f
 8003c5e:	2028      	movs	r0, #40	; 0x28
 8003c60:	f7ff ff82 	bl	8003b68 <enc28j60WriteWord>
	enc28j60WriteWord(EPMCSL, 0xf7f9);
 8003c64:	f24f 71f9 	movw	r1, #63481	; 0xf7f9
 8003c68:	2030      	movs	r0, #48	; 0x30
 8003c6a:	f7ff ff7d 	bl	8003b68 <enc28j60WriteWord>
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8003c6e:	210d      	movs	r1, #13
 8003c70:	20c0      	movs	r0, #192	; 0xc0
 8003c72:	f7ff ff6d 	bl	8003b50 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 8003c76:	4629      	mov	r1, r5
 8003c78:	20c1      	movs	r0, #193	; 0xc1
 8003c7a:	f7ff ff69 	bl	8003b50 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);  //|MACON3_FULDPX);
 8003c7e:	2232      	movs	r2, #50	; 0x32
 8003c80:	21c2      	movs	r1, #194	; 0xc2
 8003c82:	2080      	movs	r0, #128	; 0x80
 8003c84:	f7ff feca 	bl	8003a1c <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60WriteWord(MAIPGL, 0x0C12);
 8003c88:	f640 4112 	movw	r1, #3090	; 0xc12
 8003c8c:	20c6      	movs	r0, #198	; 0xc6
 8003c8e:	f7ff ff6b 	bl	8003b68 <enc28j60WriteWord>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 8003c92:	2112      	movs	r1, #18
 8003c94:	20c4      	movs	r0, #196	; 0xc4
 8003c96:	f7ff ff5b 	bl	8003b50 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60WriteWord(MAMXFLL, MAX_FRAMELEN);	
 8003c9a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003c9e:	20ca      	movs	r0, #202	; 0xca
 8003ca0:	f7ff ff62 	bl	8003b68 <enc28j60WriteWord>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 8003ca4:	7821      	ldrb	r1, [r4, #0]
 8003ca6:	20e4      	movs	r0, #228	; 0xe4
 8003ca8:	f7ff ff52 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 8003cac:	7861      	ldrb	r1, [r4, #1]
 8003cae:	20e5      	movs	r0, #229	; 0xe5
 8003cb0:	f7ff ff4e 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 8003cb4:	78a1      	ldrb	r1, [r4, #2]
 8003cb6:	20e2      	movs	r0, #226	; 0xe2
 8003cb8:	f7ff ff4a 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 8003cbc:	78e1      	ldrb	r1, [r4, #3]
 8003cbe:	20e3      	movs	r0, #227	; 0xe3
 8003cc0:	f7ff ff46 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 8003cc4:	7921      	ldrb	r1, [r4, #4]
 8003cc6:	20e0      	movs	r0, #224	; 0xe0
 8003cc8:	f7ff ff42 	bl	8003b50 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 8003ccc:	7961      	ldrb	r1, [r4, #5]
 8003cce:	20e1      	movs	r0, #225	; 0xe1
 8003cd0:	f7ff ff3e 	bl	8003b50 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 8003cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd8:	2010      	movs	r0, #16
 8003cda:	f7ff ff6b 	bl	8003bb4 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 8003cde:	201f      	movs	r0, #31
 8003ce0:	f7ff ff14 	bl	8003b0c <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 8003ce4:	22c0      	movs	r2, #192	; 0xc0
 8003ce6:	211b      	movs	r1, #27
 8003ce8:	2080      	movs	r0, #128	; 0x80
 8003cea:	f7ff fe97 	bl	8003a1c <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
 8003cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	211f      	movs	r1, #31
 8003cf6:	2080      	movs	r0, #128	; 0x80
 8003cf8:	f7ff be90 	b.w	8003a1c <enc28j60WriteOp>
 8003cfc:	40010800 	.word	0x40010800
 8003d00:	20000384 	.word	0x20000384
 8003d04:	20000383 	.word	0x20000383

08003d08 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
 8003d08:	b508      	push	{r3, lr}
        uint8_t rev;
        rev=enc28j60Read(EREVID);
 8003d0a:	2072      	movs	r0, #114	; 0x72
 8003d0c:	f7ff ff16 	bl	8003b3c <enc28j60Read>
        // microchip forgot to step the number on the silcon when they
        // released the revision B7. 6 is now rev B7. We still have
        // to see what they do when they release B8. At the moment
        // there is no B8 out yet
        if (rev>5) rev++;
 8003d10:	2805      	cmp	r0, #5
 8003d12:	bf84      	itt	hi
 8003d14:	3001      	addhi	r0, #1
 8003d16:	b2c0      	uxtbhi	r0, r0
	return(rev);
}
 8003d18:	bd08      	pop	{r3, pc}
	...

08003d1c <enc28j60EnableBroadcast>:

// A number of utility functions to enable/disable broadcast and multicast bits
void enc28j60EnableBroadcast( void ) {
	erxfcon |= ERXFCON_BCEN;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <enc28j60EnableBroadcast+0x10>)
	enc28j60Write(ERXFCON, erxfcon);
 8003d1e:	2038      	movs	r0, #56	; 0x38
	erxfcon |= ERXFCON_BCEN;
 8003d20:	7819      	ldrb	r1, [r3, #0]
 8003d22:	f041 0101 	orr.w	r1, r1, #1
 8003d26:	7019      	strb	r1, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 8003d28:	f7ff bf12 	b.w	8003b50 <enc28j60Write>
 8003d2c:	20000383 	.word	0x20000383

08003d30 <enc28j60DisableBroadcast>:
}

void enc28j60DisableBroadcast( void ) {
	erxfcon &= ~ERXFCON_BCEN;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <enc28j60DisableBroadcast+0x10>)
	enc28j60Write(ERXFCON, erxfcon);
 8003d32:	2038      	movs	r0, #56	; 0x38
	erxfcon &= ~ERXFCON_BCEN;
 8003d34:	7819      	ldrb	r1, [r3, #0]
 8003d36:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8003d3a:	7019      	strb	r1, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 8003d3c:	f7ff bf08 	b.w	8003b50 <enc28j60Write>
 8003d40:	20000383 	.word	0x20000383

08003d44 <enc28j60linkup>:
}


// link status
uint8_t enc28j60linkup(void)
{
 8003d44:	b508      	push	{r3, lr}
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) & 4);
 8003d46:	2011      	movs	r0, #17
 8003d48:	f7ff ff1b 	bl	8003b82 <enc28j60PhyReadH>
}
 8003d4c:	f000 0004 	and.w	r0, r0, #4
 8003d50:	bd08      	pop	{r3, pc}

08003d52 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 8003d52:	b570      	push	{r4, r5, r6, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 8003d58:	211f      	movs	r1, #31
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7ff fe32 	bl	80039c4 <enc28j60ReadOp>
 8003d60:	f010 0608 	ands.w	r6, r0, #8
 8003d64:	d11b      	bne.n	8003d9e <enc28j60PacketSend+0x4c>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }

	// Set the write pointer to start of transmit buffer area
	enc28j60WriteWord(EWRPTL, TXSTART_INIT);
 8003d66:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f7ff fefc 	bl	8003b68 <enc28j60WriteWord>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60WriteWord(ETXNDL, (TXSTART_INIT+len));
 8003d70:	f504 51cf 	add.w	r1, r4, #6624	; 0x19e0
 8003d74:	311f      	adds	r1, #31
 8003d76:	b289      	uxth	r1, r1
 8003d78:	2006      	movs	r0, #6
 8003d7a:	f7ff fef5 	bl	8003b68 <enc28j60WriteWord>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8003d7e:	4632      	mov	r2, r6
 8003d80:	4631      	mov	r1, r6
 8003d82:	207a      	movs	r0, #122	; 0x7a
 8003d84:	f7ff fe4a 	bl	8003a1c <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fe96 	bl	8003abc <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
}
 8003d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8003d94:	2208      	movs	r2, #8
 8003d96:	211f      	movs	r1, #31
 8003d98:	2080      	movs	r0, #128	; 0x80
 8003d9a:	f7ff be3f 	b.w	8003a1c <enc28j60WriteOp>
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
 8003d9e:	201c      	movs	r0, #28
 8003da0:	f7ff fecc 	bl	8003b3c <enc28j60Read>
 8003da4:	0783      	lsls	r3, r0, #30
 8003da6:	d5d7      	bpl.n	8003d58 <enc28j60PacketSend+0x6>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	211f      	movs	r1, #31
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7ff fe35 	bl	8003a1c <enc28j60WriteOp>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	211f      	movs	r1, #31
 8003db6:	20a0      	movs	r0, #160	; 0xa0
 8003db8:	f7ff fe30 	bl	8003a1c <enc28j60WriteOp>
 8003dbc:	e7cc      	b.n	8003d58 <enc28j60PacketSend+0x6>
	...

08003dc0 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 8003dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dc2:	4606      	mov	r6, r0
        	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 8003dc4:	2039      	movs	r0, #57	; 0x39
{
 8003dc6:	460f      	mov	r7, r1
	if( enc28j60Read(EPKTCNT) ==0 ){
 8003dc8:	f7ff feb8 	bl	8003b3c <enc28j60Read>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d041      	beq.n	8003e54 <enc28j60PacketReceive+0x94>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60WriteWord(ERDPTL, gNextPacketPtr);
 8003dd0:	4d21      	ldr	r5, [pc, #132]	; (8003e58 <enc28j60PacketReceive+0x98>)
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	8829      	ldrh	r1, [r5, #0]
 8003dd6:	f7ff fec7 	bl	8003b68 <enc28j60WriteWord>
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8003dda:	f10d 0106 	add.w	r1, sp, #6
 8003dde:	2002      	movs	r0, #2
 8003de0:	f7ff fe44 	bl	8003a6c <enc28j60ReadBuffer>
    return result;
 8003de4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8003de8:	f10d 0106 	add.w	r1, sp, #6
 8003dec:	2002      	movs	r0, #2
	//enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadBufferWord();
 8003dee:	802b      	strh	r3, [r5, #0]
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8003df0:	f7ff fe3c 	bl	8003a6c <enc28j60ReadBuffer>
    return result;
 8003df4:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8003df8:	f10d 0106 	add.w	r1, sp, #6
	//gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = enc28j60ReadBufferWord() - 4;
 8003dfc:	3c04      	subs	r4, #4
 8003dfe:	b2a4      	uxth	r4, r4
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8003e00:	2002      	movs	r0, #2
 8003e02:	f7ff fe33 	bl	8003a6c <enc28j60ReadBuffer>
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadBufferWord();
	//rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
 8003e06:	42a6      	cmp	r6, r4
    return result;
 8003e08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
                len=maxlen-1;
 8003e0c:	bfdc      	itt	le
 8003e0e:	f106 34ff 	addle.w	r4, r6, #4294967295
 8003e12:	b2a4      	uxthle	r4, r4
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 8003e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003e18:	d01a      	beq.n	8003e50 <enc28j60PacketReceive+0x90>
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fe25 	bl	8003a6c <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60WriteWord(ERXRDPTL, gNextPacketPtr );
 8003e22:	8829      	ldrh	r1, [r5, #0]
 8003e24:	200c      	movs	r0, #12
 8003e26:	f7ff fe9f 	bl	8003b68 <enc28j60WriteWord>
	//enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
 8003e2a:	f641 11fe 	movw	r1, #6654	; 0x19fe
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
 8003e2e:	882b      	ldrh	r3, [r5, #0]
                enc28j60WriteWord(ERXRDPTL, RXSTOP_INIT);
                //enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
                //enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
        } else {
                enc28j60WriteWord(ERXRDPTL, (gNextPacketPtr-1));
 8003e30:	200c      	movs	r0, #12
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
 8003e36:	428b      	cmp	r3, r1
                enc28j60WriteWord(ERXRDPTL, (gNextPacketPtr-1));
 8003e38:	bf98      	it	ls
 8003e3a:	4619      	movls	r1, r3
 8003e3c:	f7ff fe94 	bl	8003b68 <enc28j60WriteWord>
                //enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
                //enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8003e40:	2240      	movs	r2, #64	; 0x40
 8003e42:	211e      	movs	r1, #30
 8003e44:	2080      	movs	r0, #128	; 0x80
 8003e46:	f7ff fde9 	bl	8003a1c <enc28j60WriteOp>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
*/
}
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                len=0;
 8003e50:	461c      	mov	r4, r3
 8003e52:	e7e6      	b.n	8003e22 <enc28j60PacketReceive+0x62>
		return(0);
 8003e54:	4604      	mov	r4, r0
 8003e56:	e7f8      	b.n	8003e4a <enc28j60PacketReceive+0x8a>
 8003e58:	20000384 	.word	0x20000384

08003e5c <hex2int_byte>:
    }
    return val;
}

uint8_t hex2int_byte(char *hex) {
    uint32_t val = 0;
 8003e5c:	2100      	movs	r1, #0
uint8_t hex2int_byte(char *hex) {
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	1c84      	adds	r4, r0, #2
    uint8_t i=0;
    while (i<2){
        // get current character then increment
        uint8_t byte = *hex++;
 8003e62:	f810 3b01 	ldrb.w	r3, [r0], #1
        i++;
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8003e66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	2a09      	cmp	r2, #9
 8003e6e:	d905      	bls.n	8003e7c <hex2int_byte+0x20>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 8003e70:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003e74:	2a05      	cmp	r2, #5
 8003e76:	d809      	bhi.n	8003e8c <hex2int_byte+0x30>
 8003e78:	3b57      	subs	r3, #87	; 0x57
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8003e7a:	b2da      	uxtb	r2, r3
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        val = (val << 4) | (byte & 0xF);
 8003e7c:	f002 030f 	and.w	r3, r2, #15
    while (i<2){
 8003e80:	42a0      	cmp	r0, r4
        val = (val << 4) | (byte & 0xF);
 8003e82:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
    while (i<2){
 8003e86:	d1ec      	bne.n	8003e62 <hex2int_byte+0x6>
    }
    return val;
}
 8003e88:	b2c8      	uxtb	r0, r1
 8003e8a:	bd10      	pop	{r4, pc}
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8003e8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e90:	2a05      	cmp	r2, #5
 8003e92:	d801      	bhi.n	8003e98 <hex2int_byte+0x3c>
 8003e94:	3b37      	subs	r3, #55	; 0x37
 8003e96:	e7f0      	b.n	8003e7a <hex2int_byte+0x1e>
 8003e98:	461a      	mov	r2, r3
 8003e9a:	e7ef      	b.n	8003e7c <hex2int_byte+0x20>

08003e9c <dec2int_byte>:

uint8_t dec2int_byte(uint8_t *buf) {
 8003e9c:	b570      	push	{r4, r5, r6, lr}
    uint32_t val = 0;
 8003e9e:	2100      	movs	r1, #0
    uint8_t i=0;
    uint8_t x=100;
 8003ea0:	2464      	movs	r4, #100	; 0x64
    while (i<3) {
        uint8_t byte = *buf++; // get current character then increment
        i++;
        if (byte >= '0' && byte <= '9') byte = byte - '0'; // transform hex character to the 4bit equivalent number, using the ascii table indexes
        val = val + byte * x; // shift 4 to make space for new digit, and add the 4 bits of the new digit
        x = x / 10;
 8003ea2:	260a      	movs	r6, #10
 8003ea4:	1cc5      	adds	r5, r0, #3
        uint8_t byte = *buf++; // get current character then increment
 8003ea6:	f810 3b01 	ldrb.w	r3, [r0], #1
        if (byte >= '0' && byte <= '9') byte = byte - '0'; // transform hex character to the 4bit equivalent number, using the ascii table indexes
 8003eaa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	2a09      	cmp	r2, #9
 8003eb2:	bf98      	it	ls
 8003eb4:	4613      	movls	r3, r2
    while (i<3) {
 8003eb6:	42a8      	cmp	r0, r5
        val = val + byte * x; // shift 4 to make space for new digit, and add the 4 bits of the new digit
 8003eb8:	fb04 1103 	mla	r1, r4, r3, r1
        x = x / 10;
 8003ebc:	fbb4 f4f6 	udiv	r4, r4, r6
    while (i<3) {
 8003ec0:	d1f1      	bne.n	8003ea6 <dec2int_byte+0xa>
    }
    return val;
}
 8003ec2:	b2c8      	uxtb	r0, r1
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ec8 <www_client_internal_result_callback>:
                return(len);
        }
        return(0);
}

uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
 8003ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ecc:	461f      	mov	r7, r3
        uint16_t web_statuscode=0; // tcp status is OK but we need to check http layer too
        uint8_t i=0; 
        if (fd!=www_fd){
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <www_client_internal_result_callback+0x84>)
uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
 8003ed0:	4688      	mov	r8, r1
        if (fd!=www_fd){
 8003ed2:	781b      	ldrb	r3, [r3, #0]
uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data){
 8003ed4:	4616      	mov	r6, r2
        if (fd!=www_fd){
 8003ed6:	4283      	cmp	r3, r0
 8003ed8:	d009      	beq.n	8003eee <www_client_internal_result_callback+0x26>
                (*client_browser_callback)(500,0,0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <www_client_internal_result_callback+0x88>)
 8003ede:	4611      	mov	r1, r2
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ee6:	4798      	blx	r3
                        //(*client_browser_callback)(web_statuscode,((uint16_t)TCP_SRC_PORT_H_P+(bufptr[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
                        (*client_browser_callback)(web_statuscode,datapos,len_of_data);
                }
        }
        return(0);
}
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (statuscode==0 && len_of_data>12){
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d1fa      	bne.n	8003ee8 <www_client_internal_result_callback+0x20>
 8003ef2:	2f0c      	cmp	r7, #12
 8003ef4:	d9f8      	bls.n	8003ee8 <www_client_internal_result_callback+0x20>
                if (client_browser_callback){
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <www_client_internal_result_callback+0x88>)
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	d0f4      	beq.n	8003ee8 <www_client_internal_result_callback+0x20>
                        if (isblank(bufptr[datapos+8]) && isdigit(bufptr[datapos+9])&& isdigit(bufptr[datapos+11])){ // e.g 200 OK, a status code has 3 digits from datapos+9 to datapos+11, copy over the web/http status code to web_statuscode:
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <www_client_internal_result_callback+0x8c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	eb03 0902 	add.w	r9, r3, r2
 8003f06:	f899 0008 	ldrb.w	r0, [r9, #8]
 8003f0a:	f002 f91f 	bl	800614c <isblank>
 8003f0e:	b1b8      	cbz	r0, 8003f40 <www_client_internal_result_callback+0x78>
 8003f10:	f899 4009 	ldrb.w	r4, [r9, #9]
 8003f14:	3c30      	subs	r4, #48	; 0x30
 8003f16:	2c09      	cmp	r4, #9
 8003f18:	d816      	bhi.n	8003f48 <www_client_internal_result_callback+0x80>
 8003f1a:	f899 100b 	ldrb.w	r1, [r9, #11]
 8003f1e:	3930      	subs	r1, #48	; 0x30
 8003f20:	2909      	cmp	r1, #9
 8003f22:	d811      	bhi.n	8003f48 <www_client_internal_result_callback+0x80>
                                        web_statuscode+=bufptr[datapos+9+i]-'0';
 8003f24:	b2a0      	uxth	r0, r4
                                        web_statuscode*=10;
 8003f26:	eb00 0480 	add.w	r4, r0, r0, lsl #2
                                        web_statuscode+=bufptr[datapos+9+i]-'0';
 8003f2a:	f899 000a 	ldrb.w	r0, [r9, #10]
 8003f2e:	3830      	subs	r0, #48	; 0x30
 8003f30:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8003f34:	b280      	uxth	r0, r0
                                        web_statuscode*=10;
 8003f36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                web_statuscode+=bufptr[datapos+11]-'0';
 8003f3a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003f3e:	b280      	uxth	r0, r0
                        (*client_browser_callback)(web_statuscode,datapos,len_of_data);
 8003f40:	463a      	mov	r2, r7
 8003f42:	4631      	mov	r1, r6
 8003f44:	47a8      	blx	r5
 8003f46:	e7cf      	b.n	8003ee8 <www_client_internal_result_callback+0x20>
        uint16_t web_statuscode=0; // tcp status is OK but we need to check http layer too
 8003f48:	4640      	mov	r0, r8
 8003f4a:	e7f9      	b.n	8003f40 <www_client_internal_result_callback+0x78>
 8003f4c:	200003d6 	.word	0x200003d6
 8003f50:	2000039c 	.word	0x2000039c
 8003f54:	20000394 	.word	0x20000394

08003f58 <checksum>:
        if(type==1){
 8003f58:	2a01      	cmp	r2, #1
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 8003f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
        if(type==1){
 8003f5c:	d11a      	bne.n	8003f94 <checksum+0x3c>
                sum+=len-8; // = real udp len
 8003f5e:	f101 0309 	add.w	r3, r1, #9
 8003f62:	084c      	lsrs	r4, r1, #1
 8003f64:	eb00 0544 	add.w	r5, r0, r4, lsl #1
 8003f68:	1c42      	adds	r2, r0, #1
 8003f6a:	3503      	adds	r5, #3
 8003f6c:	3202      	adds	r2, #2
        while(len >1){
 8003f6e:	42aa      	cmp	r2, r5
 8003f70:	d114      	bne.n	8003f9c <checksum+0x44>
        if (len){
 8003f72:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
 8003f76:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003f7a:	b289      	uxth	r1, r1
 8003f7c:	b119      	cbz	r1, 8003f86 <checksum+0x2e>
                sum += ((uint32_t)(0xFF & *buf))<<8;
 8003f7e:	f810 2014 	ldrb.w	r2, [r0, r4, lsl #1]
 8003f82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        while (sum>>16){
 8003f86:	0c1a      	lsrs	r2, r3, #16
 8003f88:	d110      	bne.n	8003fac <checksum+0x54>
        return( (uint16_t) sum ^ 0xFFFF);
 8003f8a:	43d8      	mvns	r0, r3
}
 8003f8c:	b280      	uxth	r0, r0
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t sum = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e7e6      	b.n	8003f62 <checksum+0xa>
        if(type==2){
 8003f94:	2a02      	cmp	r2, #2
 8003f96:	d1fb      	bne.n	8003f90 <checksum+0x38>
                sum+=len-8; // = real tcp len
 8003f98:	1e8b      	subs	r3, r1, #2
 8003f9a:	e7e2      	b.n	8003f62 <checksum+0xa>
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 8003f9c:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 8003fa0:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 8003fa4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 8003fa8:	4433      	add	r3, r6
 8003faa:	e7df      	b.n	8003f6c <checksum+0x14>
                sum = (sum & 0xFFFF)+(sum >> 16);
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	e7e9      	b.n	8003f86 <checksum+0x2e>
	...

08003fb4 <init_mac>:
        if (mymac){
 8003fb4:	b120      	cbz	r0, 8003fc0 <init_mac+0xc>
                memcpy(macaddr,mymac,6);
 8003fb6:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <init_mac+0x10>)
 8003fb8:	6802      	ldr	r2, [r0, #0]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	8882      	ldrh	r2, [r0, #4]
 8003fbe:	809a      	strh	r2, [r3, #4]
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	200003c2 	.word	0x200003c2

08003fc8 <client_ifconfig>:
{
 8003fc8:	b510      	push	{r4, lr}
        if (ip){
 8003fca:	b908      	cbnz	r0, 8003fd0 <client_ifconfig+0x8>
        if (netmask){
 8003fcc:	b941      	cbnz	r1, 8003fe0 <client_ifconfig+0x18>
 8003fce:	bd10      	pop	{r4, pc}
 8003fd0:	2300      	movs	r3, #0
                i=0;while(i<4){ipaddr[i]=ip[i];i++;}
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <client_ifconfig+0x28>)
 8003fd4:	5cc4      	ldrb	r4, [r0, r3]
 8003fd6:	549c      	strb	r4, [r3, r2]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d1fa      	bne.n	8003fd4 <client_ifconfig+0xc>
 8003fde:	e7f5      	b.n	8003fcc <client_ifconfig+0x4>
 8003fe0:	2300      	movs	r3, #0
                i=0;while(i<4){ipnetmask[i]=netmask[i];i++;}
 8003fe2:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <client_ifconfig+0x2c>)
 8003fe4:	5cc8      	ldrb	r0, [r1, r3]
 8003fe6:	5498      	strb	r0, [r3, r2]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d1fa      	bne.n	8003fe4 <client_ifconfig+0x1c>
 8003fee:	bd10      	pop	{r4, pc}
 8003ff0:	200003be 	.word	0x200003be
 8003ff4:	20000123 	.word	0x20000123

08003ff8 <check_ip_message_is_from>:
{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	f100 0319 	add.w	r3, r0, #25
 8003ffe:	3901      	subs	r1, #1
 8004000:	301d      	adds	r0, #29
                if(buf[IP_SRC_P+i]!=ip[i]){
 8004002:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8004006:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800400a:	4294      	cmp	r4, r2
 800400c:	d103      	bne.n	8004016 <check_ip_message_is_from+0x1e>
        while(i<4){
 800400e:	4283      	cmp	r3, r0
 8004010:	d1f7      	bne.n	8004002 <check_ip_message_is_from+0xa>
        return(1);
 8004012:	2001      	movs	r0, #1
 8004014:	bd10      	pop	{r4, pc}
                        return(0);
 8004016:	2000      	movs	r0, #0
}
 8004018:	bd10      	pop	{r4, pc}
	...

0800401c <eth_type_is_arp_and_my_ip>:
        if (len<41){
 800401c:	2928      	cmp	r1, #40	; 0x28
uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 800401e:	b510      	push	{r4, lr}
        if (len<41){
 8004020:	d913      	bls.n	800404a <eth_type_is_arp_and_my_ip+0x2e>
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 8004022:	7b03      	ldrb	r3, [r0, #12]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d110      	bne.n	800404a <eth_type_is_arp_and_my_ip+0x2e>
 8004028:	7b43      	ldrb	r3, [r0, #13]
 800402a:	2b06      	cmp	r3, #6
 800402c:	d10d      	bne.n	800404a <eth_type_is_arp_and_my_ip+0x2e>
 800402e:	4a08      	ldr	r2, [pc, #32]	; (8004050 <eth_type_is_arp_and_my_ip+0x34>)
 8004030:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8004034:	3029      	adds	r0, #41	; 0x29
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 8004036:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800403a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800403e:	428c      	cmp	r4, r1
 8004040:	d103      	bne.n	800404a <eth_type_is_arp_and_my_ip+0x2e>
        while(i<4){
 8004042:	4283      	cmp	r3, r0
 8004044:	d1f7      	bne.n	8004036 <eth_type_is_arp_and_my_ip+0x1a>
        return(1);
 8004046:	2001      	movs	r0, #1
 8004048:	bd10      	pop	{r4, pc}
                return(0);
 800404a:	2000      	movs	r0, #0
}
 800404c:	bd10      	pop	{r4, pc}
 800404e:	bf00      	nop
 8004050:	200003bd 	.word	0x200003bd

08004054 <eth_type_is_ip_and_my_ip>:
        if (len<42){
 8004054:	2929      	cmp	r1, #41	; 0x29
uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 8004056:	b530      	push	{r4, r5, lr}
 8004058:	4603      	mov	r3, r0
        if (len<42){
 800405a:	d915      	bls.n	8004088 <eth_type_is_ip_and_my_ip+0x34>
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 800405c:	7b02      	ldrb	r2, [r0, #12]
 800405e:	2a08      	cmp	r2, #8
 8004060:	d112      	bne.n	8004088 <eth_type_is_ip_and_my_ip+0x34>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 8004062:	7b40      	ldrb	r0, [r0, #13]
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 8004064:	b980      	cbnz	r0, 8004088 <eth_type_is_ip_and_my_ip+0x34>
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 8004066:	7b9a      	ldrb	r2, [r3, #14]
 8004068:	2a45      	cmp	r2, #69	; 0x45
 800406a:	d10e      	bne.n	800408a <eth_type_is_ip_and_my_ip+0x36>
 800406c:	4907      	ldr	r1, [pc, #28]	; (800408c <eth_type_is_ip_and_my_ip+0x38>)
 800406e:	f103 021d 	add.w	r2, r3, #29
 8004072:	3321      	adds	r3, #33	; 0x21
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 8004074:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004078:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800407c:	42a5      	cmp	r5, r4
 800407e:	d104      	bne.n	800408a <eth_type_is_ip_and_my_ip+0x36>
        while(i<4){
 8004080:	429a      	cmp	r2, r3
 8004082:	d1f7      	bne.n	8004074 <eth_type_is_ip_and_my_ip+0x20>
        return(1);
 8004084:	2001      	movs	r0, #1
 8004086:	bd30      	pop	{r4, r5, pc}
                return(0);
 8004088:	2000      	movs	r0, #0
}
 800408a:	bd30      	pop	{r4, r5, pc}
 800408c:	200003bd 	.word	0x200003bd

08004090 <make_eth>:
{
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <make_eth+0x1c>)
 8004092:	1d43      	adds	r3, r0, #5
 8004094:	300b      	adds	r0, #11
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8004096:	7859      	ldrb	r1, [r3, #1]
 8004098:	f803 1c05 	strb.w	r1, [r3, #-5]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800409c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80040a0:	f803 1f01 	strb.w	r1, [r3, #1]!
        while(i<6){
 80040a4:	4283      	cmp	r3, r0
 80040a6:	d1f6      	bne.n	8004096 <make_eth+0x6>
}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	200003c1 	.word	0x200003c1

080040b0 <fill_ip_hdr_checksum>:
        buf[IP_CHECKSUM_P]=0;
 80040b0:	2200      	movs	r2, #0
        buf[IP_FLAGS_P]=0x40; // don't fragment
 80040b2:	2340      	movs	r3, #64	; 0x40
{
 80040b4:	b510      	push	{r4, lr}
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 80040b6:	2114      	movs	r1, #20
{
 80040b8:	4604      	mov	r4, r0
        buf[IP_FLAGS_P]=0x40; // don't fragment
 80040ba:	7503      	strb	r3, [r0, #20]
        buf[IP_TTL_P]=64; // ttl
 80040bc:	7583      	strb	r3, [r0, #22]
        buf[IP_CHECKSUM_P]=0;
 80040be:	7602      	strb	r2, [r0, #24]
        buf[IP_CHECKSUM_P+1]=0;
 80040c0:	7642      	strb	r2, [r0, #25]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 80040c2:	7542      	strb	r2, [r0, #21]
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 80040c4:	300e      	adds	r0, #14
 80040c6:	f7ff ff47 	bl	8003f58 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
 80040ca:	0a03      	lsrs	r3, r0, #8
 80040cc:	7623      	strb	r3, [r4, #24]
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
 80040ce:	7660      	strb	r0, [r4, #25]
 80040d0:	bd10      	pop	{r4, pc}
	...

080040d4 <make_ip>:
{
 80040d4:	b410      	push	{r4}
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <make_ip+0x24>)
 80040d8:	f100 0319 	add.w	r3, r0, #25
 80040dc:	f100 011d 	add.w	r1, r0, #29
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 80040e0:	785c      	ldrb	r4, [r3, #1]
 80040e2:	715c      	strb	r4, [r3, #5]
                buf[IP_SRC_P+i]=ipaddr[i];
 80040e4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80040e8:	f803 4f01 	strb.w	r4, [r3, #1]!
        while(i<4){
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d1f7      	bne.n	80040e0 <make_ip+0xc>
}
 80040f0:	bc10      	pop	{r4}
        fill_ip_hdr_checksum(buf);
 80040f2:	f7ff bfdd 	b.w	80040b0 <fill_ip_hdr_checksum>
 80040f6:	bf00      	nop
 80040f8:	200003bd 	.word	0x200003bd

080040fc <step_seq>:
{
 80040fc:	b510      	push	{r4, lr}
 80040fe:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8004102:	302a      	adds	r0, #42	; 0x2a
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8004104:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 8004108:	4421      	add	r1, r4
 800410a:	b289      	uxth	r1, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
 800410c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8004110:	f803 1d01 	strb.w	r1, [r3, #-1]!
                if (cp_seq){
 8004114:	b132      	cbz	r2, 8004124 <step_seq+0x28>
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 8004116:	f803 4c04 	strb.w	r4, [r3, #-4]
        while(i>0){
 800411a:	4298      	cmp	r0, r3
                rel_ack_num=rel_ack_num>>8;
 800411c:	ea4f 2111 	mov.w	r1, r1, lsr #8
        while(i>0){
 8004120:	d1f0      	bne.n	8004104 <step_seq+0x8>
}
 8004122:	bd10      	pop	{r4, pc}
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
 8004124:	f803 2c04 	strb.w	r2, [r3, #-4]
 8004128:	e7f7      	b.n	800411a <step_seq+0x1e>

0800412a <make_tcphead>:
{
 800412a:	b538      	push	{r3, r4, r5, lr}
        i=buf[TCP_DST_PORT_H_P];
 800412c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 8004130:	f890 5022 	ldrb.w	r5, [r0, #34]	; 0x22
        buf[TCP_SRC_PORT_H_P]=i;
 8004134:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 8004138:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
        i=buf[TCP_DST_PORT_L_P];
 800413c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 8004140:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
        buf[TCP_SRC_PORT_L_P]=i;
 8004144:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 8004148:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
{
 800414c:	4604      	mov	r4, r0
        step_seq(buf,rel_ack_num,cp_seq);
 800414e:	f7ff ffd5 	bl	80040fc <step_seq>
        buf[TCP_CHECKSUM_H_P]=0;
 8004152:	2300      	movs	r3, #0
 8004154:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8004158:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        buf[TCP_HEADER_LEN_P]=0x50;
 800415c:	2350      	movs	r3, #80	; 0x50
 800415e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8004162:	bd38      	pop	{r3, r4, r5, pc}

08004164 <make_arp_answer_from_request>:
{
 8004164:	b510      	push	{r4, lr}
 8004166:	4604      	mov	r4, r0
        make_eth(buf);
 8004168:	f7ff ff92 	bl	8004090 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 800416c:	2300      	movs	r3, #0
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 800416e:	2202      	movs	r2, #2
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8004170:	7523      	strb	r3, [r4, #20]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8004172:	4623      	mov	r3, r4
 8004174:	f803 2f15 	strb.w	r2, [r3, #21]!
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <make_arp_answer_from_request+0x4c>)
 800417a:	f104 011b 	add.w	r1, r4, #27
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 800417e:	7858      	ldrb	r0, [r3, #1]
 8004180:	72d8      	strb	r0, [r3, #11]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8004182:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004186:	f803 0f01 	strb.w	r0, [r3, #1]!
        while(i<6){
 800418a:	428b      	cmp	r3, r1
 800418c:	d1f7      	bne.n	800417e <make_arp_answer_from_request+0x1a>
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <make_arp_answer_from_request+0x50>)
 8004190:	f104 011f 	add.w	r1, r4, #31
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8004194:	7858      	ldrb	r0, [r3, #1]
 8004196:	72d8      	strb	r0, [r3, #11]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8004198:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800419c:	f803 0f01 	strb.w	r0, [r3, #1]!
        while(i<4){
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d1f7      	bne.n	8004194 <make_arp_answer_from_request+0x30>
        enc28j60PacketSend(42,buf); 
 80041a4:	4621      	mov	r1, r4
}
 80041a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enc28j60PacketSend(42,buf); 
 80041aa:	202a      	movs	r0, #42	; 0x2a
 80041ac:	f7ff bdd1 	b.w	8003d52 <enc28j60PacketSend>
 80041b0:	200003c1 	.word	0x200003c1
 80041b4:	200003bd 	.word	0x200003bd

080041b8 <make_echo_reply_from_request>:
{
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	460d      	mov	r5, r1
        make_eth(buf);
 80041be:	f7ff ff67 	bl	8004090 <make_eth>
        make_ip(buf);
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff ff86 	bl	80040d4 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 80041ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        enc28j60PacketSend(len,buf);
 80041d2:	4621      	mov	r1, r4
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 80041d4:	2bf7      	cmp	r3, #247	; 0xf7
                buf[ICMP_CHECKSUM_P+1]++;
 80041d6:	bf88      	it	hi
 80041d8:	f894 2025 	ldrbhi.w	r2, [r4, #37]	; 0x25
        buf[ICMP_CHECKSUM_P]+=0x08;
 80041dc:	f103 0308 	add.w	r3, r3, #8
                buf[ICMP_CHECKSUM_P+1]++;
 80041e0:	bf84      	itt	hi
 80041e2:	3201      	addhi	r2, #1
 80041e4:	f884 2025 	strbhi.w	r2, [r4, #37]	; 0x25
        buf[ICMP_CHECKSUM_P]+=0x08;
 80041e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        enc28j60PacketSend(len,buf);
 80041ec:	4628      	mov	r0, r5
}
 80041ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60PacketSend(len,buf);
 80041f2:	f7ff bdae 	b.w	8003d52 <enc28j60PacketSend>

080041f6 <get_tcp_data_len>:
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 80041f6:	7c02      	ldrb	r2, [r0, #16]
 80041f8:	7c43      	ldrb	r3, [r0, #17]
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 80041fa:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 80041fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8004202:	0902      	lsrs	r2, r0, #4
 8004204:	f64f 70ec 	movw	r0, #65516	; 0xffec
 8004208:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800420c:	4418      	add	r0, r3
 800420e:	b200      	sxth	r0, r0
        return((uint16_t)i);
 8004210:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8004214:	b280      	uxth	r0, r0
 8004216:	4770      	bx	lr

08004218 <fill_tcp_data_p>:
{
 8004218:	b510      	push	{r4, lr}
 800421a:	1a89      	subs	r1, r1, r2
 800421c:	1853      	adds	r3, r2, r1
        while ((c = pgm_read_byte(progmem_s++))) {
 800421e:	f812 4b01 	ldrb.w	r4, [r2], #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	b90c      	cbnz	r4, 800422a <fill_tcp_data_p+0x12>
}
 8004226:	4618      	mov	r0, r3
 8004228:	bd10      	pop	{r4, pc}
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
 800422a:	4403      	add	r3, r0
 800422c:	f883 4036 	strb.w	r4, [r3, #54]	; 0x36
 8004230:	e7f4      	b.n	800421c <fill_tcp_data_p+0x4>

08004232 <fill_tcp_data_len>:
{
 8004232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004234:	18d5      	adds	r5, r2, r3
 8004236:	1a8e      	subs	r6, r1, r2
 8004238:	1994      	adds	r4, r2, r6
        while (len) {
 800423a:	42aa      	cmp	r2, r5
 800423c:	b2a4      	uxth	r4, r4
 800423e:	d102      	bne.n	8004246 <fill_tcp_data_len+0x14>
        return(pos);
 8004240:	4419      	add	r1, r3
}
 8004242:	b288      	uxth	r0, r1
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 8004246:	f812 7b01 	ldrb.w	r7, [r2], #1
 800424a:	4404      	add	r4, r0
 800424c:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 8004250:	e7f2      	b.n	8004238 <fill_tcp_data_len+0x6>

08004252 <fill_tcp_data>:
{
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	4605      	mov	r5, r0
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
 8004256:	4610      	mov	r0, r2
{
 8004258:	460e      	mov	r6, r1
 800425a:	4614      	mov	r4, r2
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
 800425c:	f7fb ff76 	bl	800014c <strlen>
 8004260:	4622      	mov	r2, r4
 8004262:	b2c3      	uxtb	r3, r0
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
}
 8004268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
 800426c:	f7ff bfe1 	b.w	8004232 <fill_tcp_data_len>

08004270 <www_client_internal_datafill_callback>:
uint16_t www_client_internal_datafill_callback(uint8_t fd){
 8004270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        if (fd==www_fd){
 8004274:	4b3d      	ldr	r3, [pc, #244]	; (800436c <www_client_internal_datafill_callback+0xfc>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4283      	cmp	r3, r0
 800427a:	d174      	bne.n	8004366 <www_client_internal_datafill_callback+0xf6>
                if (browsertype==0){
 800427c:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <www_client_internal_datafill_callback+0x100>)
 800427e:	4d3d      	ldr	r5, [pc, #244]	; (8004374 <www_client_internal_datafill_callback+0x104>)
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80043ac <www_client_internal_datafill_callback+0x13c>
 8004286:	4f3c      	ldr	r7, [pc, #240]	; (8004378 <www_client_internal_datafill_callback+0x108>)
 8004288:	4e3c      	ldr	r6, [pc, #240]	; (800437c <www_client_internal_datafill_callback+0x10c>)
                        len=fill_tcp_data_p(bufptr,0,"GET ");
 800428a:	682c      	ldr	r4, [r5, #0]
                if (browsertype==0){
 800428c:	bb01      	cbnz	r1, 80042d0 <www_client_internal_datafill_callback+0x60>
                        len=fill_tcp_data_p(bufptr,0,"GET ");
 800428e:	4a3c      	ldr	r2, [pc, #240]	; (8004380 <www_client_internal_datafill_callback+0x110>)
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff ffc1 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf_p);
 8004296:	f8d8 2000 	ldr.w	r2, [r8]
 800429a:	4601      	mov	r1, r0
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ffbb 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4601      	mov	r1, r0
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff ffd3 	bl	8004252 <fill_tcp_data>
                        len=fill_tcp_data_p(bufptr,len," HTTP/1.0\r\nHost: ");
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <www_client_internal_datafill_callback+0x114>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7ff ffb1 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
 80042b6:	6832      	ldr	r2, [r6, #0]
 80042b8:	4601      	mov	r1, r0
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff ffac 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,"\r\nUser-Agent: Conf.Room/1.1\r\nAccept: text/html\r\n\r\n");
 80042c0:	4a31      	ldr	r2, [pc, #196]	; (8004388 <www_client_internal_datafill_callback+0x118>)
 80042c2:	4601      	mov	r1, r0
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff ffa7 	bl	8004218 <fill_tcp_data_p>
}
 80042ca:	b002      	add	sp, #8
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        len=fill_tcp_data_p(bufptr,0,"POST ");
 80042d0:	4a2e      	ldr	r2, [pc, #184]	; (800438c <www_client_internal_datafill_callback+0x11c>)
 80042d2:	2100      	movs	r1, #0
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff ff9f 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_urlbuf_p);
 80042da:	f8d8 2000 	ldr.w	r2, [r8]
 80042de:	4601      	mov	r1, r0
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff ff99 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_urlbuf_var);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4601      	mov	r1, r0
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7ff ffb1 	bl	8004252 <fill_tcp_data>
                        len=fill_tcp_data_p(bufptr,len," HTTP/1.1\r\nHost: ");
 80042f0:	4a27      	ldr	r2, [pc, #156]	; (8004390 <www_client_internal_datafill_callback+0x120>)
 80042f2:	4601      	mov	r1, r0
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7ff ff8f 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
 80042fa:	6832      	ldr	r2, [r6, #0]
 80042fc:	4601      	mov	r1, r0
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ff8a 	bl	8004218 <fill_tcp_data_p>
                        if (client_additionalheaderline_p){
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <www_client_internal_datafill_callback+0x124>)
                        len=fill_tcp_data_p(bufptr,len,client_hoststr);
 8004306:	4601      	mov	r1, r0
                        if (client_additionalheaderline_p){
 8004308:	681e      	ldr	r6, [r3, #0]
 800430a:	b14e      	cbz	r6, 8004320 <www_client_internal_datafill_callback+0xb0>
                                len=fill_tcp_data_p(bufptr,len,"\r\n");
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <www_client_internal_datafill_callback+0x128>)
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff ff82 	bl	8004218 <fill_tcp_data_p>
                                len=fill_tcp_data_p(bufptr,len,client_additionalheaderline_p);
 8004314:	4632      	mov	r2, r6
 8004316:	4601      	mov	r1, r0
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff ff7d 	bl	8004218 <fill_tcp_data_p>
 800431e:	4601      	mov	r1, r0
                        len=fill_tcp_data_p(bufptr,len,"\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\n");
 8004320:	4a1e      	ldr	r2, [pc, #120]	; (800439c <www_client_internal_datafill_callback+0x12c>)
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff ff78 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data_p(bufptr,len,"Content-Length: ");
 8004328:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <www_client_internal_datafill_callback+0x130>)
 800432a:	4601      	mov	r1, r0
 800432c:	4620      	mov	r0, r4
 800432e:	f7ff ff73 	bl	8004218 <fill_tcp_data_p>
 8004332:	4607      	mov	r7, r0
                        itoa(strlen(client_postval),strbuf,10);
 8004334:	4e1b      	ldr	r6, [pc, #108]	; (80043a4 <www_client_internal_datafill_callback+0x134>)
 8004336:	6830      	ldr	r0, [r6, #0]
 8004338:	f7fb ff08 	bl	800014c <strlen>
 800433c:	4669      	mov	r1, sp
 800433e:	220a      	movs	r2, #10
 8004340:	f001 ff2c 	bl	800619c <itoa>
                        len=fill_tcp_data(bufptr,len,strbuf);
 8004344:	682c      	ldr	r4, [r5, #0]
 8004346:	466a      	mov	r2, sp
 8004348:	4639      	mov	r1, r7
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff ff81 	bl	8004252 <fill_tcp_data>
                        len=fill_tcp_data_p(bufptr,len,"\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n");
 8004350:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <www_client_internal_datafill_callback+0x138>)
 8004352:	4601      	mov	r1, r0
 8004354:	4620      	mov	r0, r4
 8004356:	f7ff ff5f 	bl	8004218 <fill_tcp_data_p>
                        len=fill_tcp_data(bufptr,len,client_postval);
 800435a:	6832      	ldr	r2, [r6, #0]
 800435c:	4601      	mov	r1, r0
 800435e:	4620      	mov	r0, r4
 8004360:	f7ff ff77 	bl	8004252 <fill_tcp_data>
 8004364:	e7b1      	b.n	80042ca <www_client_internal_datafill_callback+0x5a>
        return(0);
 8004366:	2000      	movs	r0, #0
 8004368:	e7af      	b.n	80042ca <www_client_internal_datafill_callback+0x5a>
 800436a:	bf00      	nop
 800436c:	200003d6 	.word	0x200003d6
 8004370:	20000392 	.word	0x20000392
 8004374:	20000394 	.word	0x20000394
 8004378:	200003b4 	.word	0x200003b4
 800437c:	200003a0 	.word	0x200003a0
 8004380:	08006d38 	.word	0x08006d38
 8004384:	08006d3d 	.word	0x08006d3d
 8004388:	08006d4f 	.word	0x08006d4f
 800438c:	08006d82 	.word	0x08006d82
 8004390:	08006d88 	.word	0x08006d88
 8004394:	20000398 	.word	0x20000398
 8004398:	08006e03 	.word	0x08006e03
 800439c:	08006d9a 	.word	0x08006d9a
 80043a0:	08006dbf 	.word	0x08006dbf
 80043a4:	200003a4 	.word	0x200003a4
 80043a8:	08006dd0 	.word	0x08006dd0
 80043ac:	200003b0 	.word	0x200003b0

080043b0 <make_tcp_ack_from_any>:
{
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4616      	mov	r6, r2
 80043b4:	4604      	mov	r4, r0
 80043b6:	460d      	mov	r5, r1
        make_eth(buf);
 80043b8:	f7ff fe6a 	bl	8004090 <make_eth>
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 80043bc:	f046 0310 	orr.w	r3, r6, #16
        if (addflags==TCP_FLAGS_RST_V){
 80043c0:	2e04      	cmp	r6, #4
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 80043c2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
 80043c6:	d121      	bne.n	800440c <make_tcp_ack_from_any+0x5c>
                make_tcphead(buf,datlentoack,1); // no options
 80043c8:	b2a9      	uxth	r1, r5
 80043ca:	2201      	movs	r2, #1
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7ff feac 	bl	800412a <make_tcphead>
        buf[IP_TOTLEN_H_P]=j>>8;
 80043d2:	2500      	movs	r5, #0
        buf[IP_TOTLEN_L_P]=j& 0xff;
 80043d4:	2328      	movs	r3, #40	; 0x28
        make_ip(buf);
 80043d6:	4620      	mov	r0, r4
        buf[IP_TOTLEN_L_P]=j& 0xff;
 80043d8:	7463      	strb	r3, [r4, #17]
        buf[IP_TOTLEN_H_P]=j>>8;
 80043da:	7425      	strb	r5, [r4, #16]
        make_ip(buf);
 80043dc:	f7ff fe7a 	bl	80040d4 <make_ip>
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 80043e0:	2304      	movs	r3, #4
        buf[TCP_WIN_SIZE+1]=0;
 80043e2:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 80043e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 80043ea:	211c      	movs	r1, #28
 80043ec:	f104 001a 	add.w	r0, r4, #26
 80043f0:	2202      	movs	r2, #2
 80043f2:	f7ff fdb1 	bl	8003f58 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 80043f6:	0a03      	lsrs	r3, r0, #8
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 80043f8:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        buf[TCP_CHECKSUM_H_P]=j>>8;
 80043fc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8004400:	4621      	mov	r1, r4
}
 8004402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8004406:	2036      	movs	r0, #54	; 0x36
 8004408:	f7ff bca3 	b.w	8003d52 <enc28j60PacketSend>
                if (datlentoack==0){
 800440c:	2d00      	cmp	r5, #0
                        datlentoack=1;
 800440e:	bf08      	it	eq
 8004410:	2501      	moveq	r5, #1
 8004412:	e7d9      	b.n	80043c8 <make_tcp_ack_from_any+0x18>

08004414 <make_tcp_ack_with_data_noflags>:
{
 8004414:	b538      	push	{r3, r4, r5, lr}
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 8004416:	f101 0328 	add.w	r3, r1, #40	; 0x28
 800441a:	b29b      	uxth	r3, r3
        buf[IP_TOTLEN_H_P]=j>>8;
 800441c:	0a1a      	lsrs	r2, r3, #8
{
 800441e:	460d      	mov	r5, r1
        buf[IP_TOTLEN_H_P]=j>>8;
 8004420:	7402      	strb	r2, [r0, #16]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8004422:	7443      	strb	r3, [r0, #17]
{
 8004424:	4604      	mov	r4, r0
        fill_ip_hdr_checksum(buf);
 8004426:	f7ff fe43 	bl	80040b0 <fill_ip_hdr_checksum>
        buf[TCP_CHECKSUM_H_P]=0;
 800442a:	2300      	movs	r3, #0
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 800442c:	f105 011c 	add.w	r1, r5, #28
        buf[TCP_CHECKSUM_H_P]=0;
 8004430:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8004434:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8004438:	b289      	uxth	r1, r1
 800443a:	f104 001a 	add.w	r0, r4, #26
 800443e:	2202      	movs	r2, #2
 8004440:	f7ff fd8a 	bl	8003f58 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8004444:	0a03      	lsrs	r3, r0, #8
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8004446:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 800444a:	f105 0036 	add.w	r0, r5, #54	; 0x36
        buf[TCP_CHECKSUM_H_P]=j>>8;
 800444e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8004452:	4621      	mov	r1, r4
}
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8004458:	b280      	uxth	r0, r0
 800445a:	f7ff bc7a 	b.w	8003d52 <enc28j60PacketSend>
	...

08004460 <init_udp_or_www_server>:
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
 8004460:	b410      	push	{r4}
        if (myip){
 8004462:	b911      	cbnz	r1, 800446a <init_udp_or_www_server+0xa>
        if (mymac) init_mac(mymac);
 8004464:	b948      	cbnz	r0, 800447a <init_udp_or_www_server+0x1a>
}
 8004466:	bc10      	pop	{r4}
 8004468:	4770      	bx	lr
 800446a:	2300      	movs	r3, #0
                        ipaddr[i]=myip[i];
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <init_udp_or_www_server+0x20>)
 800446e:	5ccc      	ldrb	r4, [r1, r3]
 8004470:	549c      	strb	r4, [r3, r2]
 8004472:	3301      	adds	r3, #1
                while(i<4){
 8004474:	2b04      	cmp	r3, #4
 8004476:	d1fa      	bne.n	800446e <init_udp_or_www_server+0xe>
 8004478:	e7f4      	b.n	8004464 <init_udp_or_www_server+0x4>
}
 800447a:	bc10      	pop	{r4}
        if (mymac) init_mac(mymac);
 800447c:	f7ff bd9a 	b.w	8003fb4 <init_mac>
 8004480:	200003be 	.word	0x200003be

08004484 <www_server_port>:
        wwwport_h=(port>>8)&0xff;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <www_server_port+0xc>)
 8004486:	0a02      	lsrs	r2, r0, #8
 8004488:	701a      	strb	r2, [r3, #0]
        wwwport_l=(port&0xff);
 800448a:	4b02      	ldr	r3, [pc, #8]	; (8004494 <www_server_port+0x10>)
 800448c:	7018      	strb	r0, [r3, #0]
 800448e:	4770      	bx	lr
 8004490:	200003d7 	.word	0x200003d7
 8004494:	20000129 	.word	0x20000129

08004498 <make_tcp_synack_from_syn>:
{
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4604      	mov	r4, r0
        buf[IP_TOTLEN_H_P]=0;
 800449c:	2500      	movs	r5, #0
        make_eth(buf);
 800449e:	f7ff fdf7 	bl	8004090 <make_eth>
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 80044a2:	232c      	movs	r3, #44	; 0x2c
        make_ip(buf);
 80044a4:	4620      	mov	r0, r4
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 80044a6:	7463      	strb	r3, [r4, #17]
        buf[IP_TOTLEN_H_P]=0;
 80044a8:	7425      	strb	r5, [r4, #16]
        make_ip(buf);
 80044aa:	f7ff fe13 	bl	80040d4 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 80044ae:	2312      	movs	r3, #18
        make_tcphead(buf,1,0);
 80044b0:	462a      	mov	r2, r5
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 80044b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        make_tcphead(buf,1,0);
 80044b6:	4620      	mov	r0, r4
 80044b8:	2101      	movs	r1, #1
 80044ba:	f7ff fe36 	bl	800412a <make_tcphead>
        buf[TCP_SEQ_H_P+2]= seqnum; 
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <make_tcp_synack_from_syn+0x84>)
        buf[TCP_SEQ_H_P+0]= 0;
 80044c0:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        buf[TCP_SEQ_H_P+2]= seqnum; 
 80044c4:	7813      	ldrb	r3, [r2, #0]
        buf[TCP_SEQ_H_P+1]= 0;
 80044c6:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        buf[TCP_SEQ_H_P+2]= seqnum; 
 80044ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        seqnum+=3;
 80044ce:	3303      	adds	r3, #3
 80044d0:	7013      	strb	r3, [r2, #0]
        buf[TCP_OPTIONS_P+1]=4;
 80044d2:	2304      	movs	r3, #4
 80044d4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
 80044d8:	2305      	movs	r3, #5
 80044da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        buf[TCP_HEADER_LEN_P]=0x60;
 80044de:	2360      	movs	r3, #96	; 0x60
        buf[TCP_OPTIONS_P]=2;
 80044e0:	2202      	movs	r2, #2
        buf[TCP_HEADER_LEN_P]=0x60;
 80044e2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        buf[TCP_WIN_SIZE]=0x0a; // was 1400=0x578, 2560=0xa00 suggested by Andras Tucsni to be able to receive bigger packets
 80044e6:	230a      	movs	r3, #10
        buf[TCP_SEQ_H_P+3]= 0;
 80044e8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
        buf[TCP_WIN_SIZE]=0x0a; // was 1400=0x578, 2560=0xa00 suggested by Andras Tucsni to be able to receive bigger packets
 80044ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        buf[TCP_OPTIONS_P]=2;
 80044f0:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+3]=0x0;
 80044f4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
        buf[TCP_WIN_SIZE+1]=0; //
 80044f8:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 80044fc:	2120      	movs	r1, #32
 80044fe:	f104 001a 	add.w	r0, r4, #26
 8004502:	f7ff fd29 	bl	8003f58 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8004506:	0a03      	lsrs	r3, r0, #8
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8004508:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 800450c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 8004510:	4621      	mov	r1, r4
}
 8004512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 8004516:	203a      	movs	r0, #58	; 0x3a
 8004518:	f7ff bc1b 	b.w	8003d52 <enc28j60PacketSend>
 800451c:	20000127 	.word	0x20000127

08004520 <www_server_reply>:
{
 8004520:	b538      	push	{r3, r4, r5, lr}
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <www_server_reply+0x24>)
{
 8004524:	460d      	mov	r5, r1
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 8004526:	2200      	movs	r2, #0
 8004528:	f9b3 1000 	ldrsh.w	r1, [r3]
{
 800452c:	4604      	mov	r4, r0
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 800452e:	f7ff ff3f 	bl	80043b0 <make_tcp_ack_from_any>
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8004532:	2319      	movs	r3, #25
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
 8004534:	4629      	mov	r1, r5
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8004536:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
 800453a:	4620      	mov	r0, r4
}
 800453c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
 8004540:	f7ff bf68 	b.w	8004414 <make_tcp_ack_with_data_noflags>
 8004544:	200003bc 	.word	0x200003bc

08004548 <fill_buf_p>:
{
 8004548:	3a01      	subs	r2, #1
        while (len){
 800454a:	b901      	cbnz	r1, 800454e <fill_buf_p+0x6>
}
 800454c:	4770      	bx	lr
                *buf= pgm_read_byte(progmem_str_p);
 800454e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
                len--;
 8004552:	3901      	subs	r1, #1
                *buf= pgm_read_byte(progmem_str_p);
 8004554:	f800 3b01 	strb.w	r3, [r0], #1
                len--;
 8004558:	b289      	uxth	r1, r1
 800455a:	e7f6      	b.n	800454a <fill_buf_p+0x2>

0800455c <send_udp_prepare>:
{
 800455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004560:	4604      	mov	r4, r0
 8004562:	4617      	mov	r7, r2
 8004564:	460e      	mov	r6, r1
 8004566:	2200      	movs	r2, #0
 8004568:	9806      	ldr	r0, [sp, #24]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800456a:	4d1e      	ldr	r5, [pc, #120]	; (80045e4 <send_udp_prepare+0x88>)
{
 800456c:	4698      	mov	r8, r3
 800456e:	1e63      	subs	r3, r4, #1
                buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
 8004570:	5c81      	ldrb	r1, [r0, r2]
 8004572:	f803 1f01 	strb.w	r1, [r3, #1]!
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8004576:	5d51      	ldrb	r1, [r2, r5]
 8004578:	3201      	adds	r2, #1
        while(i<6){
 800457a:	2a06      	cmp	r2, #6
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800457c:	7199      	strb	r1, [r3, #6]
        while(i<6){
 800457e:	d1f7      	bne.n	8004570 <send_udp_prepare+0x14>
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8004580:	2308      	movs	r3, #8
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8004582:	2500      	movs	r5, #0
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8004584:	7323      	strb	r3, [r4, #12]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <send_udp_prepare+0x8c>)
 8004588:	f104 000e 	add.w	r0, r4, #14
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 800458c:	7365      	strb	r5, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 800458e:	2109      	movs	r1, #9
 8004590:	f7ff ffda 	bl	8004548 <fill_buf_p>
        buf[IP_ID_L_P]=ipid; ipid++;
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <send_udp_prepare+0x90>)
                buf[IP_SRC_P+i]=ipaddr[i];
 8004596:	4816      	ldr	r0, [pc, #88]	; (80045f0 <send_udp_prepare+0x94>)
        buf[IP_ID_L_P]=ipid; ipid++;
 8004598:	781a      	ldrb	r2, [r3, #0]
        buf[IP_TOTLEN_H_P]=0;
 800459a:	7425      	strb	r5, [r4, #16]
        buf[IP_ID_L_P]=ipid; ipid++;
 800459c:	74e2      	strb	r2, [r4, #19]
 800459e:	3201      	adds	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 80045a2:	2311      	movs	r3, #17
 80045a4:	462a      	mov	r2, r5
 80045a6:	75e3      	strb	r3, [r4, #23]
 80045a8:	f104 0319 	add.w	r3, r4, #25
                buf[IP_DST_P+i]=dip[i];
 80045ac:	5cb9      	ldrb	r1, [r7, r2]
 80045ae:	7159      	strb	r1, [r3, #5]
                buf[IP_SRC_P+i]=ipaddr[i];
 80045b0:	5c11      	ldrb	r1, [r2, r0]
 80045b2:	3201      	adds	r2, #1
        while(i<4){
 80045b4:	2a04      	cmp	r2, #4
                buf[IP_SRC_P+i]=ipaddr[i];
 80045b6:	f803 1f01 	strb.w	r1, [r3, #1]!
        while(i<4){
 80045ba:	d1f7      	bne.n	80045ac <send_udp_prepare+0x50>
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 80045bc:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80045c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 80045c4:	0a33      	lsrs	r3, r6, #8
 80045c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        buf[UDP_LEN_H_P]=0;
 80045ca:	2300      	movs	r3, #0
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 80045cc:	f884 8025 	strb.w	r8, [r4, #37]	; 0x25
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 80045d0:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
        buf[UDP_LEN_H_P]=0;
 80045d4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        buf[UDP_CHECKSUM_H_P]=0;
 80045d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
 80045dc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e4:	200003c2 	.word	0x200003c2
 80045e8:	08006d2f 	.word	0x08006d2f
 80045ec:	20000122 	.word	0x20000122
 80045f0:	200003be 	.word	0x200003be

080045f4 <send_udp_transmit>:
{
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	460d      	mov	r5, r1
 80045f8:	4604      	mov	r4, r0
        tmp16=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 80045fa:	f101 031c 	add.w	r3, r1, #28
 80045fe:	b29b      	uxth	r3, r3
        buf[IP_TOTLEN_L_P]=tmp16& 0xff;
 8004600:	7443      	strb	r3, [r0, #17]
        buf[IP_TOTLEN_H_P]=tmp16>>8;
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	7403      	strb	r3, [r0, #16]
        fill_ip_hdr_checksum(buf);
 8004606:	f7ff fd53 	bl	80040b0 <fill_ip_hdr_checksum>
        tmp16=UDP_HEADER_LEN+datalen;
 800460a:	f105 0308 	add.w	r3, r5, #8
 800460e:	b29b      	uxth	r3, r3
        buf[UDP_LEN_L_P]=tmp16& 0xff;
 8004610:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
        tmp16=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8004614:	f105 0110 	add.w	r1, r5, #16
        buf[UDP_LEN_H_P]=tmp16>>8;
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        tmp16=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 800461e:	b289      	uxth	r1, r1
 8004620:	f104 001a 	add.w	r0, r4, #26
 8004624:	2201      	movs	r2, #1
 8004626:	f7ff fc97 	bl	8003f58 <checksum>
        buf[UDP_CHECKSUM_L_P]=tmp16& 0xff;
 800462a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        buf[UDP_CHECKSUM_H_P]=tmp16>>8;
 800462e:	0a00      	lsrs	r0, r0, #8
 8004630:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8004634:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8004638:	4621      	mov	r1, r4
}
 800463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 800463e:	b280      	uxth	r0, r0
 8004640:	f7ff bb87 	b.w	8003d52 <enc28j60PacketSend>

08004644 <client_arp_whohas>:
{
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (ipaddr[0]==0) return; // error ipaddr not set
 8004646:	4f1b      	ldr	r7, [pc, #108]	; (80046b4 <client_arp_whohas+0x70>)
{
 8004648:	4604      	mov	r4, r0
        if (ipaddr[0]==0) return; // error ipaddr not set
 800464a:	783a      	ldrb	r2, [r7, #0]
{
 800464c:	460e      	mov	r6, r1
        if (ipaddr[0]==0) return; // error ipaddr not set
 800464e:	b382      	cbz	r2, 80046b2 <client_arp_whohas+0x6e>
 8004650:	4d19      	ldr	r5, [pc, #100]	; (80046b8 <client_arp_whohas+0x74>)
                buf[ETH_DST_MAC +i]=0xff;
 8004652:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (ipaddr[0]==0) return; // error ipaddr not set
 8004656:	462a      	mov	r2, r5
 8004658:	1e43      	subs	r3, r0, #1
 800465a:	1d41      	adds	r1, r0, #5
                buf[ETH_DST_MAC +i]=0xff;
 800465c:	f803 ef01 	strb.w	lr, [r3, #1]!
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8004660:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        while(i<6){
 8004664:	428b      	cmp	r3, r1
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8004666:	7198      	strb	r0, [r3, #6]
        while(i<6){
 8004668:	d1f8      	bne.n	800465c <client_arp_whohas+0x18>
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 800466a:	2108      	movs	r1, #8
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 800466c:	2306      	movs	r3, #6
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 800466e:	7321      	strb	r1, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8004670:	7363      	strb	r3, [r4, #13]
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <client_arp_whohas+0x78>)
 8004674:	f104 000e 	add.w	r0, r4, #14
 8004678:	f7ff ff66 	bl	8004548 <fill_buf_p>
                buf[ETH_ARP_DST_MAC_P+i]=0;
 800467c:	2100      	movs	r1, #0
 800467e:	f104 0315 	add.w	r3, r4, #21
 8004682:	f104 021b 	add.w	r2, r4, #27
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 8004686:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800468a:	f803 0f01 	strb.w	r0, [r3, #1]!
        while(i<6){
 800468e:	4293      	cmp	r3, r2
                buf[ETH_ARP_DST_MAC_P+i]=0;
 8004690:	7299      	strb	r1, [r3, #10]
        while(i<6){
 8004692:	d1f8      	bne.n	8004686 <client_arp_whohas+0x42>
 8004694:	2200      	movs	r2, #0
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
 8004696:	5cb1      	ldrb	r1, [r6, r2]
 8004698:	72d9      	strb	r1, [r3, #11]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 800469a:	5cb9      	ldrb	r1, [r7, r2]
 800469c:	3201      	adds	r2, #1
        while(i<4){
 800469e:	2a04      	cmp	r2, #4
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 80046a0:	f803 1f01 	strb.w	r1, [r3, #1]!
        while(i<4){
 80046a4:	d1f7      	bne.n	8004696 <client_arp_whohas+0x52>
        enc28j60PacketSend(0x2a,buf);
 80046a6:	4621      	mov	r1, r4
}
 80046a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        enc28j60PacketSend(0x2a,buf);
 80046ac:	202a      	movs	r0, #42	; 0x2a
 80046ae:	f7ff bb50 	b.w	8003d52 <enc28j60PacketSend>
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	200003be 	.word	0x200003be
 80046b8:	200003c1 	.word	0x200003c1
 80046bc:	08006d27 	.word	0x08006d27

080046c0 <get_mac_with_arp_wait>:
        if (arpip_state == WGW_HAVE_MAC){
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <get_mac_with_arp_wait+0xc>)
 80046c2:	7818      	ldrb	r0, [r3, #0]
}
 80046c4:	3802      	subs	r0, #2
 80046c6:	bf18      	it	ne
 80046c8:	2001      	movne	r0, #1
 80046ca:	4770      	bx	lr
 80046cc:	20000391 	.word	0x20000391

080046d0 <get_mac_with_arp>:
        client_arp_result_callback=arp_result_callback;
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <get_mac_with_arp+0x20>)
 80046d2:	601a      	str	r2, [r3, #0]
        arpip_state=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 80046d4:	2201      	movs	r2, #1
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <get_mac_with_arp+0x24>)
 80046d8:	701a      	strb	r2, [r3, #0]
        arp_reference_number=reference_number;
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <get_mac_with_arp+0x28>)
                arpip[i]=ip[i];
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <get_mac_with_arp+0x2c>)
        arp_reference_number=reference_number;
 80046de:	7019      	strb	r1, [r3, #0]
 80046e0:	2300      	movs	r3, #0
                arpip[i]=ip[i];
 80046e2:	5cc1      	ldrb	r1, [r0, r3]
 80046e4:	5499      	strb	r1, [r3, r2]
 80046e6:	3301      	adds	r3, #1
        while(i<4){
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d1fa      	bne.n	80046e2 <get_mac_with_arp+0x12>
}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000e30 	.word	0x20000e30
 80046f4:	20000391 	.word	0x20000391
 80046f8:	2000038c 	.word	0x2000038c
 80046fc:	2000038d 	.word	0x2000038d

08004700 <tcp_client_syn>:
{
 8004700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004704:	4617      	mov	r7, r2
 8004706:	2600      	movs	r6, #0
 8004708:	4604      	mov	r4, r0
 800470a:	4688      	mov	r8, r1
 800470c:	1e43      	subs	r3, r0, #1
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800470e:	4939      	ldr	r1, [pc, #228]	; (80047f4 <tcp_client_syn+0xf4>)
                buf[ETH_DST_MAC +i]=tcp_dst_mac[i]; // gw mac in local lan or host mac
 8004710:	4839      	ldr	r0, [pc, #228]	; (80047f8 <tcp_client_syn+0xf8>)
 8004712:	5c32      	ldrb	r2, [r6, r0]
 8004714:	f803 2f01 	strb.w	r2, [r3, #1]!
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8004718:	5c72      	ldrb	r2, [r6, r1]
 800471a:	3601      	adds	r6, #1
        while(i<6){
 800471c:	2e06      	cmp	r6, #6
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800471e:	719a      	strb	r2, [r3, #6]
        while(i<6){
 8004720:	d1f7      	bne.n	8004712 <tcp_client_syn+0x12>
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8004722:	2308      	movs	r3, #8
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8004724:	2500      	movs	r5, #0
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8004726:	7323      	strb	r3, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8004728:	7365      	strb	r5, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 800472a:	4a34      	ldr	r2, [pc, #208]	; (80047fc <tcp_client_syn+0xfc>)
 800472c:	f104 000e 	add.w	r0, r4, #14
 8004730:	2109      	movs	r1, #9
 8004732:	f7ff ff09 	bl	8004548 <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
 8004736:	232c      	movs	r3, #44	; 0x2c
        buf[IP_ID_L_P]=ipid; ipid++;
 8004738:	4a31      	ldr	r2, [pc, #196]	; (8004800 <tcp_client_syn+0x100>)
        buf[IP_TOTLEN_L_P]=44; // good for syn
 800473a:	7463      	strb	r3, [r4, #17]
        buf[IP_ID_L_P]=ipid; ipid++;
 800473c:	7813      	ldrb	r3, [r2, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 800473e:	4831      	ldr	r0, [pc, #196]	; (8004804 <tcp_client_syn+0x104>)
        buf[IP_ID_L_P]=ipid; ipid++;
 8004740:	74e3      	strb	r3, [r4, #19]
 8004742:	3301      	adds	r3, #1
 8004744:	7013      	strb	r3, [r2, #0]
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 8004746:	462b      	mov	r3, r5
                buf[IP_DST_P+i]=tcp_otherside_ip[i];
 8004748:	4d2f      	ldr	r5, [pc, #188]	; (8004808 <tcp_client_syn+0x108>)
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 800474a:	75e6      	strb	r6, [r4, #23]
 800474c:	f104 0219 	add.w	r2, r4, #25
                buf[IP_DST_P+i]=tcp_otherside_ip[i];
 8004750:	5d59      	ldrb	r1, [r3, r5]
 8004752:	7151      	strb	r1, [r2, #5]
                buf[IP_SRC_P+i]=ipaddr[i];
 8004754:	5c19      	ldrb	r1, [r3, r0]
 8004756:	3301      	adds	r3, #1
        while(i<4){
 8004758:	2b04      	cmp	r3, #4
                buf[IP_SRC_P+i]=ipaddr[i];
 800475a:	f802 1f01 	strb.w	r1, [r2, #1]!
        while(i<4){
 800475e:	d1f7      	bne.n	8004750 <tcp_client_syn+0x50>
        fill_ip_hdr_checksum(buf);
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fca5 	bl	80040b0 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=(dstport>>8)&0xff;
 8004766:	0a3b      	lsrs	r3, r7, #8
 8004768:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
 800476c:	230b      	movs	r3, #11
 800476e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                buf[TCP_SEQ_H_P+i]=0;
 8004772:	2300      	movs	r3, #0
        buf[TCP_DST_PORT_L_P]=(dstport&0xff);
 8004774:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 8004778:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
 800477c:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004780:	f104 012d 	add.w	r1, r4, #45	; 0x2d
                buf[TCP_SEQ_H_P+i]=0;
 8004784:	f802 3f01 	strb.w	r3, [r2, #1]!
        while(i<8){
 8004788:	428a      	cmp	r2, r1
 800478a:	d1fb      	bne.n	8004784 <tcp_client_syn+0x84>
        buf[TCP_SEQ_H_P+2]= seqnum; 
 800478c:	491f      	ldr	r1, [pc, #124]	; (800480c <tcp_client_syn+0x10c>)
        buf[TCP_WIN_SIZE+1]=0x0;
 800478e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8004792:	780a      	ldrb	r2, [r1, #0]
        buf[TCP_CHECKSUM_H_P]=0;
 8004794:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8004798:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        seqnum+=3;
 800479c:	3203      	adds	r2, #3
 800479e:	700a      	strb	r2, [r1, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 80047a0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        buf[TCP_CHECKSUM_L_P+1]=0;
 80047a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
 80047a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 80047ac:	2260      	movs	r2, #96	; 0x60
        buf[TCP_OPTIONS_P+1]=4;
 80047ae:	2304      	movs	r3, #4
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 80047b0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        buf[TCP_OPTIONS_P+1]=4;
 80047b4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 80047b8:	2202      	movs	r2, #2
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 80047ba:	23ee      	movs	r3, #238	; 0xee
        buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
 80047bc:	2103      	movs	r1, #3
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 80047be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
 80047c2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 80047c6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        buf[TCP_OPTIONS_P]=2;
 80047ca:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
 80047ce:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
 80047d2:	2120      	movs	r1, #32
 80047d4:	f104 001a 	add.w	r0, r4, #26
 80047d8:	f7ff fbbe 	bl	8003f58 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 80047dc:	0a03      	lsrs	r3, r0, #8
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 80047de:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 80047e2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 80047e6:	4621      	mov	r1, r4
}
 80047e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 80047ec:	203a      	movs	r0, #58	; 0x3a
 80047ee:	f7ff bab0 	b.w	8003d52 <enc28j60PacketSend>
 80047f2:	bf00      	nop
 80047f4:	200003c2 	.word	0x200003c2
 80047f8:	200003cb 	.word	0x200003cb
 80047fc:	08006d2f 	.word	0x08006d2f
 8004800:	20000122 	.word	0x20000122
 8004804:	200003be 	.word	0x200003be
 8004808:	200003d2 	.word	0x200003d2
 800480c:	20000127 	.word	0x20000127

08004810 <client_tcp_req>:
{
 8004810:	b530      	push	{r4, r5, lr}
        client_tcp_result_callback=result_callback;
 8004812:	4d11      	ldr	r5, [pc, #68]	; (8004858 <client_tcp_req+0x48>)
{
 8004814:	9c03      	ldr	r4, [sp, #12]
        client_tcp_result_callback=result_callback;
 8004816:	6028      	str	r0, [r5, #0]
        client_tcp_datafill_callback=datafill_callback;
 8004818:	4810      	ldr	r0, [pc, #64]	; (800485c <client_tcp_req+0x4c>)
 800481a:	6001      	str	r1, [r0, #0]
 800481c:	2100      	movs	r1, #0
        while(i<4){tcp_otherside_ip[i]=dstip[i];i++;}
 800481e:	4810      	ldr	r0, [pc, #64]	; (8004860 <client_tcp_req+0x50>)
 8004820:	5c5d      	ldrb	r5, [r3, r1]
 8004822:	540d      	strb	r5, [r1, r0]
 8004824:	3101      	adds	r1, #1
 8004826:	2904      	cmp	r1, #4
 8004828:	d1fa      	bne.n	8004820 <client_tcp_req+0x10>
 800482a:	2300      	movs	r3, #0
        while(i<6){tcp_dst_mac[i]=dstmac[i];i++;}
 800482c:	490d      	ldr	r1, [pc, #52]	; (8004864 <client_tcp_req+0x54>)
 800482e:	5ce0      	ldrb	r0, [r4, r3]
 8004830:	5458      	strb	r0, [r3, r1]
 8004832:	3301      	adds	r3, #1
 8004834:	2b06      	cmp	r3, #6
 8004836:	d1fa      	bne.n	800482e <client_tcp_req+0x1e>
        tcp_client_port=port;
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <client_tcp_req+0x58>)
 800483a:	801a      	strh	r2, [r3, #0]
        tcp_client_state=1; // send a syn
 800483c:	2201      	movs	r2, #1
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <client_tcp_req+0x5c>)
 8004840:	701a      	strb	r2, [r3, #0]
        tcp_fd++;
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <client_tcp_req+0x60>)
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	3201      	adds	r2, #1
 8004848:	b2d2      	uxtb	r2, r2
        if (tcp_fd>7){
 800484a:	2a07      	cmp	r2, #7
                tcp_fd=0;
 800484c:	bf88      	it	hi
 800484e:	2200      	movhi	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
}
 8004852:	7818      	ldrb	r0, [r3, #0]
 8004854:	bd30      	pop	{r4, r5, pc}
 8004856:	bf00      	nop
 8004858:	200003ac 	.word	0x200003ac
 800485c:	200003a8 	.word	0x200003a8
 8004860:	200003d2 	.word	0x200003d2
 8004864:	200003cb 	.word	0x200003cb
 8004868:	200003c8 	.word	0x200003c8
 800486c:	200003ca 	.word	0x200003ca
 8004870:	200003d1 	.word	0x200003d1

08004874 <client_browse_url>:
// Basically 2xx is success and any 5xx, 4xx is a failure.
// The string buffers to which urlbuf_varpart and hoststr are pointing
// must not be changed until the callback is executed.
//
void client_browse_url(const char *urlbuf_p,char *urlbuf_varpart,const char *hoststr,void (*callback)(uint16_t,uint16_t,uint16_t),uint8_t *dstip,uint8_t *dstmac)
{
 8004874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004876:	4607      	mov	r7, r0
 8004878:	460e      	mov	r6, r1
 800487a:	4615      	mov	r5, r2
 800487c:	461c      	mov	r4, r3
        if (!enc28j60linkup())return;
 800487e:	f7ff fa61 	bl	8003d44 <enc28j60linkup>
 8004882:	b1a0      	cbz	r0, 80048ae <client_browse_url+0x3a>
        client_urlbuf_p=urlbuf_p;
        client_urlbuf_var=urlbuf_varpart;
        client_hoststr=hoststr;
        browsertype=0;
 8004884:	2200      	movs	r2, #0
        client_urlbuf_p=urlbuf_p;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <client_browse_url+0x40>)
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
 8004888:	490b      	ldr	r1, [pc, #44]	; (80048b8 <client_browse_url+0x44>)
        client_urlbuf_p=urlbuf_p;
 800488a:	601f      	str	r7, [r3, #0]
        client_urlbuf_var=urlbuf_varpart;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <client_browse_url+0x48>)
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
 800488e:	480c      	ldr	r0, [pc, #48]	; (80048c0 <client_browse_url+0x4c>)
        client_urlbuf_var=urlbuf_varpart;
 8004890:	601e      	str	r6, [r3, #0]
        client_hoststr=hoststr;
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <client_browse_url+0x50>)
 8004894:	601d      	str	r5, [r3, #0]
        browsertype=0;
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <client_browse_url+0x54>)
 8004898:	701a      	strb	r2, [r3, #0]
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
 800489a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        client_browser_callback=callback;
 800489c:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <client_browse_url+0x58>)
 800489e:	6014      	str	r4, [r2, #0]
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2250      	movs	r2, #80	; 0x50
 80048a4:	9b08      	ldr	r3, [sp, #32]
 80048a6:	f7ff ffb3 	bl	8004810 <client_tcp_req>
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <client_browse_url+0x5c>)
 80048ac:	7018      	strb	r0, [r3, #0]
}
 80048ae:	b003      	add	sp, #12
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200003b0 	.word	0x200003b0
 80048b8:	08004271 	.word	0x08004271
 80048bc:	200003b4 	.word	0x200003b4
 80048c0:	08003ec9 	.word	0x08003ec9
 80048c4:	200003a0 	.word	0x200003a0
 80048c8:	20000392 	.word	0x20000392
 80048cc:	2000039c 	.word	0x2000039c
 80048d0:	200003d6 	.word	0x200003d6

080048d4 <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	4604      	mov	r4, r0
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
 80048da:	460f      	mov	r7, r1
 80048dc:	2900      	cmp	r1, #0
 80048de:	d13f      	bne.n	8004960 <packetloop_arp_icmp_tcp+0x8c>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
 80048e0:	4da8      	ldr	r5, [pc, #672]	; (8004b84 <packetloop_arp_icmp_tcp+0x2b0>)
 80048e2:	4ea9      	ldr	r6, [pc, #676]	; (8004b88 <packetloop_arp_icmp_tcp+0x2b4>)
 80048e4:	782b      	ldrb	r3, [r5, #0]
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d109      	bne.n	80048fe <packetloop_arp_icmp_tcp+0x2a>
 80048ea:	f9b6 3000 	ldrsh.w	r3, [r6]
 80048ee:	b9b3      	cbnz	r3, 800491e <packetloop_arp_icmp_tcp+0x4a>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
 80048f0:	f7ff fa28 	bl	8003d44 <enc28j60linkup>
 80048f4:	b118      	cbz	r0, 80048fe <packetloop_arp_icmp_tcp+0x2a>
 80048f6:	49a5      	ldr	r1, [pc, #660]	; (8004b8c <packetloop_arp_icmp_tcp+0x2b8>)
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff fea3 	bl	8004644 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
 80048fe:	782b      	ldrb	r3, [r5, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10c      	bne.n	800491e <packetloop_arp_icmp_tcp+0x4a>
 8004904:	f7ff fa1e 	bl	8003d44 <enc28j60linkup>
 8004908:	b148      	cbz	r0, 800491e <packetloop_arp_icmp_tcp+0x4a>
                        client_arp_whohas(buf,arpip);
 800490a:	49a0      	ldr	r1, [pc, #640]	; (8004b8c <packetloop_arp_icmp_tcp+0x2b8>)
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fe99 	bl	8004644 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
 8004912:	782b      	ldrb	r3, [r5, #0]
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	702b      	strb	r3, [r5, #0]
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
 800491a:	2300      	movs	r3, #0
 800491c:	8033      	strh	r3, [r6, #0]
                }
                arp_delaycnt++;
 800491e:	8833      	ldrh	r3, [r6, #0]
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
 8004920:	4d9b      	ldr	r5, [pc, #620]	; (8004b90 <packetloop_arp_icmp_tcp+0x2bc>)
                arp_delaycnt++;
 8004922:	3301      	adds	r3, #1
 8004924:	8033      	strh	r3, [r6, #0]
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
 8004926:	782b      	ldrb	r3, [r5, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <packetloop_arp_icmp_tcp+0x5c>
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
 800492c:	2500      	movs	r5, #0
 800492e:	e039      	b.n	80049a4 <packetloop_arp_icmp_tcp+0xd0>
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
 8004930:	f7ff fa08 	bl	8003d44 <enc28j60linkup>
 8004934:	2800      	cmp	r0, #0
 8004936:	d0f9      	beq.n	800492c <packetloop_arp_icmp_tcp+0x58>
                        tcp_client_state=2;
 8004938:	2302      	movs	r3, #2
                        tcpclient_src_port_l++; // allocate a new port
 800493a:	4a96      	ldr	r2, [pc, #600]	; (8004b94 <packetloop_arp_icmp_tcp+0x2c0>)
                        tcp_client_state=2;
 800493c:	702b      	strb	r3, [r5, #0]
                        tcpclient_src_port_l++; // allocate a new port
 800493e:	7813      	ldrb	r3, [r2, #0]
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
 8004940:	4620      	mov	r0, r4
                        tcpclient_src_port_l++; // allocate a new port
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	7013      	strb	r3, [r2, #0]
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
 8004948:	4a93      	ldr	r2, [pc, #588]	; (8004b98 <packetloop_arp_icmp_tcp+0x2c4>)
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	7811      	ldrb	r1, [r2, #0]
 8004950:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8004954:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <packetloop_arp_icmp_tcp+0x2c8>)
 8004956:	b2c9      	uxtb	r1, r1
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	f7ff fed1 	bl	8004700 <tcp_client_syn>
 800495e:	e7e5      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
        if(eth_type_is_arp_and_my_ip(buf,plen)){
 8004960:	f7ff fb5c 	bl	800401c <eth_type_is_arp_and_my_ip>
 8004964:	b308      	cbz	r0, 80049aa <packetloop_arp_icmp_tcp+0xd6>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 8004966:	7d63      	ldrb	r3, [r4, #21]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d102      	bne.n	8004972 <packetloop_arp_icmp_tcp+0x9e>
                        make_arp_answer_from_request(buf);
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff fbf9 	bl	8004164 <make_arp_answer_from_request>
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
 8004972:	4e84      	ldr	r6, [pc, #528]	; (8004b84 <packetloop_arp_icmp_tcp+0x2b0>)
 8004974:	7833      	ldrb	r3, [r6, #0]
 8004976:	071b      	lsls	r3, r3, #28
 8004978:	d5d8      	bpl.n	800492c <packetloop_arp_icmp_tcp+0x58>
 800497a:	7d67      	ldrb	r7, [r4, #21]
 800497c:	2f02      	cmp	r7, #2
 800497e:	d1d5      	bne.n	800492c <packetloop_arp_icmp_tcp+0x58>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
 8004980:	2204      	movs	r2, #4
 8004982:	4982      	ldr	r1, [pc, #520]	; (8004b8c <packetloop_arp_icmp_tcp+0x2b8>)
 8004984:	f104 001c 	add.w	r0, r4, #28
 8004988:	f001 fc2e 	bl	80061e8 <memcmp>
 800498c:	4605      	mov	r5, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d1cc      	bne.n	800492c <packetloop_arp_icmp_tcp+0x58>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
 8004992:	4b83      	ldr	r3, [pc, #524]	; (8004ba0 <packetloop_arp_icmp_tcp+0x2cc>)
 8004994:	4983      	ldr	r1, [pc, #524]	; (8004ba4 <packetloop_arp_icmp_tcp+0x2d0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f104 0216 	add.w	r2, r4, #22
 800499c:	7809      	ldrb	r1, [r1, #0]
 800499e:	487b      	ldr	r0, [pc, #492]	; (8004b8c <packetloop_arp_icmp_tcp+0x2b8>)
 80049a0:	4798      	blx	r3
                        arpip_state=WGW_HAVE_MAC;
 80049a2:	7037      	strb	r7, [r6, #0]
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
 80049a4:	4628      	mov	r0, r5
 80049a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 80049aa:	4639      	mov	r1, r7
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fb51 	bl	8004054 <eth_type_is_ip_and_my_ip>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0ba      	beq.n	800492c <packetloop_arp_icmp_tcp+0x58>
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 80049b6:	7de3      	ldrb	r3, [r4, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10e      	bne.n	80049da <packetloop_arp_icmp_tcp+0x106>
 80049bc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d1b3      	bne.n	800492c <packetloop_arp_icmp_tcp+0x58>
                if (icmp_callback){
 80049c4:	4b78      	ldr	r3, [pc, #480]	; (8004ba8 <packetloop_arp_icmp_tcp+0x2d4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	b113      	cbz	r3, 80049d0 <packetloop_arp_icmp_tcp+0xfc>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
 80049ca:	f104 001a 	add.w	r0, r4, #26
 80049ce:	4798      	blx	r3
                make_echo_reply_from_request(buf,plen);
 80049d0:	4639      	mov	r1, r7
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff fbf0 	bl	80041b8 <make_echo_reply_from_request>
 80049d8:	e7a8      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 80049da:	2f35      	cmp	r7, #53	; 0x35
 80049dc:	d9a6      	bls.n	800492c <packetloop_arp_icmp_tcp+0x58>
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d1a4      	bne.n	800492c <packetloop_arp_icmp_tcp+0x58>
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 80049e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80049e6:	2b0b      	cmp	r3, #11
 80049e8:	f040 809d 	bne.w	8004b26 <packetloop_arp_icmp_tcp+0x252>
                bufptr=buf; 
 80049ec:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <packetloop_arp_icmp_tcp+0x2d8>)
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
 80049ee:	4970      	ldr	r1, [pc, #448]	; (8004bb0 <packetloop_arp_icmp_tcp+0x2dc>)
 80049f0:	4620      	mov	r0, r4
                bufptr=buf; 
 80049f2:	601c      	str	r4, [r3, #0]
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
 80049f4:	f7ff fb00 	bl	8003ff8 <check_ip_message_is_from>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d097      	beq.n	800492c <packetloop_arp_icmp_tcp+0x58>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 80049fc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004a00:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004b90 <packetloop_arp_icmp_tcp+0x2bc>
 8004a04:	f011 0f04 	tst.w	r1, #4
 8004a08:	d00d      	beq.n	8004a26 <packetloop_arp_icmp_tcp+0x152>
                        if (client_tcp_result_callback){
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <packetloop_arp_icmp_tcp+0x2e0>)
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	b135      	cbz	r5, 8004a1e <packetloop_arp_icmp_tcp+0x14a>
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 8004a10:	2300      	movs	r3, #0
 8004a12:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004a16:	461a      	mov	r2, r3
 8004a18:	2103      	movs	r1, #3
 8004a1a:	0940      	lsrs	r0, r0, #5
 8004a1c:	47a8      	blx	r5
                        tcp_client_state=6;
 8004a1e:	2306      	movs	r3, #6
                        tcp_client_state=7;
 8004a20:	f888 3000 	strb.w	r3, [r8]
 8004a24:	e782      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
                len=get_tcp_data_len(buf);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff fbe5 	bl	80041f6 <get_tcp_data_len>
                if (tcp_client_state==2){
 8004a2c:	f898 3000 	ldrb.w	r3, [r8]
                len=get_tcp_data_len(buf);
 8004a30:	4606      	mov	r6, r0
                if (tcp_client_state==2){
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d128      	bne.n	8004a88 <packetloop_arp_icmp_tcp+0x1b4>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
 8004a36:	f001 0312 	and.w	r3, r1, #18
 8004a3a:	2b12      	cmp	r3, #18
 8004a3c:	d116      	bne.n	8004a6c <packetloop_arp_icmp_tcp+0x198>
                                make_tcp_ack_from_any(buf,0,0);
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4620      	mov	r0, r4
 8004a42:	4611      	mov	r1, r2
 8004a44:	f7ff fcb4 	bl	80043b0 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 8004a48:	2318      	movs	r3, #24
 8004a4a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
                                if (client_tcp_datafill_callback){
 8004a4e:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <packetloop_arp_icmp_tcp+0x2e4>)
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	b121      	cbz	r1, 8004a5e <packetloop_arp_icmp_tcp+0x18a>
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
 8004a54:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8004a58:	0940      	lsrs	r0, r0, #5
 8004a5a:	4788      	blx	r1
 8004a5c:	4601      	mov	r1, r0
                                tcp_client_state=3;
 8004a5e:	2303      	movs	r3, #3
                                make_tcp_ack_with_data_noflags(buf,len);
 8004a60:	4620      	mov	r0, r4
                                tcp_client_state=3;
 8004a62:	f888 3000 	strb.w	r3, [r8]
                                make_tcp_ack_with_data_noflags(buf,len);
 8004a66:	f7ff fcd5 	bl	8004414 <make_tcp_ack_with_data_noflags>
 8004a6a:	e75f      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
                                tcp_client_state=1; // retry
 8004a6c:	2301      	movs	r3, #1
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8004a6e:	06cf      	lsls	r7, r1, #27
                                        len=0;
 8004a70:	bf4e      	itee	mi
 8004a72:	2100      	movmi	r1, #0
                                len++;
 8004a74:	18c1      	addpl	r1, r0, r3
 8004a76:	b289      	uxthpl	r1, r1
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8004a78:	2204      	movs	r2, #4
 8004a7a:	b209      	sxth	r1, r1
 8004a7c:	4620      	mov	r0, r4
                                tcp_client_state=1; // retry
 8004a7e:	f888 3000 	strb.w	r3, [r8]
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8004a82:	f7ff fc95 	bl	80043b0 <make_tcp_ack_from_any>
 8004a86:	e751      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
                if (tcp_client_state==3 && len>0){ 
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d125      	bne.n	8004ad8 <packetloop_arp_icmp_tcp+0x204>
 8004a8c:	b320      	cbz	r0, 8004ad8 <packetloop_arp_icmp_tcp+0x204>
                        tcp_client_state=4;
 8004a8e:	2304      	movs	r3, #4
 8004a90:	f888 3000 	strb.w	r3, [r8]
                        if (client_tcp_result_callback){
 8004a94:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <packetloop_arp_icmp_tcp+0x2e0>)
 8004a96:	681d      	ldr	r5, [r3, #0]
 8004a98:	b1f5      	cbz	r5, 8004ad8 <packetloop_arp_icmp_tcp+0x204>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8004a9a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
                                if (tcpstart>plen-8){
 8004a9e:	1ffb      	subs	r3, r7, #7
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8004aa0:	0912      	lsrs	r2, r2, #4
 8004aa2:	0092      	lsls	r2, r2, #2
 8004aa4:	3222      	adds	r2, #34	; 0x22
                                if (tcpstart>plen-8){
 8004aa6:	4293      	cmp	r3, r2
                                        tcpstart=plen-8; // dummy but save
 8004aa8:	bfdc      	itt	le
 8004aaa:	f1a7 0208 	suble.w	r2, r7, #8
 8004aae:	b292      	uxthle	r2, r2
                                if (tcpstart+len>plen){
 8004ab0:	1813      	adds	r3, r2, r0
 8004ab2:	429f      	cmp	r7, r3
 8004ab4:	bfa8      	it	ge
 8004ab6:	4603      	movge	r3, r0
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8004ab8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
                                        save_len=plen-tcpstart;
 8004abc:	bfbc      	itt	lt
 8004abe:	1abb      	sublt	r3, r7, r2
 8004ac0:	b29b      	uxthlt	r3, r3
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	0940      	lsrs	r0, r0, #5
 8004ac6:	47a8      	blx	r5
                        if (send_fin){
 8004ac8:	b130      	cbz	r0, 8004ad8 <packetloop_arp_icmp_tcp+0x204>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8004aca:	2209      	movs	r2, #9
 8004acc:	b231      	sxth	r1, r6
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff fc6e 	bl	80043b0 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
 8004ad4:	2305      	movs	r3, #5
 8004ad6:	e7a3      	b.n	8004a20 <packetloop_arp_icmp_tcp+0x14c>
                if(tcp_client_state==5){
 8004ad8:	f898 3000 	ldrb.w	r3, [r8]
 8004adc:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d102      	bne.n	8004aea <packetloop_arp_icmp_tcp+0x216>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8004ae4:	06ee      	lsls	r6, r5, #27
 8004ae6:	d49a      	bmi.n	8004a1e <packetloop_arp_icmp_tcp+0x14a>
 8004ae8:	e720      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
                if(tcp_client_state==6){
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d10b      	bne.n	8004b06 <packetloop_arp_icmp_tcp+0x232>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
 8004aee:	06ed      	lsls	r5, r5, #27
 8004af0:	bf4e      	itee	mi
 8004af2:	2100      	movmi	r1, #0
                        len++;
 8004af4:	1c71      	addpl	r1, r6, #1
 8004af6:	b289      	uxthpl	r1, r1
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8004af8:	2204      	movs	r2, #4
 8004afa:	b209      	sxth	r1, r1
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff fc57 	bl	80043b0 <make_tcp_ack_from_any>
                        tcp_client_state=7;
 8004b02:	2307      	movs	r3, #7
 8004b04:	e78c      	b.n	8004a20 <packetloop_arp_icmp_tcp+0x14c>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8004b06:	f015 0501 	ands.w	r5, r5, #1
 8004b0a:	d003      	beq.n	8004b14 <packetloop_arp_icmp_tcp+0x240>
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
 8004b0c:	1c71      	adds	r1, r6, #1
 8004b0e:	2201      	movs	r2, #1
 8004b10:	b209      	sxth	r1, r1
 8004b12:	e7dc      	b.n	8004ace <packetloop_arp_icmp_tcp+0x1fa>
                if (len>0){
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	f43f af09 	beq.w	800492c <packetloop_arp_icmp_tcp+0x58>
                        make_tcp_ack_from_any(buf,len,0);
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	b231      	sxth	r1, r6
                                        make_tcp_ack_from_any(buf,0,0);
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fc46 	bl	80043b0 <make_tcp_ack_from_any>
 8004b24:	e73e      	b.n	80049a4 <packetloop_arp_icmp_tcp+0xd0>
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
 8004b26:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <packetloop_arp_icmp_tcp+0x2e8>)
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f47f aefe 	bne.w	800492c <packetloop_arp_icmp_tcp+0x58>
 8004b30:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <packetloop_arp_icmp_tcp+0x2ec>)
 8004b32:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	f47f aef7 	bne.w	800492c <packetloop_arp_icmp_tcp+0x58>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 8004b3e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004b42:	0788      	lsls	r0, r1, #30
 8004b44:	d503      	bpl.n	8004b4e <packetloop_arp_icmp_tcp+0x27a>
                        make_tcp_synack_from_syn(buf);
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff fca6 	bl	8004498 <make_tcp_synack_from_syn>
 8004b4c:	e6ee      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8004b4e:	06ca      	lsls	r2, r1, #27
 8004b50:	f57f aeec 	bpl.w	800492c <packetloop_arp_icmp_tcp+0x58>
                        info_data_len=get_tcp_data_len(buf);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff fb4e 	bl	80041f6 <get_tcp_data_len>
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <packetloop_arp_icmp_tcp+0x2f0>)
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	8018      	strh	r0, [r3, #0]
                        if (info_data_len==0){
 8004b60:	b928      	cbnz	r0, 8004b6e <packetloop_arp_icmp_tcp+0x29a>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8004b62:	07cb      	lsls	r3, r1, #31
 8004b64:	f57f aee2 	bpl.w	800492c <packetloop_arp_icmp_tcp+0x58>
                                        make_tcp_ack_from_any(buf,0,0);
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	e7d7      	b.n	8004b1e <packetloop_arp_icmp_tcp+0x24a>
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 8004b6e:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
                        if (len>plen-8){
 8004b72:	3f07      	subs	r7, #7
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 8004b74:	092d      	lsrs	r5, r5, #4
 8004b76:	00ad      	lsls	r5, r5, #2
 8004b78:	3522      	adds	r5, #34	; 0x22
                        if (len>plen-8){
 8004b7a:	42af      	cmp	r7, r5
 8004b7c:	f73f af12 	bgt.w	80049a4 <packetloop_arp_icmp_tcp+0xd0>
 8004b80:	e6d4      	b.n	800492c <packetloop_arp_icmp_tcp+0x58>
 8004b82:	bf00      	nop
 8004b84:	20000391 	.word	0x20000391
 8004b88:	20000120 	.word	0x20000120
 8004b8c:	2000038d 	.word	0x2000038d
 8004b90:	200003ca 	.word	0x200003ca
 8004b94:	20000128 	.word	0x20000128
 8004b98:	200003d1 	.word	0x200003d1
 8004b9c:	200003c8 	.word	0x200003c8
 8004ba0:	20000e30 	.word	0x20000e30
 8004ba4:	2000038c 	.word	0x2000038c
 8004ba8:	200003b8 	.word	0x200003b8
 8004bac:	20000394 	.word	0x20000394
 8004bb0:	200003d2 	.word	0x200003d2
 8004bb4:	200003ac 	.word	0x200003ac
 8004bb8:	200003a8 	.word	0x200003a8
 8004bbc:	200003d7 	.word	0x200003d7
 8004bc0:	20000129 	.word	0x20000129
 8004bc4:	200003bc 	.word	0x200003bc

08004bc8 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bc8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bcc:	4905      	ldr	r1, [pc, #20]	; (8004be4 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bd0:	68ca      	ldr	r2, [r1, #12]
 8004bd2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
 8004bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <NVIC_SystemReset+0x16>
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	05fa0004 	.word	0x05fa0004

08004bec <arpresolver_result_callback>:
}

void arpresolver_result_callback(uint8_t *ip ,uint8_t transaction_number,uint8_t *mac) {
    uint8_t i=0;

    if (transaction_number==TRANS_NUM_GWMAC)
 8004bec:	2901      	cmp	r1, #1
 8004bee:	d106      	bne.n	8004bfe <arpresolver_result_callback+0x12>
 8004bf0:	2300      	movs	r3, #0
    	while(i<6) {
    		gwmac[i]=mac[i];i++;
 8004bf2:	4903      	ldr	r1, [pc, #12]	; (8004c00 <arpresolver_result_callback+0x14>)
 8004bf4:	5cd0      	ldrb	r0, [r2, r3]
 8004bf6:	5458      	strb	r0, [r3, r1]
 8004bf8:	3301      	adds	r3, #1
    	while(i<6) {
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d1fa      	bne.n	8004bf4 <arpresolver_result_callback+0x8>
 8004bfe:	4770      	bx	lr
 8004c00:	20001386 	.word	0x20001386

08004c04 <browserresult_callback>:
void browserresult_callback(uint16_t webstatuscode,uint16_t datapos __attribute__((unused)), uint16_t len __attribute__((unused))) {
 8004c04:	b500      	push	{lr}
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <browserresult_callback+0x34>)
 8004c08:	b09b      	sub	sp, #108	; 0x6c
		web_client_sendok++;
 8004c0a:	781a      	ldrb	r2, [r3, #0]
	if (webstatuscode==200) {
 8004c0c:	28c8      	cmp	r0, #200	; 0xc8
		snprintf(str,sizeof(str),"200:OK\r\n");
 8004c0e:	bf0c      	ite	eq
 8004c10:	490a      	ldreq	r1, [pc, #40]	; (8004c3c <browserresult_callback+0x38>)
		snprintf(str,sizeof(str),"Server response 404\r\n");
 8004c12:	490b      	ldrne	r1, [pc, #44]	; (8004c40 <browserresult_callback+0x3c>)
		web_client_sendok++;
 8004c14:	3201      	adds	r2, #1
		snprintf(str,sizeof(str),"Server response 404\r\n");
 8004c16:	a801      	add	r0, sp, #4
		web_client_sendok++;
 8004c18:	701a      	strb	r2, [r3, #0]
		snprintf(str,sizeof(str),"Server response 404\r\n");
 8004c1a:	f001 fb29 	bl	8006270 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004c1e:	a801      	add	r0, sp, #4
 8004c20:	f7fb fa94 	bl	800014c <strlen>
 8004c24:	2364      	movs	r3, #100	; 0x64
 8004c26:	b282      	uxth	r2, r0
 8004c28:	a901      	add	r1, sp, #4
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <browserresult_callback+0x40>)
 8004c2c:	f7fd f950 	bl	8001ed0 <HAL_UART_Transmit>
}
 8004c30:	b01b      	add	sp, #108	; 0x6c
 8004c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c36:	bf00      	nop
 8004c38:	200003de 	.word	0x200003de
 8004c3c:	08006f8d 	.word	0x08006f8d
 8004c40:	08006f96 	.word	0x08006f96
 8004c44:	20001250 	.word	0x20001250

08004c48 <PrintIP>:
void PrintIP(void) {
 8004c48:	b510      	push	{r4, lr}
	snprintf(str,sizeof(str),"my ip: %03u.%03u.%03u.%03u\n\r",ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3]);
 8004c4a:	4a2e      	ldr	r2, [pc, #184]	; (8004d04 <PrintIP+0xbc>)
void PrintIP(void) {
 8004c4c:	b09e      	sub	sp, #120	; 0x78
	snprintf(str,sizeof(str),"my ip: %03u.%03u.%03u.%03u\n\r",ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3]);
 8004c4e:	78d1      	ldrb	r1, [r2, #3]
 8004c50:	7813      	ldrb	r3, [r2, #0]
 8004c52:	9102      	str	r1, [sp, #8]
 8004c54:	7891      	ldrb	r1, [r2, #2]
 8004c56:	a805      	add	r0, sp, #20
 8004c58:	9101      	str	r1, [sp, #4]
 8004c5a:	7852      	ldrb	r2, [r2, #1]
 8004c5c:	2164      	movs	r1, #100	; 0x64
 8004c5e:	9200      	str	r2, [sp, #0]
 8004c60:	4a29      	ldr	r2, [pc, #164]	; (8004d08 <PrintIP+0xc0>)
 8004c62:	f001 fad1 	bl	8006208 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004c66:	a805      	add	r0, sp, #20
 8004c68:	f7fb fa70 	bl	800014c <strlen>
 8004c6c:	4c27      	ldr	r4, [pc, #156]	; (8004d0c <PrintIP+0xc4>)
 8004c6e:	b282      	uxth	r2, r0
 8004c70:	a905      	add	r1, sp, #20
 8004c72:	2364      	movs	r3, #100	; 0x64
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7fd f92b 	bl	8001ed0 <HAL_UART_Transmit>
	snprintf(str,sizeof(str),"dest ip: %03u.%03u.%03u.%03u\n\r",destip[0],destip[1],destip[2],destip[3]);
 8004c7a:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <PrintIP+0xc8>)
 8004c7c:	a805      	add	r0, sp, #20
 8004c7e:	78d1      	ldrb	r1, [r2, #3]
 8004c80:	7813      	ldrb	r3, [r2, #0]
 8004c82:	9102      	str	r1, [sp, #8]
 8004c84:	7891      	ldrb	r1, [r2, #2]
 8004c86:	9101      	str	r1, [sp, #4]
 8004c88:	7852      	ldrb	r2, [r2, #1]
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	9200      	str	r2, [sp, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <PrintIP+0xcc>)
 8004c90:	f001 faba 	bl	8006208 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004c94:	a805      	add	r0, sp, #20
 8004c96:	f7fb fa59 	bl	800014c <strlen>
 8004c9a:	a905      	add	r1, sp, #20
 8004c9c:	b282      	uxth	r2, r0
 8004c9e:	2364      	movs	r3, #100	; 0x64
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f7fd f915 	bl	8001ed0 <HAL_UART_Transmit>
	snprintf(str,sizeof(str),"gw ip: %03u.%03u.%03u.%03u\n\r",gwip[0],gwip[1],gwip[2],gwip[3]);
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <PrintIP+0xd0>)
 8004ca8:	a805      	add	r0, sp, #20
 8004caa:	78d1      	ldrb	r1, [r2, #3]
 8004cac:	7813      	ldrb	r3, [r2, #0]
 8004cae:	9102      	str	r1, [sp, #8]
 8004cb0:	7891      	ldrb	r1, [r2, #2]
 8004cb2:	9101      	str	r1, [sp, #4]
 8004cb4:	7852      	ldrb	r2, [r2, #1]
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	9200      	str	r2, [sp, #0]
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <PrintIP+0xd4>)
 8004cbc:	f001 faa4 	bl	8006208 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004cc0:	a805      	add	r0, sp, #20
 8004cc2:	f7fb fa43 	bl	800014c <strlen>
 8004cc6:	a905      	add	r1, sp, #20
 8004cc8:	b282      	uxth	r2, r0
 8004cca:	2364      	movs	r3, #100	; 0x64
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fd f8ff 	bl	8001ed0 <HAL_UART_Transmit>
	snprintf(str,sizeof(str),"netmask: %03u.%03u.%03u.%03u\n\r",netmask[0],netmask[1],netmask[2],netmask[3]);
 8004cd2:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <PrintIP+0xd8>)
 8004cd4:	a805      	add	r0, sp, #20
 8004cd6:	78d1      	ldrb	r1, [r2, #3]
 8004cd8:	7813      	ldrb	r3, [r2, #0]
 8004cda:	9102      	str	r1, [sp, #8]
 8004cdc:	7891      	ldrb	r1, [r2, #2]
 8004cde:	9101      	str	r1, [sp, #4]
 8004ce0:	7852      	ldrb	r2, [r2, #1]
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <PrintIP+0xdc>)
 8004ce8:	f001 fa8e 	bl	8006208 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004cec:	a805      	add	r0, sp, #20
 8004cee:	f7fb fa2d 	bl	800014c <strlen>
 8004cf2:	2364      	movs	r3, #100	; 0x64
 8004cf4:	b282      	uxth	r2, r0
 8004cf6:	a905      	add	r1, sp, #20
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7fd f8e9 	bl	8001ed0 <HAL_UART_Transmit>
}
 8004cfe:	b01e      	add	sp, #120	; 0x78
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	20000e45 	.word	0x20000e45
 8004d08:	08006e2c 	.word	0x08006e2c
 8004d0c:	20001250 	.word	0x20001250
 8004d10:	20000e3a 	.word	0x20000e3a
 8004d14:	08006e49 	.word	0x08006e49
 8004d18:	200012de 	.word	0x200012de
 8004d1c:	08006e68 	.word	0x08006e68
 8004d20:	20000e49 	.word	0x20000e49
 8004d24:	08006e85 	.word	0x08006e85

08004d28 <ReadConstantsFromEEP>:
void ReadConstantsFromEEP(void) {
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
	EE_Read(EE_IPADDR,&tmp.data32);
 8004d2c:	a901      	add	r1, sp, #4
 8004d2e:	2003      	movs	r0, #3
 8004d30:	f7fe fdb2 	bl	8003898 <EE_Read>
	ipaddr[0] = tmp.data4x8[0];
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <ReadConstantsFromEEP+0xcc>)
 8004d36:	f89d 2004 	ldrb.w	r2, [sp, #4]
	EE_Read(EE_MYMAC1,&tmp.data32);
 8004d3a:	a901      	add	r1, sp, #4
	ipaddr[0] = tmp.data4x8[0];
 8004d3c:	701a      	strb	r2, [r3, #0]
	ipaddr[1] = tmp.data4x8[1];
 8004d3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
	EE_Read(EE_MYMAC1,&tmp.data32);
 8004d42:	2001      	movs	r0, #1
	ipaddr[1] = tmp.data4x8[1];
 8004d44:	705a      	strb	r2, [r3, #1]
	ipaddr[2] = tmp.data4x8[2];
 8004d46:	f89d 2006 	ldrb.w	r2, [sp, #6]
	mymac[0] = tmp.data4x8[0];
 8004d4a:	4c2b      	ldr	r4, [pc, #172]	; (8004df8 <ReadConstantsFromEEP+0xd0>)
	ipaddr[2] = tmp.data4x8[2];
 8004d4c:	709a      	strb	r2, [r3, #2]
	ipaddr[3] = tmp.data4x8[3];
 8004d4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004d52:	70da      	strb	r2, [r3, #3]
	EE_Read(EE_MYMAC1,&tmp.data32);
 8004d54:	f7fe fda0 	bl	8003898 <EE_Read>
	mymac[0] = tmp.data4x8[0];
 8004d58:	f89d 3004 	ldrb.w	r3, [sp, #4]
	EE_Read(EE_MYMAC2,&tmp.data32);
 8004d5c:	a901      	add	r1, sp, #4
	mymac[0] = tmp.data4x8[0];
 8004d5e:	7023      	strb	r3, [r4, #0]
	mymac[1] = tmp.data4x8[1];
 8004d60:	f89d 3005 	ldrb.w	r3, [sp, #5]
	EE_Read(EE_MYMAC2,&tmp.data32);
 8004d64:	2002      	movs	r0, #2
	mymac[1] = tmp.data4x8[1];
 8004d66:	7063      	strb	r3, [r4, #1]
	mymac[2] = tmp.data4x8[2];
 8004d68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004d6c:	70a3      	strb	r3, [r4, #2]
	mymac[3] = tmp.data4x8[3];
 8004d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d72:	70e3      	strb	r3, [r4, #3]
	EE_Read(EE_MYMAC2,&tmp.data32);
 8004d74:	f7fe fd90 	bl	8003898 <EE_Read>
	mymac[4] = tmp.data4x8[0];
 8004d78:	f89d 3004 	ldrb.w	r3, [sp, #4]
	EE_Read(EE_DESTADDR,&tmp.data32);
 8004d7c:	a901      	add	r1, sp, #4
	mymac[4] = tmp.data4x8[0];
 8004d7e:	7123      	strb	r3, [r4, #4]
	mymac[5] = tmp.data4x8[1];
 8004d80:	f89d 3005 	ldrb.w	r3, [sp, #5]
	EE_Read(EE_DESTADDR,&tmp.data32);
 8004d84:	2004      	movs	r0, #4
	mymac[5] = tmp.data4x8[1];
 8004d86:	7163      	strb	r3, [r4, #5]
	EE_Read(EE_DESTADDR,&tmp.data32);
 8004d88:	f7fe fd86 	bl	8003898 <EE_Read>
	gwip[0] = otherside_www_ip[0] = destip[0] = tmp.data4x8[0];
 8004d8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004d90:	4a1a      	ldr	r2, [pc, #104]	; (8004dfc <ReadConstantsFromEEP+0xd4>)
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <ReadConstantsFromEEP+0xd8>)
 8004d94:	491b      	ldr	r1, [pc, #108]	; (8004e04 <ReadConstantsFromEEP+0xdc>)
 8004d96:	7010      	strb	r0, [r2, #0]
 8004d98:	7008      	strb	r0, [r1, #0]
 8004d9a:	7018      	strb	r0, [r3, #0]
	gwip[1] = otherside_www_ip[1] = destip[1] = tmp.data4x8[1];
 8004d9c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004da0:	7048      	strb	r0, [r1, #1]
 8004da2:	7050      	strb	r0, [r2, #1]
 8004da4:	7058      	strb	r0, [r3, #1]
	gwip[2] = otherside_www_ip[2] = destip[2] = tmp.data4x8[2];
 8004da6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004daa:	7088      	strb	r0, [r1, #2]
 8004dac:	7090      	strb	r0, [r2, #2]
 8004dae:	7098      	strb	r0, [r3, #2]
	gwip[3] = otherside_www_ip[3] = destip[3] = tmp.data4x8[3];
 8004db0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004db4:	70c8      	strb	r0, [r1, #3]
 8004db6:	70d0      	strb	r0, [r2, #3]
 8004db8:	70d8      	strb	r0, [r3, #3]
	EE_Read(EE_FLAGSADDR,&data_);
 8004dba:	4669      	mov	r1, sp
 8004dbc:	2005      	movs	r0, #5
 8004dbe:	f7fe fd6b 	bl	8003898 <EE_Read>
	flag_use_dhcp = data_ & 0xFF;
 8004dc2:	9b00      	ldr	r3, [sp, #0]
 8004dc4:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <ReadConstantsFromEEP+0xe0>)
	flag[1] = data_>>8 & 0xFF;
 8004dc6:	0a19      	lsrs	r1, r3, #8
 8004dc8:	7051      	strb	r1, [r2, #1]
	flag[2] = data_>>16 & 0xFF;
 8004dca:	0c19      	lsrs	r1, r3, #16
	flag_use_dhcp = data_ & 0xFF;
 8004dcc:	7013      	strb	r3, [r2, #0]
	flag[2] = data_>>16 & 0xFF;
 8004dce:	7091      	strb	r1, [r2, #2]
	flag[3] = data_>>24 & 0xFF;
 8004dd0:	0e1b      	lsrs	r3, r3, #24
	snprintf(str,sizeof(str),"FLAGS read OK.\n\r");
 8004dd2:	490e      	ldr	r1, [pc, #56]	; (8004e0c <ReadConstantsFromEEP+0xe4>)
 8004dd4:	a802      	add	r0, sp, #8
	flag[3] = data_>>24 & 0xFF;
 8004dd6:	70d3      	strb	r3, [r2, #3]
	snprintf(str,sizeof(str),"FLAGS read OK.\n\r");
 8004dd8:	f001 fa4a 	bl	8006270 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004ddc:	a802      	add	r0, sp, #8
 8004dde:	f7fb f9b5 	bl	800014c <strlen>
 8004de2:	2364      	movs	r3, #100	; 0x64
 8004de4:	b282      	uxth	r2, r0
 8004de6:	a902      	add	r1, sp, #8
 8004de8:	4809      	ldr	r0, [pc, #36]	; (8004e10 <ReadConstantsFromEEP+0xe8>)
 8004dea:	f7fd f871 	bl	8001ed0 <HAL_UART_Transmit>
}
 8004dee:	b00a      	add	sp, #40	; 0x28
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	bf00      	nop
 8004df4:	20000e45 	.word	0x20000e45
 8004df8:	20001380 	.word	0x20001380
 8004dfc:	2000012c 	.word	0x2000012c
 8004e00:	200012de 	.word	0x200012de
 8004e04:	20000e3a 	.word	0x20000e3a
 8004e08:	20000e41 	.word	0x20000e41
 8004e0c:	08006ea4 	.word	0x08006ea4
 8004e10:	20001250 	.word	0x20001250

08004e14 <WriteDefaultsToEEP>:
void WriteDefaultsToEEP(void) {
 8004e14:	b510      	push	{r4, lr}
	tmp.data4x8[0] = MYMAC_[0];
 8004e16:	2374      	movs	r3, #116	; 0x74
 8004e18:	2400      	movs	r4, #0
 8004e1a:	f363 0407 	bfi	r4, r3, #0, #8
	tmp.data4x8[1] = MYMAC_[1];
 8004e1e:	2369      	movs	r3, #105	; 0x69
 8004e20:	f363 240f 	bfi	r4, r3, #8, #8
	tmp.data4x8[2] = MYMAC_[2];
 8004e24:	f363 4417 	bfi	r4, r3, #16, #8
	tmp.data4x8[3] = MYMAC_[3];
 8004e28:	2323      	movs	r3, #35	; 0x23
 8004e2a:	f363 641f 	bfi	r4, r3, #24, #8
void WriteDefaultsToEEP(void) {
 8004e2e:	b088      	sub	sp, #32
	EE_Write(EE_MYMAC1,tmp.data32 );
 8004e30:	4621      	mov	r1, r4
 8004e32:	2001      	movs	r0, #1
 8004e34:	f7fe fd52 	bl	80038dc <EE_Write>
	tmp.data4x8[0] = MYMAC_[4];
 8004e38:	2330      	movs	r3, #48	; 0x30
 8004e3a:	f363 0407 	bfi	r4, r3, #0, #8
	tmp.data4x8[1] = MYMAC_[5];
 8004e3e:	2331      	movs	r3, #49	; 0x31
 8004e40:	f363 240f 	bfi	r4, r3, #8, #8
	tmp.data4x8[2] = 0;
 8004e44:	f36f 4417 	bfc	r4, #16, #8
	tmp.data4x8[3] = 0;
 8004e48:	f36f 641f 	bfc	r4, #24, #8
	EE_Write(EE_MYMAC2,tmp.data32);
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7fe fd44 	bl	80038dc <EE_Write>
	EE_Write(EE_IPADDR,(uint32_t)(IPADDR_[0] | IPADDR_[1]<<8 | IPADDR_[2]<<16 | IPADDR_[3]<<24) );
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <WriteDefaultsToEEP+0x7c>)
 8004e56:	2003      	movs	r0, #3
 8004e58:	f7fe fd40 	bl	80038dc <EE_Write>
	EE_Write(EE_DESTADDR,(uint32_t)(DESTADDR_[0] | DESTADDR_[1]<<8 | DESTADDR_[2]<<16 | DESTADDR_[3]<<24) );
 8004e5c:	490d      	ldr	r1, [pc, #52]	; (8004e94 <WriteDefaultsToEEP+0x80>)
 8004e5e:	2004      	movs	r0, #4
 8004e60:	f7fe fd3c 	bl	80038dc <EE_Write>
	EE_Write(EE_FLAGSADDR,tmp.data32);
 8004e64:	0c21      	lsrs	r1, r4, #16
 8004e66:	0409      	lsls	r1, r1, #16
 8004e68:	2005      	movs	r0, #5
 8004e6a:	f7fe fd37 	bl	80038dc <EE_Write>
	snprintf(str,sizeof(str),"EEPROM write defaults OK.\n\r");
 8004e6e:	490a      	ldr	r1, [pc, #40]	; (8004e98 <WriteDefaultsToEEP+0x84>)
 8004e70:	4668      	mov	r0, sp
 8004e72:	f001 f9fd 	bl	8006270 <strcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004e76:	4668      	mov	r0, sp
 8004e78:	f7fb f968 	bl	800014c <strlen>
 8004e7c:	2364      	movs	r3, #100	; 0x64
 8004e7e:	b282      	uxth	r2, r0
 8004e80:	4669      	mov	r1, sp
 8004e82:	4806      	ldr	r0, [pc, #24]	; (8004e9c <WriteDefaultsToEEP+0x88>)
 8004e84:	f7fd f824 	bl	8001ed0 <HAL_UART_Transmit>
	ReadConstantsFromEEP();
 8004e88:	f7ff ff4e 	bl	8004d28 <ReadConstantsFromEEP>
}
 8004e8c:	b008      	add	sp, #32
 8004e8e:	bd10      	pop	{r4, pc}
 8004e90:	4d000a0a 	.word	0x4d000a0a
 8004e94:	63000a0a 	.word	0x63000a0a
 8004e98:	08006eb5 	.word	0x08006eb5
 8004e9c:	20001250 	.word	0x20001250

08004ea0 <EEpromCheckAndRead>:
void EEpromCheckAndRead(void) {
 8004ea0:	b510      	push	{r4, lr}
	if (data_!= CHECK_DATA) {
 8004ea2:	f640 0488 	movw	r4, #2184	; 0x888
void EEpromCheckAndRead(void) {
 8004ea6:	b08a      	sub	sp, #40	; 0x28
	EE_Read(EEP_CHECK_ADDR,&data_);
 8004ea8:	a901      	add	r1, sp, #4
 8004eaa:	2008      	movs	r0, #8
 8004eac:	f7fe fcf4 	bl	8003898 <EE_Read>
	if (data_!= CHECK_DATA) {
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	d01a      	beq.n	8004eec <EEpromCheckAndRead+0x4c>
		snprintf(str,strlen(str),"EEPROM format and write defaults...\n\r");
 8004eb6:	a802      	add	r0, sp, #8
 8004eb8:	f7fb f948 	bl	800014c <strlen>
 8004ebc:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <EEpromCheckAndRead+0x54>)
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	a802      	add	r0, sp, #8
 8004ec2:	f001 f9a1 	bl	8006208 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8004ec6:	a802      	add	r0, sp, #8
 8004ec8:	f7fb f940 	bl	800014c <strlen>
 8004ecc:	a902      	add	r1, sp, #8
 8004ece:	b282      	uxth	r2, r0
 8004ed0:	2364      	movs	r3, #100	; 0x64
 8004ed2:	4809      	ldr	r0, [pc, #36]	; (8004ef8 <EEpromCheckAndRead+0x58>)
 8004ed4:	f7fc fffc 	bl	8001ed0 <HAL_UART_Transmit>
		EE_Format();
 8004ed8:	f7fe fcc0 	bl	800385c <EE_Format>
		WriteDefaultsToEEP();
 8004edc:	f7ff ff9a 	bl	8004e14 <WriteDefaultsToEEP>
		EE_Write(EEP_CHECK_ADDR,CHECK_DATA);
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	2008      	movs	r0, #8
 8004ee4:	f7fe fcfa 	bl	80038dc <EE_Write>
}
 8004ee8:	b00a      	add	sp, #40	; 0x28
 8004eea:	bd10      	pop	{r4, pc}
		 ReadConstantsFromEEP();
 8004eec:	f7ff ff1c 	bl	8004d28 <ReadConstantsFromEEP>
}
 8004ef0:	e7fa      	b.n	8004ee8 <EEpromCheckAndRead+0x48>
 8004ef2:	bf00      	nop
 8004ef4:	08006e06 	.word	0x08006e06
 8004ef8:	20001250 	.word	0x20001250

08004efc <HomePage>:
uint16_t HomePage(void) {
 8004efc:	b500      	push	{lr}
													destip[0],destip[1],destip[2],destip[3], lock_sens[0],lock_sens[1],lock_status_hw[0],lock_status_hw[1] );
 8004efe:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <HomePage+0x8c>)
  	snprintf(temp_str, sizeof(temp_str),home_page,	ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3],mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5],
 8004f00:	4922      	ldr	r1, [pc, #136]	; (8004f8c <HomePage+0x90>)
 8004f02:	7850      	ldrb	r0, [r2, #1]
uint16_t HomePage(void) {
 8004f04:	f2ad 6d2c 	subw	sp, sp, #1580	; 0x62c
  	snprintf(temp_str, sizeof(temp_str),home_page,	ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3],mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5],
 8004f08:	780b      	ldrb	r3, [r1, #0]
 8004f0a:	9010      	str	r0, [sp, #64]	; 0x40
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	920f      	str	r2, [sp, #60]	; 0x3c
													destip[0],destip[1],destip[2],destip[3], lock_sens[0],lock_sens[1],lock_status_hw[0],lock_status_hw[1] );
 8004f10:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <HomePage+0x94>)
  	snprintf(temp_str, sizeof(temp_str),home_page,	ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3],mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5],
 8004f12:	7850      	ldrb	r0, [r2, #1]
 8004f14:	900e      	str	r0, [sp, #56]	; 0x38
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	920d      	str	r2, [sp, #52]	; 0x34
													destip[0],destip[1],destip[2],destip[3], lock_sens[0],lock_sens[1],lock_status_hw[0],lock_status_hw[1] );
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <HomePage+0x98>)
  	snprintf(temp_str, sizeof(temp_str),home_page,	ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3],mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5],
 8004f1c:	78d0      	ldrb	r0, [r2, #3]
 8004f1e:	900c      	str	r0, [sp, #48]	; 0x30
 8004f20:	7890      	ldrb	r0, [r2, #2]
 8004f22:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f24:	7850      	ldrb	r0, [r2, #1]
 8004f26:	900a      	str	r0, [sp, #40]	; 0x28
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HomePage+0x9c>)
 8004f2e:	7950      	ldrb	r0, [r2, #5]
 8004f30:	9008      	str	r0, [sp, #32]
 8004f32:	7910      	ldrb	r0, [r2, #4]
 8004f34:	9007      	str	r0, [sp, #28]
 8004f36:	78d0      	ldrb	r0, [r2, #3]
 8004f38:	9006      	str	r0, [sp, #24]
 8004f3a:	7890      	ldrb	r0, [r2, #2]
 8004f3c:	9005      	str	r0, [sp, #20]
 8004f3e:	7850      	ldrb	r0, [r2, #1]
 8004f40:	9004      	str	r0, [sp, #16]
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	a813      	add	r0, sp, #76	; 0x4c
 8004f46:	9203      	str	r2, [sp, #12]
 8004f48:	78ca      	ldrb	r2, [r1, #3]
 8004f4a:	9202      	str	r2, [sp, #8]
 8004f4c:	788a      	ldrb	r2, [r1, #2]
 8004f4e:	9201      	str	r2, [sp, #4]
 8004f50:	784a      	ldrb	r2, [r1, #1]
 8004f52:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <HomePage+0xa0>)
 8004f5a:	f001 f955 	bl	8006208 <sniprintf>
	if (flag_use_dhcp == 1) snprintf (temp_str,sizeof(temp_str), dhcp_page_true,temp_str);
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HomePage+0xa4>)
	else snprintf (temp_str,sizeof(temp_str), dhcp_page_false,temp_str);
 8004f60:	f240 51dc 	movw	r1, #1500	; 0x5dc
	if (flag_use_dhcp == 1) snprintf (temp_str,sizeof(temp_str), dhcp_page_true,temp_str);
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	ab13      	add	r3, sp, #76	; 0x4c
 8004f6a:	bf0c      	ite	eq
 8004f6c:	4a0d      	ldreq	r2, [pc, #52]	; (8004fa4 <HomePage+0xa8>)
	else snprintf (temp_str,sizeof(temp_str), dhcp_page_false,temp_str);
 8004f6e:	4a0e      	ldrne	r2, [pc, #56]	; (8004fa8 <HomePage+0xac>)
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 f949 	bl	8006208 <sniprintf>
	return(fill_tcp_data_p(net_buf,0, temp_str));
 8004f76:	aa13      	add	r2, sp, #76	; 0x4c
 8004f78:	2100      	movs	r1, #0
 8004f7a:	480c      	ldr	r0, [pc, #48]	; (8004fac <HomePage+0xb0>)
 8004f7c:	f7ff f94c 	bl	8004218 <fill_tcp_data_p>
}
 8004f80:	f20d 6d2c 	addw	sp, sp, #1580	; 0x62c
 8004f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f88:	20000e4d 	.word	0x20000e4d
 8004f8c:	20000e45 	.word	0x20000e45
 8004f90:	20000e3e 	.word	0x20000e3e
 8004f94:	20000e3a 	.word	0x20000e3a
 8004f98:	20001380 	.word	0x20001380
 8004f9c:	0800715f 	.word	0x0800715f
 8004fa0:	20000e41 	.word	0x20000e41
 8004fa4:	08007089 	.word	0x08007089
 8004fa8:	08006fac 	.word	0x08006fac
 8004fac:	20000e4f 	.word	0x20000e4f

08004fb0 <net_poll>:
    	} // copy mac address over:
}

void net_poll() {
 8004fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char str[100];
	char keystr[10];
	uint8_t data;

	// 1-st task
	p_len=enc28j60PacketReceive(BUFFER_SIZE,net_buf);
 8004fb4:	4eb6      	ldr	r6, [pc, #728]	; (8005290 <net_poll+0x2e0>)
void net_poll() {
 8004fb6:	b0a2      	sub	sp, #136	; 0x88
	p_len=enc28j60PacketReceive(BUFFER_SIZE,net_buf);
 8004fb8:	4631      	mov	r1, r6
 8004fba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004fbe:	f7fe feff 	bl	8003dc0 <enc28j60PacketReceive>
 8004fc2:	4cb4      	ldr	r4, [pc, #720]	; (8005294 <net_poll+0x2e4>)
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	8020      	strh	r0, [r4, #0]
	dat_p = packetloop_arp_icmp_tcp(net_buf,p_len);
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f7ff fc83 	bl	80048d4 <packetloop_arp_icmp_tcp>
 8004fce:	4db2      	ldr	r5, [pc, #712]	; (8005298 <net_poll+0x2e8>)
 8004fd0:	46a0      	mov	r8, r4
 8004fd2:	8028      	strh	r0, [r5, #0]
	if (dat_p!=0) {
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f000 81ca 	beq.w	800536e <net_poll+0x3be>
		snprintf(str,28,"/LOCK_OFF&%02X-%02X-%02X-%02X-%02X-%02X",mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5]);
 8004fda:	4cb0      	ldr	r4, [pc, #704]	; (800529c <net_poll+0x2ec>)
 8004fdc:	211c      	movs	r1, #28
 8004fde:	7962      	ldrb	r2, [r4, #5]
 8004fe0:	7823      	ldrb	r3, [r4, #0]
 8004fe2:	9204      	str	r2, [sp, #16]
 8004fe4:	7922      	ldrb	r2, [r4, #4]
 8004fe6:	a809      	add	r0, sp, #36	; 0x24
 8004fe8:	9203      	str	r2, [sp, #12]
 8004fea:	78e2      	ldrb	r2, [r4, #3]
 8004fec:	9202      	str	r2, [sp, #8]
 8004fee:	78a2      	ldrb	r2, [r4, #2]
 8004ff0:	9201      	str	r2, [sp, #4]
 8004ff2:	7862      	ldrb	r2, [r4, #1]
 8004ff4:	9200      	str	r2, [sp, #0]
 8004ff6:	4aaa      	ldr	r2, [pc, #680]	; (80052a0 <net_poll+0x2f0>)
 8004ff8:	f001 f906 	bl	8006208 <sniprintf>
	    char* index = strstr((char *)&(net_buf[dat_p]),str);
 8004ffc:	8828      	ldrh	r0, [r5, #0]
 8004ffe:	a909      	add	r1, sp, #36	; 0x24
 8005000:	4430      	add	r0, r6
 8005002:	f001 f94f 	bl	80062a4 <strstr>

	    if (index>0) {
 8005006:	b1f8      	cbz	r0, 8005048 <net_poll+0x98>
			lock_status_hw[0] = 0;
 8005008:	2700      	movs	r7, #0
 800500a:	4ba6      	ldr	r3, [pc, #664]	; (80052a4 <net_poll+0x2f4>)
			HAL_GPIO_WritePin(RELAY_GPIO_Port,RELAY_Pin,RESET);
 800500c:	463a      	mov	r2, r7
 800500e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005012:	48a5      	ldr	r0, [pc, #660]	; (80052a8 <net_poll+0x2f8>)
			lock_status_hw[0] = 0;
 8005014:	701f      	strb	r7, [r3, #0]
			HAL_GPIO_WritePin(RELAY_GPIO_Port,RELAY_Pin,RESET);
 8005016:	f7fb fbd5 	bl	80007c4 <HAL_GPIO_WritePin>
			snprintf(str,sizeof(str),"'/lock_off' received\n\r");
 800501a:	49a4      	ldr	r1, [pc, #656]	; (80052ac <net_poll+0x2fc>)
 800501c:	a809      	add	r0, sp, #36	; 0x24
 800501e:	f001 f927 	bl	8006270 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005022:	a809      	add	r0, sp, #36	; 0x24
 8005024:	f7fb f892 	bl	800014c <strlen>
 8005028:	2364      	movs	r3, #100	; 0x64
 800502a:	b282      	uxth	r2, r0
 800502c:	a909      	add	r1, sp, #36	; 0x24
 800502e:	48a0      	ldr	r0, [pc, #640]	; (80052b0 <net_poll+0x300>)
 8005030:	f7fc ff4e 	bl	8001ed0 <HAL_UART_Transmit>
			dat_p = fill_tcp_data_p(net_buf,0, lock_off_html);
 8005034:	4639      	mov	r1, r7
 8005036:	4a9f      	ldr	r2, [pc, #636]	; (80052b4 <net_poll+0x304>)
 8005038:	4630      	mov	r0, r6
 800503a:	f7ff f8ed 	bl	8004218 <fill_tcp_data_p>
 800503e:	4601      	mov	r1, r0
 8005040:	8028      	strh	r0, [r5, #0]
			www_server_reply(net_buf,dat_p); // send web page data
 8005042:	4630      	mov	r0, r6
 8005044:	f7ff fa6c 	bl	8004520 <www_server_reply>
		}

		snprintf(str,29,"/LOCK_ON&%02X-%02X-%02X-%02X-%02X-%02X",mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5]);
 8005048:	7962      	ldrb	r2, [r4, #5]
 800504a:	7823      	ldrb	r3, [r4, #0]
 800504c:	9204      	str	r2, [sp, #16]
 800504e:	7922      	ldrb	r2, [r4, #4]
 8005050:	211d      	movs	r1, #29
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	78e2      	ldrb	r2, [r4, #3]
 8005056:	a809      	add	r0, sp, #36	; 0x24
 8005058:	9202      	str	r2, [sp, #8]
 800505a:	78a2      	ldrb	r2, [r4, #2]
 800505c:	9201      	str	r2, [sp, #4]
 800505e:	7862      	ldrb	r2, [r4, #1]
 8005060:	9200      	str	r2, [sp, #0]
 8005062:	4a95      	ldr	r2, [pc, #596]	; (80052b8 <net_poll+0x308>)
 8005064:	f001 f8d0 	bl	8006208 <sniprintf>
		index = strstr((char *)&(net_buf[dat_p]),str);
 8005068:	8828      	ldrh	r0, [r5, #0]
 800506a:	a909      	add	r1, sp, #36	; 0x24
 800506c:	4430      	add	r0, r6
 800506e:	f001 f919 	bl	80062a4 <strstr>

		if (index >0) {
 8005072:	b1f0      	cbz	r0, 80050b2 <net_poll+0x102>
			lock_status_hw[0] = 1;
 8005074:	2201      	movs	r2, #1
 8005076:	4b8b      	ldr	r3, [pc, #556]	; (80052a4 <net_poll+0x2f4>)
			HAL_GPIO_WritePin(RELAY_GPIO_Port,RELAY_Pin,SET);
 8005078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800507c:	488a      	ldr	r0, [pc, #552]	; (80052a8 <net_poll+0x2f8>)
			lock_status_hw[0] = 1;
 800507e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RELAY_GPIO_Port,RELAY_Pin,SET);
 8005080:	f7fb fba0 	bl	80007c4 <HAL_GPIO_WritePin>
			snprintf(str,sizeof(str),"'/lock_on' received\n\r");
 8005084:	498d      	ldr	r1, [pc, #564]	; (80052bc <net_poll+0x30c>)
 8005086:	a809      	add	r0, sp, #36	; 0x24
 8005088:	f001 f8f2 	bl	8006270 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800508c:	a809      	add	r0, sp, #36	; 0x24
 800508e:	f7fb f85d 	bl	800014c <strlen>
 8005092:	2364      	movs	r3, #100	; 0x64
 8005094:	b282      	uxth	r2, r0
 8005096:	a909      	add	r1, sp, #36	; 0x24
 8005098:	4885      	ldr	r0, [pc, #532]	; (80052b0 <net_poll+0x300>)
 800509a:	f7fc ff19 	bl	8001ed0 <HAL_UART_Transmit>
			dat_p = fill_tcp_data_p(net_buf,0, lock_on_html);
 800509e:	2100      	movs	r1, #0
 80050a0:	4a87      	ldr	r2, [pc, #540]	; (80052c0 <net_poll+0x310>)
 80050a2:	487b      	ldr	r0, [pc, #492]	; (8005290 <net_poll+0x2e0>)
 80050a4:	f7ff f8b8 	bl	8004218 <fill_tcp_data_p>
 80050a8:	4601      	mov	r1, r0
 80050aa:	8028      	strh	r0, [r5, #0]
			www_server_reply(net_buf,dat_p); // send web page data
 80050ac:	4878      	ldr	r0, [pc, #480]	; (8005290 <net_poll+0x2e0>)
 80050ae:	f7ff fa37 	bl	8004520 <www_server_reply>
		}
// check for receiving new values for change static ip, dest ip addreess
		if (strncmp((char *) & (net_buf[dat_p]),"GET /?",6)==0) {
 80050b2:	f8b5 9000 	ldrh.w	r9, [r5]
 80050b6:	2206      	movs	r2, #6
 80050b8:	4982      	ldr	r1, [pc, #520]	; (80052c4 <net_poll+0x314>)
 80050ba:	eb06 0009 	add.w	r0, r6, r9
 80050be:	f001 f8df 	bl	8006280 <strncmp>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	f040 813d 	bne.w	8005342 <net_poll+0x392>
			dat_p += 6;
 80050c8:	4607      	mov	r7, r0
 80050ca:	f109 0906 	add.w	r9, r9, #6
 80050ce:	f8a5 9000 	strh.w	r9, [r5]
	    		snprintf(keystr,sizeof(keystr),"ip%X=",x);// KEY_IP[x];
	    		index = strstr((char *)&(net_buf[dat_p]),keystr);
	    		if (index>0) {
	    			dat_p+=4;
	    			data  =  dec2int_byte(&net_buf[dat_p] );
	    			ipaddr[x] = data;
 80050d2:	f8df a204 	ldr.w	sl, [pc, #516]	; 80052d8 <net_poll+0x328>
	    		snprintf(keystr,sizeof(keystr),"ip%X=",x);// KEY_IP[x];
 80050d6:	f8df 9204 	ldr.w	r9, [pc, #516]	; 80052dc <net_poll+0x32c>
 80050da:	210a      	movs	r1, #10
 80050dc:	463b      	mov	r3, r7
 80050de:	464a      	mov	r2, r9
 80050e0:	a806      	add	r0, sp, #24
 80050e2:	f001 f891 	bl	8006208 <sniprintf>
	    		index = strstr((char *)&(net_buf[dat_p]),keystr);
 80050e6:	f8b5 8000 	ldrh.w	r8, [r5]
 80050ea:	a906      	add	r1, sp, #24
 80050ec:	eb06 0008 	add.w	r0, r6, r8
 80050f0:	f001 f8d8 	bl	80062a4 <strstr>
	    		if (index>0) {
 80050f4:	b158      	cbz	r0, 800510e <net_poll+0x15e>
	    			dat_p+=4;
 80050f6:	f108 0004 	add.w	r0, r8, #4
 80050fa:	b280      	uxth	r0, r0
 80050fc:	8028      	strh	r0, [r5, #0]
	    			data  =  dec2int_byte(&net_buf[dat_p] );
 80050fe:	4430      	add	r0, r6
 8005100:	f7fe fecc 	bl	8003e9c <dec2int_byte>
	    			dat_p+=4;
 8005104:	882b      	ldrh	r3, [r5, #0]
	    			ipaddr[x] = data;
 8005106:	f80a 0007 	strb.w	r0, [sl, r7]
	    			dat_p+=4;
 800510a:	3304      	adds	r3, #4
 800510c:	802b      	strh	r3, [r5, #0]
 800510e:	3701      	adds	r7, #1
			for (uint8_t x=0;x<4;x++) {
 8005110:	2f04      	cmp	r7, #4
 8005112:	d1e2      	bne.n	80050da <net_poll+0x12a>
 8005114:	f04f 0800 	mov.w	r8, #0
	    		}
	    	}

			for (uint8_t x=0;x<6;x++) {
	    		snprintf(keystr,sizeof(keystr),"mac%X=",x);//
 8005118:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80052e0 <net_poll+0x330>
 800511c:	210a      	movs	r1, #10
 800511e:	4643      	mov	r3, r8
 8005120:	464a      	mov	r2, r9
 8005122:	a806      	add	r0, sp, #24
 8005124:	f001 f870 	bl	8006208 <sniprintf>
	    		index = strstr((char *)&(net_buf[dat_p]),keystr);
 8005128:	882f      	ldrh	r7, [r5, #0]
 800512a:	a906      	add	r1, sp, #24
 800512c:	19f0      	adds	r0, r6, r7
 800512e:	f001 f8b9 	bl	80062a4 <strstr>
	    		if (index>0) {
 8005132:	b150      	cbz	r0, 800514a <net_poll+0x19a>
	    			dat_p+=5;
 8005134:	1d78      	adds	r0, r7, #5
 8005136:	b280      	uxth	r0, r0
 8005138:	8028      	strh	r0, [r5, #0]
	    			data  =  hex2int_byte((char *)&net_buf[dat_p] );
 800513a:	4430      	add	r0, r6
 800513c:	f7fe fe8e 	bl	8003e5c <hex2int_byte>
	    			mymac[x] = data;
	    			dat_p+=3;
 8005140:	882b      	ldrh	r3, [r5, #0]
	    			data  =  hex2int_byte((char *)&net_buf[dat_p] );
 8005142:	f804 0008 	strb.w	r0, [r4, r8]
	    			dat_p+=3;
 8005146:	3303      	adds	r3, #3
 8005148:	802b      	strh	r3, [r5, #0]
 800514a:	f108 0801 	add.w	r8, r8, #1
			for (uint8_t x=0;x<6;x++) {
 800514e:	f1b8 0f06 	cmp.w	r8, #6
 8005152:	d1e3      	bne.n	800511c <net_poll+0x16c>
 8005154:	f04f 0800 	mov.w	r8, #0
	    		}
	    	}

			for (uint8_t x=0;x<4;x++) {
	    		snprintf(keystr,sizeof(keystr),"dip%X=",x);//
 8005158:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80052e4 <net_poll+0x334>
	    		index = strstr((char *)&(net_buf[dat_p]),keystr);
	    		if (index>0) {
	    			dat_p+=5;
	    			data  =  dec2int_byte(&net_buf[dat_p] );
	    			destip[x] = data;
 800515c:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80052cc <net_poll+0x31c>
	    		snprintf(keystr,sizeof(keystr),"dip%X=",x);//
 8005160:	210a      	movs	r1, #10
 8005162:	4643      	mov	r3, r8
 8005164:	464a      	mov	r2, r9
 8005166:	a806      	add	r0, sp, #24
 8005168:	f001 f84e 	bl	8006208 <sniprintf>
	    		index = strstr((char *)&(net_buf[dat_p]),keystr);
 800516c:	882f      	ldrh	r7, [r5, #0]
 800516e:	a906      	add	r1, sp, #24
 8005170:	19f0      	adds	r0, r6, r7
 8005172:	f001 f897 	bl	80062a4 <strstr>
	    		if (index>0) {
 8005176:	b150      	cbz	r0, 800518e <net_poll+0x1de>
	    			dat_p+=5;
 8005178:	1d78      	adds	r0, r7, #5
 800517a:	b280      	uxth	r0, r0
 800517c:	8028      	strh	r0, [r5, #0]
	    			data  =  dec2int_byte(&net_buf[dat_p] );
 800517e:	4430      	add	r0, r6
 8005180:	f7fe fe8c 	bl	8003e9c <dec2int_byte>
	    			dat_p+=4;
 8005184:	882b      	ldrh	r3, [r5, #0]
	    			destip[x] = data;
 8005186:	f80a 0008 	strb.w	r0, [sl, r8]
	    			dat_p+=4;
 800518a:	3304      	adds	r3, #4
 800518c:	802b      	strh	r3, [r5, #0]
 800518e:	f108 0801 	add.w	r8, r8, #1
			for (uint8_t x=0;x<4;x++) {
 8005192:	f1b8 0f04 	cmp.w	r8, #4
 8005196:	d1e3      	bne.n	8005160 <net_poll+0x1b0>
	    		}
	    	}

    		snprintf(keystr,sizeof(keystr),"use_dhcp=");//
 8005198:	494b      	ldr	r1, [pc, #300]	; (80052c8 <net_poll+0x318>)
 800519a:	a806      	add	r0, sp, #24
 800519c:	f001 f868 	bl	8006270 <strcpy>
    		index = strstr((char *)&(net_buf[dat_p]),keystr);
 80051a0:	882b      	ldrh	r3, [r5, #0]
 80051a2:	a906      	add	r1, sp, #24
 80051a4:	441e      	add	r6, r3
 80051a6:	4630      	mov	r0, r6
 80051a8:	f001 f87c 	bl	80062a4 <strstr>
 80051ac:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80052e8 <net_poll+0x338>

    		if (index>0) flag_use_dhcp = net_buf[dat_p+9] - 0x30;
 80051b0:	b118      	cbz	r0, 80051ba <net_poll+0x20a>
 80051b2:	7a73      	ldrb	r3, [r6, #9]
 80051b4:	3b30      	subs	r3, #48	; 0x30
 80051b6:	f889 3000 	strb.w	r3, [r9]
	    		unsigned char data4x8[4];
	    	} tmp;

	    	// MAC defaults sets...
	    	//
	    	tmp.data4x8[0] = mymac[0];
 80051ba:	2600      	movs	r6, #0
    		EE_Write(EE_IPADDR,(uint32_t)(ipaddr[0] | ipaddr[1]<<8 | ipaddr[2]<<16 | ipaddr[3]<<24) );
 80051bc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80052d8 <net_poll+0x328>
	    	EE_Write(EE_DESTADDR,(uint32_t)(destip[0] | destip[1]<<8 | destip[2]<<16 | destip[3]<<24) );
 80051c0:	4f42      	ldr	r7, [pc, #264]	; (80052cc <net_poll+0x31c>)
    		EE_Write(EE_IPADDR,(uint32_t)(ipaddr[0] | ipaddr[1]<<8 | ipaddr[2]<<16 | ipaddr[3]<<24) );
 80051c2:	f8d8 1000 	ldr.w	r1, [r8]
 80051c6:	2003      	movs	r0, #3
 80051c8:	f7fe fb88 	bl	80038dc <EE_Write>
	    	EE_Write(EE_DESTADDR,(uint32_t)(destip[0] | destip[1]<<8 | destip[2]<<16 | destip[3]<<24) );
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	2004      	movs	r0, #4
 80051d0:	f7fe fb84 	bl	80038dc <EE_Write>
	    	tmp.data4x8[0] = mymac[0];
 80051d4:	7823      	ldrb	r3, [r4, #0]
	    	tmp.data4x8[1] = mymac[1];
	    	tmp.data4x8[2] = mymac[2];
	    	tmp.data4x8[3] = mymac[3];
	    	EE_Write(EE_MYMAC1,tmp.data32 );
 80051d6:	2001      	movs	r0, #1
	    	tmp.data4x8[0] = mymac[0];
 80051d8:	f363 0607 	bfi	r6, r3, #0, #8
	    	tmp.data4x8[1] = mymac[1];
 80051dc:	7863      	ldrb	r3, [r4, #1]
 80051de:	f363 260f 	bfi	r6, r3, #8, #8
	    	tmp.data4x8[2] = mymac[2];
 80051e2:	78a3      	ldrb	r3, [r4, #2]
 80051e4:	f363 4617 	bfi	r6, r3, #16, #8
	    	tmp.data4x8[3] = mymac[3];
 80051e8:	78e3      	ldrb	r3, [r4, #3]
 80051ea:	f363 661f 	bfi	r6, r3, #24, #8
	    	EE_Write(EE_MYMAC1,tmp.data32 );
 80051ee:	4631      	mov	r1, r6
 80051f0:	f7fe fb74 	bl	80038dc <EE_Write>

	    	tmp.data4x8[0] = mymac[4];
 80051f4:	7923      	ldrb	r3, [r4, #4]
	    	tmp.data4x8[1] = mymac[5];
	    	tmp.data4x8[2] = 0;
	    	tmp.data4x8[3] = 0;
	    	EE_Write(EE_MYMAC2,tmp.data32);
 80051f6:	2002      	movs	r0, #2
	    	tmp.data4x8[0] = mymac[4];
 80051f8:	f363 0607 	bfi	r6, r3, #0, #8
	    	tmp.data4x8[1] = mymac[5];
 80051fc:	7963      	ldrb	r3, [r4, #5]
 80051fe:	f363 260f 	bfi	r6, r3, #8, #8
	    	tmp.data4x8[2] = 0;
 8005202:	f36f 4617 	bfc	r6, #16, #8
	    	tmp.data4x8[3] = 0;
 8005206:	f36f 661f 	bfc	r6, #24, #8
	    	EE_Write(EE_MYMAC2,tmp.data32);
 800520a:	4631      	mov	r1, r6
 800520c:	f7fe fb66 	bl	80038dc <EE_Write>

	    	tmp.data4x8[0] = flag_use_dhcp;
 8005210:	f899 3000 	ldrb.w	r3, [r9]
	    	tmp.data4x8[1] = FLAG_[1];
	    	tmp.data4x8[2] = FLAG_[2];
	    	tmp.data4x8[3] = FLAG_[3];
	    	EE_Write(EE_FLAGSADDR,tmp.data32);
 8005214:	2005      	movs	r0, #5
	    	tmp.data4x8[0] = flag_use_dhcp;
 8005216:	f363 0607 	bfi	r6, r3, #0, #8
	    	EE_Write(EE_FLAGSADDR,tmp.data32);
 800521a:	f426 417f 	bic.w	r1, r6, #65280	; 0xff00
 800521e:	f7fe fb5d 	bl	80038dc <EE_Write>

	    	snprintf(str,sizeof(str),"new ip address: %03u.%03u.%03u.%03u\n\r",ipaddr[0],ipaddr[1],ipaddr[2],ipaddr[3]);
 8005222:	f898 2003 	ldrb.w	r2, [r8, #3]
 8005226:	f898 3000 	ldrb.w	r3, [r8]
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005230:	2164      	movs	r1, #100	; 0x64
 8005232:	9201      	str	r2, [sp, #4]
 8005234:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005238:	a809      	add	r0, sp, #36	; 0x24
 800523a:	9200      	str	r2, [sp, #0]
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <net_poll+0x320>)
 800523e:	f000 ffe3 	bl	8006208 <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005242:	a809      	add	r0, sp, #36	; 0x24
 8005244:	f7fa ff82 	bl	800014c <strlen>
 8005248:	2364      	movs	r3, #100	; 0x64
 800524a:	b282      	uxth	r2, r0
 800524c:	a909      	add	r1, sp, #36	; 0x24
 800524e:	4818      	ldr	r0, [pc, #96]	; (80052b0 <net_poll+0x300>)
 8005250:	f7fc fe3e 	bl	8001ed0 <HAL_UART_Transmit>
	    	snprintf(str,sizeof(str),"new destip address: %03u.%03u.%03u.%03u\n\r",destip[0],destip[1],destip[2],destip[3]);
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	783b      	ldrb	r3, [r7, #0]
 8005258:	9202      	str	r2, [sp, #8]
 800525a:	78ba      	ldrb	r2, [r7, #2]
 800525c:	2164      	movs	r1, #100	; 0x64
 800525e:	9201      	str	r2, [sp, #4]
 8005260:	787a      	ldrb	r2, [r7, #1]
 8005262:	a809      	add	r0, sp, #36	; 0x24
 8005264:	9200      	str	r2, [sp, #0]
 8005266:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <net_poll+0x324>)
 8005268:	f000 ffce 	bl	8006208 <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800526c:	a809      	add	r0, sp, #36	; 0x24
 800526e:	f7fa ff6d 	bl	800014c <strlen>
 8005272:	2364      	movs	r3, #100	; 0x64
 8005274:	b282      	uxth	r2, r0
 8005276:	a909      	add	r1, sp, #36	; 0x24
 8005278:	480d      	ldr	r0, [pc, #52]	; (80052b0 <net_poll+0x300>)
 800527a:	f7fc fe29 	bl	8001ed0 <HAL_UART_Transmit>
	    	snprintf(str,sizeof(str),"new mac address: %02X:%02X:%02X:%02X:%02X:%02X\n\r",mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5]);
 800527e:	7962      	ldrb	r2, [r4, #5]
 8005280:	7823      	ldrb	r3, [r4, #0]
 8005282:	9204      	str	r2, [sp, #16]
 8005284:	7922      	ldrb	r2, [r4, #4]
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	9203      	str	r2, [sp, #12]
 800528a:	78e2      	ldrb	r2, [r4, #3]
 800528c:	e02e      	b.n	80052ec <net_poll+0x33c>
 800528e:	bf00      	nop
 8005290:	20000e4f 	.word	0x20000e4f
 8005294:	20000e34 	.word	0x20000e34
 8005298:	20001294 	.word	0x20001294
 800529c:	20001380 	.word	0x20001380
 80052a0:	08007842 	.word	0x08007842
 80052a4:	20000e4d 	.word	0x20000e4d
 80052a8:	40010c00 	.word	0x40010c00
 80052ac:	0800786a 	.word	0x0800786a
 80052b0:	20001250 	.word	0x20001250
 80052b4:	080075fa 	.word	0x080075fa
 80052b8:	08007881 	.word	0x08007881
 80052bc:	080078a8 	.word	0x080078a8
 80052c0:	08007679 	.word	0x08007679
 80052c4:	080078be 	.word	0x080078be
 80052c8:	080078d3 	.word	0x080078d3
 80052cc:	20000e3a 	.word	0x20000e3a
 80052d0:	080078dd 	.word	0x080078dd
 80052d4:	08007903 	.word	0x08007903
 80052d8:	20000e45 	.word	0x20000e45
 80052dc:	080078cd 	.word	0x080078cd
 80052e0:	080078c5 	.word	0x080078c5
 80052e4:	080078cc 	.word	0x080078cc
 80052e8:	20000e41 	.word	0x20000e41
 80052ec:	a809      	add	r0, sp, #36	; 0x24
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	78a2      	ldrb	r2, [r4, #2]
 80052f2:	9201      	str	r2, [sp, #4]
 80052f4:	7862      	ldrb	r2, [r4, #1]
 80052f6:	9200      	str	r2, [sp, #0]
 80052f8:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <net_poll+0x4c4>)
 80052fa:	f000 ff85 	bl	8006208 <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80052fe:	a809      	add	r0, sp, #36	; 0x24
 8005300:	f7fa ff24 	bl	800014c <strlen>
 8005304:	2364      	movs	r3, #100	; 0x64
 8005306:	b282      	uxth	r2, r0
 8005308:	a909      	add	r1, sp, #36	; 0x24
 800530a:	485b      	ldr	r0, [pc, #364]	; (8005478 <net_poll+0x4c8>)
 800530c:	f7fc fde0 	bl	8001ed0 <HAL_UART_Transmit>

	    	dat_p = fill_tcp_data(net_buf,0,Write_page);
 8005310:	4a5a      	ldr	r2, [pc, #360]	; (800547c <net_poll+0x4cc>)
 8005312:	2100      	movs	r1, #0
 8005314:	485a      	ldr	r0, [pc, #360]	; (8005480 <net_poll+0x4d0>)
 8005316:	f7fe ff9c 	bl	8004252 <fill_tcp_data>
 800531a:	4601      	mov	r1, r0
 800531c:	8028      	strh	r0, [r5, #0]
			www_server_reply(net_buf,dat_p); // send web page data
 800531e:	4858      	ldr	r0, [pc, #352]	; (8005480 <net_poll+0x4d0>)
 8005320:	f7ff f8fe 	bl	8004520 <www_server_reply>

			snprintf(str,sizeof(str),"softreset hardware...\n\r");
 8005324:	4957      	ldr	r1, [pc, #348]	; (8005484 <net_poll+0x4d4>)
            }
            if (sec>60 && start_web_client==2)	start_web_client=0; // reset after a delay to prevent permanent bouncing
        }
        if(dat_p==0) udp_client_check_for_dns_answer(net_buf,p_len);
	} else {
		snprintf(str,sizeof(str),"enc28j60 link is down :(\r\nResetting device...\n\r");
 8005326:	a809      	add	r0, sp, #36	; 0x24
 8005328:	f000 ffa2 	bl	8006270 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800532c:	a809      	add	r0, sp, #36	; 0x24
 800532e:	f7fa ff0d 	bl	800014c <strlen>
 8005332:	2364      	movs	r3, #100	; 0x64
 8005334:	b282      	uxth	r2, r0
 8005336:	a909      	add	r1, sp, #36	; 0x24
 8005338:	484f      	ldr	r0, [pc, #316]	; (8005478 <net_poll+0x4c8>)
 800533a:	f7fc fdc9 	bl	8001ed0 <HAL_UART_Transmit>
		NVIC_SystemReset();
 800533e:	f7ff fc43 	bl	8004bc8 <NVIC_SystemReset>
			dat_p = HomePage();
 8005342:	f7ff fddb 	bl	8004efc <HomePage>
 8005346:	4601      	mov	r1, r0
 8005348:	8028      	strh	r0, [r5, #0]
			www_server_reply(net_buf,dat_p); // send web page data
 800534a:	484d      	ldr	r0, [pc, #308]	; (8005480 <net_poll+0x4d0>)
 800534c:	f7ff f8e8 	bl	8004520 <www_server_reply>
			snprintf(str,sizeof(str),"GET received\r\n");
 8005350:	494d      	ldr	r1, [pc, #308]	; (8005488 <net_poll+0x4d8>)
 8005352:	a809      	add	r0, sp, #36	; 0x24
 8005354:	f000 ff8c 	bl	8006270 <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005358:	a809      	add	r0, sp, #36	; 0x24
 800535a:	f7fa fef7 	bl	800014c <strlen>
 800535e:	2364      	movs	r3, #100	; 0x64
 8005360:	b282      	uxth	r2, r0
 8005362:	a909      	add	r1, sp, #36	; 0x24
 8005364:	4844      	ldr	r0, [pc, #272]	; (8005478 <net_poll+0x4c8>)
 8005366:	f7fc fdb3 	bl	8001ed0 <HAL_UART_Transmit>
		dat_p = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	802b      	strh	r3, [r5, #0]
	uint8_t i = enc28j60linkup();
 800536e:	f7fe fce9 	bl	8003d44 <enc28j60linkup>
	if (i >0) {
 8005372:	2800      	cmp	r0, #0
 8005374:	d07b      	beq.n	800546e <net_poll+0x4be>
		if(p_len==0) {
 8005376:	f8b8 3000 	ldrh.w	r3, [r8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d16d      	bne.n	800545a <net_poll+0x4aa>
			if (gw_arp_state==0) { // find the mac address of the gateway (e.g your dsl router).
 800537e:	4e43      	ldr	r6, [pc, #268]	; (800548c <net_poll+0x4dc>)
 8005380:	7833      	ldrb	r3, [r6, #0]
 8005382:	b933      	cbnz	r3, 8005392 <net_poll+0x3e2>
                get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
 8005384:	4a42      	ldr	r2, [pc, #264]	; (8005490 <net_poll+0x4e0>)
 8005386:	2101      	movs	r1, #1
 8005388:	4842      	ldr	r0, [pc, #264]	; (8005494 <net_poll+0x4e4>)
 800538a:	f7ff f9a1 	bl	80046d0 <get_mac_with_arp>
                gw_arp_state=1;
 800538e:	2301      	movs	r3, #1
 8005390:	7033      	strb	r3, [r6, #0]
            if (get_mac_with_arp_wait()==0 && gw_arp_state==1) gw_arp_state=2; // done we have the mac address of the GW
 8005392:	f7ff f995 	bl	80046c0 <get_mac_with_arp_wait>
 8005396:	b920      	cbnz	r0, 80053a2 <net_poll+0x3f2>
 8005398:	7833      	ldrb	r3, [r6, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	bf04      	itt	eq
 800539e:	2302      	moveq	r3, #2
 80053a0:	7033      	strbeq	r3, [r6, #0]
            if (dns_state==0 && gw_arp_state==2)
 80053a2:	4c3d      	ldr	r4, [pc, #244]	; (8005498 <net_poll+0x4e8>)
 80053a4:	4f3d      	ldr	r7, [pc, #244]	; (800549c <net_poll+0x4ec>)
 80053a6:	f894 9000 	ldrb.w	r9, [r4]
 80053aa:	f1b9 0f00 	cmp.w	r9, #0
 80053ae:	d10e      	bne.n	80053ce <net_poll+0x41e>
 80053b0:	7833      	ldrb	r3, [r6, #0]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d116      	bne.n	80053e4 <net_poll+0x434>
            	if (enc28j60linkup()) { // only for dnslkup_request we have to check if the link is up.
 80053b6:	f7fe fcc5 	bl	8003d44 <enc28j60linkup>
 80053ba:	b140      	cbz	r0, 80053ce <net_poll+0x41e>
                    dns_state=1;
 80053bc:	2301      	movs	r3, #1
                    dnslkup_request(net_buf,WEBSERVER_VHOST,gwmac);
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <net_poll+0x4f0>)
 80053c0:	4938      	ldr	r1, [pc, #224]	; (80054a4 <net_poll+0x4f4>)
 80053c2:	482f      	ldr	r0, [pc, #188]	; (8005480 <net_poll+0x4d0>)
            		sec=0;
 80053c4:	f887 9000 	strb.w	r9, [r7]
                    dns_state=1;
 80053c8:	7023      	strb	r3, [r4, #0]
                    dnslkup_request(net_buf,WEBSERVER_VHOST,gwmac);
 80053ca:	f7fe f967 	bl	800369c <dnslkup_request>
            if (dns_state==1 && dnslkup_haveanswer()) {
 80053ce:	7823      	ldrb	r3, [r4, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <net_poll+0x434>
 80053d4:	f7fe f938 	bl	8003648 <dnslkup_haveanswer>
 80053d8:	b120      	cbz	r0, 80053e4 <net_poll+0x434>
            	dns_state=2;
 80053da:	2302      	movs	r3, #2
            	dnslkup_get_ip(otherside_www_ip);
 80053dc:	4832      	ldr	r0, [pc, #200]	; (80054a8 <net_poll+0x4f8>)
            	dns_state=2;
 80053de:	7023      	strb	r3, [r4, #0]
            	dnslkup_get_ip(otherside_www_ip);
 80053e0:	f7fe f938 	bl	8003654 <dnslkup_get_ip>
            if (dns_state!=2)
 80053e4:	7823      	ldrb	r3, [r4, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d004      	beq.n	80053f4 <net_poll+0x444>
            	if (sec > 60) { // retry every minute if dns-lookup failed:
 80053ea:	783b      	ldrb	r3, [r7, #0]
 80053ec:	2b3c      	cmp	r3, #60	; 0x3c
                	dns_state=0;
 80053ee:	bf84      	itt	hi
 80053f0:	2300      	movhi	r3, #0
 80053f2:	7023      	strbhi	r3, [r4, #0]
            if (start_web_client==1) {
 80053f4:	4c2d      	ldr	r4, [pc, #180]	; (80054ac <net_poll+0x4fc>)
 80053f6:	7822      	ldrb	r2, [r4, #0]
 80053f8:	2a01      	cmp	r2, #1
 80053fa:	d126      	bne.n	800544a <net_poll+0x49a>
            	sec=0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	703b      	strb	r3, [r7, #0]
                start_web_client=2;
 8005400:	2302      	movs	r3, #2
                web_client_attempts++;
 8005402:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <net_poll+0x500>)
                start_web_client=2;
 8005404:	7023      	strb	r3, [r4, #0]
                web_client_attempts++;
 8005406:	7813      	ldrb	r3, [r2, #0]
                mk_net_str(str,pingsrcip,4,'.',10);
 8005408:	492a      	ldr	r1, [pc, #168]	; (80054b4 <net_poll+0x504>)
                web_client_attempts++;
 800540a:	3301      	adds	r3, #1
 800540c:	7013      	strb	r3, [r2, #0]
                mk_net_str(str,pingsrcip,4,'.',10);
 800540e:	230a      	movs	r3, #10
 8005410:	2204      	movs	r2, #4
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	a809      	add	r0, sp, #36	; 0x24
 8005416:	232e      	movs	r3, #46	; 0x2e
 8005418:	f000 fe23 	bl	8006062 <mk_net_str>
                client_browse_url(PSTR("/"),(char*)urlvarstr,PSTR(WEBSERVER_VHOST),&browserresult_callback,otherside_www_ip,gwmac);
 800541c:	4b20      	ldr	r3, [pc, #128]	; (80054a0 <net_poll+0x4f0>)
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <net_poll+0x4f4>)
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <net_poll+0x4f8>)
 8005424:	4924      	ldr	r1, [pc, #144]	; (80054b8 <net_poll+0x508>)
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4824      	ldr	r0, [pc, #144]	; (80054bc <net_poll+0x50c>)
 800542a:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <net_poll+0x510>)
 800542c:	f7ff fa22 	bl	8004874 <client_browse_url>
                snprintf(str,sizeof(str),"exec client_browse_url() function. Server response:\n\r");
 8005430:	4924      	ldr	r1, [pc, #144]	; (80054c4 <net_poll+0x514>)
 8005432:	a809      	add	r0, sp, #36	; 0x24
 8005434:	f000 ff1c 	bl	8006270 <strcpy>
                HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005438:	a809      	add	r0, sp, #36	; 0x24
 800543a:	f7fa fe87 	bl	800014c <strlen>
 800543e:	2364      	movs	r3, #100	; 0x64
 8005440:	b282      	uxth	r2, r0
 8005442:	a909      	add	r1, sp, #36	; 0x24
 8005444:	480c      	ldr	r0, [pc, #48]	; (8005478 <net_poll+0x4c8>)
 8005446:	f7fc fd43 	bl	8001ed0 <HAL_UART_Transmit>
            if (sec>60 && start_web_client==2)	start_web_client=0; // reset after a delay to prevent permanent bouncing
 800544a:	783b      	ldrb	r3, [r7, #0]
 800544c:	2b3c      	cmp	r3, #60	; 0x3c
 800544e:	d904      	bls.n	800545a <net_poll+0x4aa>
 8005450:	7823      	ldrb	r3, [r4, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	bf04      	itt	eq
 8005456:	2300      	moveq	r3, #0
 8005458:	7023      	strbeq	r3, [r4, #0]
        if(dat_p==0) udp_client_check_for_dns_answer(net_buf,p_len);
 800545a:	882b      	ldrh	r3, [r5, #0]
 800545c:	b923      	cbnz	r3, 8005468 <net_poll+0x4b8>
 800545e:	f8b8 1000 	ldrh.w	r1, [r8]
 8005462:	4807      	ldr	r0, [pc, #28]	; (8005480 <net_poll+0x4d0>)
 8005464:	f7fe f990 	bl	8003788 <udp_client_check_for_dns_answer>
	}
}
 8005468:	b022      	add	sp, #136	; 0x88
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		snprintf(str,sizeof(str),"enc28j60 link is down :(\r\nResetting device...\n\r");
 800546e:	4916      	ldr	r1, [pc, #88]	; (80054c8 <net_poll+0x518>)
 8005470:	e759      	b.n	8005326 <net_poll+0x376>
 8005472:	bf00      	nop
 8005474:	0800792d 	.word	0x0800792d
 8005478:	20001250 	.word	0x20001250
 800547c:	08006ed1 	.word	0x08006ed1
 8005480:	20000e4f 	.word	0x20000e4f
 8005484:	0800795e 	.word	0x0800795e
 8005488:	08007976 	.word	0x08007976
 800548c:	200003d9 	.word	0x200003d9
 8005490:	08004bed 	.word	0x08004bed
 8005494:	200012de 	.word	0x200012de
 8005498:	200003d8 	.word	0x200003d8
 800549c:	200003db 	.word	0x200003db
 80054a0:	20001386 	.word	0x20001386
 80054a4:	08007985 	.word	0x08007985
 80054a8:	2000012c 	.word	0x2000012c
 80054ac:	200003dc 	.word	0x200003dc
 80054b0:	200003dd 	.word	0x200003dd
 80054b4:	20001290 	.word	0x20001290
 80054b8:	2000138c 	.word	0x2000138c
 80054bc:	08007991 	.word	0x08007991
 80054c0:	08004c05 	.word	0x08004c05
 80054c4:	08007993 	.word	0x08007993
 80054c8:	080079c9 	.word	0x080079c9

080054cc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80054cc:	2303      	movs	r3, #3
{
 80054ce:	b530      	push	{r4, r5, lr}
 80054d0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80054d2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80054d8:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054da:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054dc:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054de:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054e0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80054e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054e6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80054e8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054ea:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054ec:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80054ee:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054f0:	f7fb fd64 	bl	8000fbc <HAL_RCC_OscConfig>
 80054f4:	b100      	cbz	r0, 80054f8 <SystemClock_Config+0x2c>
 80054f6:	e7fe      	b.n	80054f6 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054f8:	230f      	movs	r3, #15
 80054fa:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80054fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005500:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005502:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005504:	4621      	mov	r1, r4
 8005506:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005508:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800550a:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800550c:	f7fb ff1e 	bl	800134c <HAL_RCC_ClockConfig>
 8005510:	b100      	cbz	r0, 8005514 <SystemClock_Config+0x48>
 8005512:	e7fe      	b.n	8005512 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005514:	2310      	movs	r3, #16
 8005516:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800551c:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800551e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005520:	f7fb ffde 	bl	80014e0 <HAL_RCCEx_PeriphCLKConfig>
 8005524:	4604      	mov	r4, r0
 8005526:	b100      	cbz	r0, 800552a <SystemClock_Config+0x5e>
 8005528:	e7fe      	b.n	8005528 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800552a:	f7fb ffb3 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 800552e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005532:	fbb0 f0f3 	udiv	r0, r0, r3
 8005536:	f7fa fec9 	bl	80002cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800553a:	2004      	movs	r0, #4
 800553c:	f7fa fedc 	bl	80002f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005540:	4622      	mov	r2, r4
 8005542:	4621      	mov	r1, r4
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	f7fa fe80 	bl	800024c <HAL_NVIC_SetPriority>
}
 800554c:	b015      	add	sp, #84	; 0x54
 800554e:	bd30      	pop	{r4, r5, pc}

08005550 <main>:
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b0a6      	sub	sp, #152	; 0x98
  HAL_Init();
 8005554:	f7fa fe32 	bl	80001bc <HAL_Init>
  SystemClock_Config();
 8005558:	f7ff ffb8 	bl	80054cc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800555c:	4b71      	ldr	r3, [pc, #452]	; (8005724 <main+0x1d4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800555e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005562:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005564:	4870      	ldr	r0, [pc, #448]	; (8005728 <main+0x1d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005566:	f042 0210 	orr.w	r2, r2, #16
 800556a:	619a      	str	r2, [r3, #24]
 800556c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005570:	f002 0210 	and.w	r2, r2, #16
 8005574:	9207      	str	r2, [sp, #28]
 8005576:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005578:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800557a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800557c:	f042 0220 	orr.w	r2, r2, #32
 8005580:	619a      	str	r2, [r3, #24]
 8005582:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8005584:	f44f 7600 	mov.w	r6, #512	; 0x200
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005588:	f002 0220 	and.w	r2, r2, #32
 800558c:	9208      	str	r2, [sp, #32]
 800558e:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005590:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005592:	f44f 7782 	mov.w	r7, #260	; 0x104
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005596:	f042 0204 	orr.w	r2, r2, #4
 800559a:	619a      	str	r2, [r3, #24]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	f002 0204 	and.w	r2, r2, #4
 80055a2:	9209      	str	r2, [sp, #36]	; 0x24
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	f042 0208 	orr.w	r2, r2, #8
 80055ac:	619a      	str	r2, [r3, #24]
 80055ae:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80055b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	930a      	str	r3, [sp, #40]	; 0x28
 80055b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80055ba:	f7fb f903 	bl	80007c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETHERNET_CS_GPIO_Port, ETHERNET_CS_Pin, GPIO_PIN_RESET);
 80055be:	2200      	movs	r2, #0
 80055c0:	2110      	movs	r1, #16
 80055c2:	485a      	ldr	r0, [pc, #360]	; (800572c <main+0x1dc>)
 80055c4:	f7fb f8fe 	bl	80007c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ce:	4858      	ldr	r0, [pc, #352]	; (8005730 <main+0x1e0>)
 80055d0:	f7fb f8f8 	bl	80007c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80055d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80055d8:	a90d      	add	r1, sp, #52	; 0x34
 80055da:	4853      	ldr	r0, [pc, #332]	; (8005728 <main+0x1d8>)
  GPIO_InitStruct.Pin = LED_Pin;
 80055dc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055de:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055e2:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80055e4:	f7fb f808 	bl	80005f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055e8:	2304      	movs	r3, #4
 80055ea:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055ec:	4b51      	ldr	r3, [pc, #324]	; (8005734 <main+0x1e4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ee:	a90d      	add	r1, sp, #52	; 0x34
 80055f0:	484e      	ldr	r0, [pc, #312]	; (800572c <main+0x1dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055f2:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f4:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f6:	f7fa ffff 	bl	80005f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETHERNET_CS_Pin;
 80055fa:	2310      	movs	r3, #16
  HAL_GPIO_Init(ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 80055fc:	a90d      	add	r1, sp, #52	; 0x34
 80055fe:	484b      	ldr	r0, [pc, #300]	; (800572c <main+0x1dc>)
  GPIO_InitStruct.Pin = ETHERNET_CS_Pin;
 8005600:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005602:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005606:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 8005608:	f7fa fff6 	bl	80005f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_Pin|SENSE2_Pin|SENSE1_Pin;
 800560c:	f246 0301 	movw	r3, #24577	; 0x6001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005610:	a90d      	add	r1, sp, #52	; 0x34
 8005612:	4847      	ldr	r0, [pc, #284]	; (8005730 <main+0x1e0>)
  GPIO_InitStruct.Pin = BUTTON_Pin|SENSE2_Pin|SENSE1_Pin;
 8005614:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005616:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005618:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800561a:	f7fa ffed 	bl	80005f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561e:	2302      	movs	r3, #2
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8005620:	a90d      	add	r1, sp, #52	; 0x34
 8005622:	4843      	ldr	r0, [pc, #268]	; (8005730 <main+0x1e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005624:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = RELAY_Pin;
 8005626:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005628:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 800562c:	f7fa ffe4 	bl	80005f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005630:	4622      	mov	r2, r4
 8005632:	4621      	mov	r1, r4
 8005634:	2008      	movs	r0, #8
 8005636:	f7fa fe09 	bl	800024c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800563a:	2008      	movs	r0, #8
 800563c:	f7fa fe3a 	bl	80002b4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8005640:	483d      	ldr	r0, [pc, #244]	; (8005738 <main+0x1e8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <main+0x1ec>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005644:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005646:	e880 0088 	stmia.w	r0, {r3, r7}
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800564a:	2308      	movs	r3, #8
 800564c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 800564e:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005650:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005652:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005654:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005656:	6186      	str	r6, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005658:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800565a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800565e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005660:	f7fc f90a 	bl	8001878 <HAL_SPI_Init>
 8005664:	b100      	cbz	r0, 8005668 <main+0x118>
 8005666:	e7fe      	b.n	8005666 <main+0x116>
  huart1.Init.BaudRate = 115200;
 8005668:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Instance = USART1;
 800566c:	4b34      	ldr	r3, [pc, #208]	; (8005740 <main+0x1f0>)
  huart1.Init.BaudRate = 115200;
 800566e:	4a35      	ldr	r2, [pc, #212]	; (8005744 <main+0x1f4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005670:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8005672:	e883 0014 	stmia.w	r3, {r2, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005676:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005678:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800567a:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800567c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800567e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005680:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005682:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005684:	f7fc fbf6 	bl	8001e74 <HAL_UART_Init>
 8005688:	b100      	cbz	r0, 800568c <main+0x13c>
 800568a:	e7fe      	b.n	800568a <main+0x13a>
  htim2.Init.Prescaler = 39999;
 800568c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005690:	f649 433f 	movw	r3, #39999	; 0x9c3f
  htim2.Init.Period = 1000;
 8005694:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  htim2.Instance = TIM2;
 8005698:	4c2b      	ldr	r4, [pc, #172]	; (8005748 <main+0x1f8>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800569a:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800569c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800569e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056a0:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 39999;
 80056a2:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.Period = 1000;
 80056a6:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056aa:	f7fc fad1 	bl	8001c50 <HAL_TIM_Base_Init>
 80056ae:	b100      	cbz	r0, 80056b2 <main+0x162>
 80056b0:	e7fe      	b.n	80056b0 <main+0x160>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056b6:	a90d      	add	r1, sp, #52	; 0x34
 80056b8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056ba:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056be:	f7fc f92e 	bl	800191e <HAL_TIM_ConfigClockSource>
 80056c2:	b100      	cbz	r0, 80056c6 <main+0x176>
 80056c4:	e7fe      	b.n	80056c4 <main+0x174>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056c6:	2720      	movs	r7, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c8:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056ca:	a90b      	add	r1, sp, #44	; 0x2c
 80056cc:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056ce:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056d0:	f7fc fad8 	bl	8001c84 <HAL_TIMEx_MasterConfigSynchronization>
 80056d4:	4606      	mov	r6, r0
 80056d6:	b100      	cbz	r0, 80056da <main+0x18a>
 80056d8:	e7fe      	b.n	80056d8 <main+0x188>
  MX_USB_DEVICE_Init();
 80056da:	f000 fac3 	bl	8005c64 <MX_USB_DEVICE_Init>
  htim1.Init.Prescaler = 48000;
 80056de:	f64b 3380 	movw	r3, #48000	; 0xbb80
  htim1.Instance = TIM1;
 80056e2:	4c1a      	ldr	r4, [pc, #104]	; (800574c <main+0x1fc>)
  htim1.Init.Prescaler = 48000;
 80056e4:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <main+0x200>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056e6:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 48000;
 80056e8:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056ec:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ee:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = 1000;
 80056f0:	f8c4 900c 	str.w	r9, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f4:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80056f6:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056f8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056fa:	f7fc faa9 	bl	8001c50 <HAL_TIM_Base_Init>
 80056fe:	b100      	cbz	r0, 8005702 <main+0x1b2>
 8005700:	e7fe      	b.n	8005700 <main+0x1b0>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005702:	a90d      	add	r1, sp, #52	; 0x34
 8005704:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005706:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800570a:	f7fc f908 	bl	800191e <HAL_TIM_ConfigClockSource>
 800570e:	b100      	cbz	r0, 8005712 <main+0x1c2>
 8005710:	e7fe      	b.n	8005710 <main+0x1c0>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005712:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005714:	a90b      	add	r1, sp, #44	; 0x2c
 8005716:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005718:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800571a:	f7fc fab3 	bl	8001c84 <HAL_TIMEx_MasterConfigSynchronization>
 800571e:	b1c8      	cbz	r0, 8005754 <main+0x204>
 8005720:	e7fe      	b.n	8005720 <main+0x1d0>
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	40011000 	.word	0x40011000
 800572c:	40010800 	.word	0x40010800
 8005730:	40010c00 	.word	0x40010c00
 8005734:	10210000 	.word	0x10210000
 8005738:	200012e8 	.word	0x200012e8
 800573c:	40013000 	.word	0x40013000
 8005740:	20001250 	.word	0x20001250
 8005744:	40013800 	.word	0x40013800
 8005748:	20001340 	.word	0x20001340
 800574c:	20001298 	.word	0x20001298
 8005750:	40012c00 	.word	0x40012c00
  if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port,BUTTON_Pin)==0) WriteDefaultsToEEP();
 8005754:	4629      	mov	r1, r5
 8005756:	4880      	ldr	r0, [pc, #512]	; (8005958 <main+0x408>)
 8005758:	f7fb f82e 	bl	80007b8 <HAL_GPIO_ReadPin>
 800575c:	b908      	cbnz	r0, 8005762 <main+0x212>
 800575e:	f7ff fb59 	bl	8004e14 <WriteDefaultsToEEP>
  EEpromCheckAndRead();
 8005762:	f7ff fb9d 	bl	8004ea0 <EEpromCheckAndRead>
  snprintf(str,sizeof(str),"EEPROM read OK.\n\r");
 8005766:	497d      	ldr	r1, [pc, #500]	; (800595c <main+0x40c>)
 8005768:	a80d      	add	r0, sp, #52	; 0x34
 800576a:	f000 fd81 	bl	8006270 <strcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800576e:	a80d      	add	r0, sp, #52	; 0x34
 8005770:	f7fa fcec 	bl	800014c <strlen>
  enc28j60Init(mymac);
 8005774:	4c7a      	ldr	r4, [pc, #488]	; (8005960 <main+0x410>)
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005776:	b282      	uxth	r2, r0
 8005778:	2364      	movs	r3, #100	; 0x64
 800577a:	a90d      	add	r1, sp, #52	; 0x34
 800577c:	4879      	ldr	r0, [pc, #484]	; (8005964 <main+0x414>)
 800577e:	f7fc fba7 	bl	8001ed0 <HAL_UART_Transmit>
  enc28j60_set_spi(&hspi1);
 8005782:	4879      	ldr	r0, [pc, #484]	; (8005968 <main+0x418>)
 8005784:	f7fe f8f8 	bl	8003978 <enc28j60_set_spi>
  enc28j60Init(mymac);
 8005788:	4620      	mov	r0, r4
 800578a:	f7fe fa31 	bl	8003bf0 <enc28j60Init>
  enc28j60clkout(2);
 800578e:	2002      	movs	r0, #2
 8005790:	f7fe fa28 	bl	8003be4 <enc28j60clkout>
  if (enc28j60getrev()>0) { // check revision of the enc28j60 module
 8005794:	f7fe fab8 	bl	8003d08 <enc28j60getrev>
 8005798:	2800      	cmp	r0, #0
 800579a:	f000 80ce 	beq.w	800593a <main+0x3ea>
	  snprintf(str,sizeof(str),"enc28j60 hardware init ok.\n\renc28j60 module revision: %02X\n\r",enc28j60getrev());
 800579e:	f7fe fab3 	bl	8003d08 <enc28j60getrev>
 80057a2:	4a72      	ldr	r2, [pc, #456]	; (800596c <main+0x41c>)
 80057a4:	4603      	mov	r3, r0
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	a80d      	add	r0, sp, #52	; 0x34
 80057aa:	f000 fd2d 	bl	8006208 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80057ae:	a80d      	add	r0, sp, #52	; 0x34
 80057b0:	f7fa fccc 	bl	800014c <strlen>
 80057b4:	2364      	movs	r3, #100	; 0x64
 80057b6:	b282      	uxth	r2, r0
 80057b8:	a90d      	add	r1, sp, #52	; 0x34
 80057ba:	486a      	ldr	r0, [pc, #424]	; (8005964 <main+0x414>)
 80057bc:	f7fc fb88 	bl	8001ed0 <HAL_UART_Transmit>
      enc28j60PhyWrite(PHLCON,0x476);
 80057c0:	f240 4176 	movw	r1, #1142	; 0x476
 80057c4:	2014      	movs	r0, #20
 80057c6:	f7fe f9f5 	bl	8003bb4 <enc28j60PhyWrite>
      snprintf(str,sizeof(str),"MAC: %02X:%02X:%02X:%02X:%02X:%02X\n\r",mymac[0],mymac[1],mymac[2],mymac[3],mymac[4],mymac[5]);
 80057ca:	7962      	ldrb	r2, [r4, #5]
 80057cc:	7823      	ldrb	r3, [r4, #0]
 80057ce:	9204      	str	r2, [sp, #16]
 80057d0:	7922      	ldrb	r2, [r4, #4]
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	9203      	str	r2, [sp, #12]
 80057d6:	78e2      	ldrb	r2, [r4, #3]
 80057d8:	a80d      	add	r0, sp, #52	; 0x34
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	78a2      	ldrb	r2, [r4, #2]
 80057de:	9201      	str	r2, [sp, #4]
 80057e0:	7862      	ldrb	r2, [r4, #1]
 80057e2:	9200      	str	r2, [sp, #0]
 80057e4:	4a62      	ldr	r2, [pc, #392]	; (8005970 <main+0x420>)
 80057e6:	f000 fd0f 	bl	8006208 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80057ea:	a80d      	add	r0, sp, #52	; 0x34
 80057ec:	f7fa fcae 	bl	800014c <strlen>
 80057f0:	2364      	movs	r3, #100	; 0x64
 80057f2:	b282      	uxth	r2, r0
 80057f4:	a90d      	add	r1, sp, #52	; 0x34
 80057f6:	485b      	ldr	r0, [pc, #364]	; (8005964 <main+0x414>)
 80057f8:	f7fc fb6a 	bl	8001ed0 <HAL_UART_Transmit>
      if (flag_use_dhcp == 1) {
 80057fc:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <main+0x424>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	f040 808a 	bne.w	800591a <main+0x3ca>
    	  rval=0;
 8005806:	2300      	movs	r3, #0
 8005808:	4d5b      	ldr	r5, [pc, #364]	; (8005978 <main+0x428>)
    	  HAL_TIM_Base_Start(&htim1);
 800580a:	485c      	ldr	r0, [pc, #368]	; (800597c <main+0x42c>)
    	  rval=0;
 800580c:	702b      	strb	r3, [r5, #0]
    	  HAL_TIM_Base_Start(&htim1);
 800580e:	f7fc f86e 	bl	80018ee <HAL_TIM_Base_Start>
    	  HAL_TIM_Base_Start_IT(&htim1);
 8005812:	485a      	ldr	r0, [pc, #360]	; (800597c <main+0x42c>)
 8005814:	f7fc f878 	bl	8001908 <HAL_TIM_Base_Start_IT>
    	  init_mac(mymac);
 8005818:	4620      	mov	r0, r4
 800581a:	f7fe fbcb 	bl	8003fb4 <init_mac>
    	  snprintf(str,sizeof(str),"- device use dhcp server, please wait for answer...\n\r");
 800581e:	4958      	ldr	r1, [pc, #352]	; (8005980 <main+0x430>)
 8005820:	a80d      	add	r0, sp, #52	; 0x34
 8005822:	f000 fd25 	bl	8006270 <strcpy>
    	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005826:	a80d      	add	r0, sp, #52	; 0x34
 8005828:	f7fa fc90 	bl	800014c <strlen>
 800582c:	2364      	movs	r3, #100	; 0x64
 800582e:	b282      	uxth	r2, r0
 8005830:	a90d      	add	r1, sp, #52	; 0x34
 8005832:	484c      	ldr	r0, [pc, #304]	; (8005964 <main+0x414>)
 8005834:	f7fc fb4c 	bl	8001ed0 <HAL_UART_Transmit>
    		  p_len=enc28j60PacketReceive(BUFFER_SIZE, net_buf);
 8005838:	4f52      	ldr	r7, [pc, #328]	; (8005984 <main+0x434>)
 800583a:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80059a0 <main+0x450>
    	  while(rval==0) {
 800583e:	782e      	ldrb	r6, [r5, #0]
 8005840:	b1ce      	cbz	r6, 8005876 <main+0x326>
    	  dhcp_get_my_ip(ipaddr,netmask,gwip); // we have an IP:
 8005842:	4c51      	ldr	r4, [pc, #324]	; (8005988 <main+0x438>)
 8005844:	4951      	ldr	r1, [pc, #324]	; (800598c <main+0x43c>)
 8005846:	4622      	mov	r2, r4
 8005848:	4851      	ldr	r0, [pc, #324]	; (8005990 <main+0x440>)
 800584a:	f7fd fee9 	bl	8003620 <dhcp_get_my_ip>
    	  client_ifconfig(ipaddr,netmask);
 800584e:	494f      	ldr	r1, [pc, #316]	; (800598c <main+0x43c>)
 8005850:	484f      	ldr	r0, [pc, #316]	; (8005990 <main+0x440>)
 8005852:	f7fe fbb9 	bl	8003fc8 <client_ifconfig>
    	  if (gwip[0]==0) {
 8005856:	7823      	ldrb	r3, [r4, #0]
 8005858:	b9eb      	cbnz	r3, 8005896 <main+0x346>
    		  snprintf(str,sizeof(str),"\n\r(FAILED)gateway is not returned from server :(\n\r");
 800585a:	494e      	ldr	r1, [pc, #312]	; (8005994 <main+0x444>)
 800585c:	a80d      	add	r0, sp, #52	; 0x34
 800585e:	f000 fd07 	bl	8006270 <strcpy>
    		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005862:	a80d      	add	r0, sp, #52	; 0x34
 8005864:	f7fa fc72 	bl	800014c <strlen>
 8005868:	2364      	movs	r3, #100	; 0x64
 800586a:	b282      	uxth	r2, r0
 800586c:	a90d      	add	r1, sp, #52	; 0x34
 800586e:	483d      	ldr	r0, [pc, #244]	; (8005964 <main+0x414>)
 8005870:	f7fc fb2e 	bl	8001ed0 <HAL_UART_Transmit>
 8005874:	e7fe      	b.n	8005874 <main+0x324>
    		  p_len=enc28j60PacketReceive(BUFFER_SIZE, net_buf);
 8005876:	4943      	ldr	r1, [pc, #268]	; (8005984 <main+0x434>)
 8005878:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800587c:	f7fe faa0 	bl	8003dc0 <enc28j60PacketReceive>
    		  rval=packetloop_dhcp_initial_ip_assignment(net_buf,p_len,mymac[5]);
 8005880:	7962      	ldrb	r2, [r4, #5]
    		  p_len=enc28j60PacketReceive(BUFFER_SIZE, net_buf);
 8005882:	4601      	mov	r1, r0
 8005884:	f8a8 0000 	strh.w	r0, [r8]
    		  rval=packetloop_dhcp_initial_ip_assignment(net_buf,p_len,mymac[5]);
 8005888:	483e      	ldr	r0, [pc, #248]	; (8005984 <main+0x434>)
    		  net_buf[BUFFER_SIZE]='\0';
 800588a:	f887 6400 	strb.w	r6, [r7, #1024]	; 0x400
    		  rval=packetloop_dhcp_initial_ip_assignment(net_buf,p_len,mymac[5]);
 800588e:	f7fd fe49 	bl	8003524 <packetloop_dhcp_initial_ip_assignment>
 8005892:	7028      	strb	r0, [r5, #0]
 8005894:	e7d3      	b.n	800583e <main+0x2ee>
        	  snprintf(str,sizeof(str),"dhcp server give:\n\r");
 8005896:	4940      	ldr	r1, [pc, #256]	; (8005998 <main+0x448>)
 8005898:	a80d      	add	r0, sp, #52	; 0x34
 800589a:	f000 fce9 	bl	8006270 <strcpy>
        	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 800589e:	a80d      	add	r0, sp, #52	; 0x34
 80058a0:	f7fa fc54 	bl	800014c <strlen>
 80058a4:	2364      	movs	r3, #100	; 0x64
 80058a6:	b282      	uxth	r2, r0
 80058a8:	a90d      	add	r1, sp, #52	; 0x34
 80058aa:	482e      	ldr	r0, [pc, #184]	; (8005964 <main+0x414>)
 80058ac:	f7fc fb10 	bl	8001ed0 <HAL_UART_Transmit>
    		  PrintIP();
 80058b0:	f7ff f9ca 	bl	8004c48 <PrintIP>
    	  get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
 80058b4:	4620      	mov	r0, r4
 80058b6:	4a39      	ldr	r2, [pc, #228]	; (800599c <main+0x44c>)
 80058b8:	2101      	movs	r1, #1
 80058ba:	f7fe ff09 	bl	80046d0 <get_mac_with_arp>
    		  p_len=enc28j60PacketReceive(BUFFER_SIZE, net_buf);
 80058be:	4c31      	ldr	r4, [pc, #196]	; (8005984 <main+0x434>)
 80058c0:	4d37      	ldr	r5, [pc, #220]	; (80059a0 <main+0x450>)
    	  while(get_mac_with_arp_wait()) {
 80058c2:	f7fe fefd 	bl	80046c0 <get_mac_with_arp_wait>
 80058c6:	b9e8      	cbnz	r0, 8005904 <main+0x3b4>
    	  if (string_is_ipv4(WEBSERVER_VHOST)) {
 80058c8:	4836      	ldr	r0, [pc, #216]	; (80059a4 <main+0x454>)
 80058ca:	f7fd fecd 	bl	8003668 <string_is_ipv4>
 80058ce:	b118      	cbz	r0, 80058d8 <main+0x388>
    		  parse_ip(otherside_www_ip,WEBSERVER_VHOST);
 80058d0:	4934      	ldr	r1, [pc, #208]	; (80059a4 <main+0x454>)
 80058d2:	4835      	ldr	r0, [pc, #212]	; (80059a8 <main+0x458>)
 80058d4:	f000 fb88 	bl	8005fe8 <parse_ip>
      init_udp_or_www_server(mymac,ipaddr);
 80058d8:	492d      	ldr	r1, [pc, #180]	; (8005990 <main+0x440>)
 80058da:	4821      	ldr	r0, [pc, #132]	; (8005960 <main+0x410>)
 80058dc:	f7fe fdc0 	bl	8004460 <init_udp_or_www_server>
	  www_server_port(80);
 80058e0:	2050      	movs	r0, #80	; 0x50
 80058e2:	f7fe fdcf 	bl	8004484 <www_server_port>
		  start_web_client = 1; // start browseUrl tcp...
 80058e6:	2601      	movs	r6, #1
	  cnt++;
 80058e8:	4c30      	ldr	r4, [pc, #192]	; (80059ac <main+0x45c>)
		  start_web_client = 1; // start browseUrl tcp...
 80058ea:	4d31      	ldr	r5, [pc, #196]	; (80059b0 <main+0x460>)
	  cnt++;
 80058ec:	8823      	ldrh	r3, [r4, #0]
 80058ee:	3301      	adds	r3, #1
 80058f0:	b29b      	uxth	r3, r3
	  if (cnt>MAX_CNT) {
 80058f2:	2b32      	cmp	r3, #50	; 0x32
	  cnt++;
 80058f4:	8023      	strh	r3, [r4, #0]
		  cnt = 0;
 80058f6:	bf82      	ittt	hi
 80058f8:	2300      	movhi	r3, #0
		  start_web_client = 1; // start browseUrl tcp...
 80058fa:	702e      	strbhi	r6, [r5, #0]
		  cnt = 0;
 80058fc:	8023      	strhhi	r3, [r4, #0]
	  net_poll();
 80058fe:	f7ff fb57 	bl	8004fb0 <net_poll>
	  cnt++;
 8005902:	e7f3      	b.n	80058ec <main+0x39c>
    		  p_len=enc28j60PacketReceive(BUFFER_SIZE, net_buf);
 8005904:	4621      	mov	r1, r4
 8005906:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800590a:	f7fe fa59 	bl	8003dc0 <enc28j60PacketReceive>
 800590e:	4601      	mov	r1, r0
 8005910:	8028      	strh	r0, [r5, #0]
    		  packetloop_arp_icmp_tcp(net_buf,p_len);
 8005912:	4620      	mov	r0, r4
 8005914:	f7fe ffde 	bl	80048d4 <packetloop_arp_icmp_tcp>
 8005918:	e7d3      	b.n	80058c2 <main+0x372>
    	  snprintf(str,sizeof(str),"- device use static ip\n\r");
 800591a:	4926      	ldr	r1, [pc, #152]	; (80059b4 <main+0x464>)
 800591c:	a80d      	add	r0, sp, #52	; 0x34
 800591e:	f000 fca7 	bl	8006270 <strcpy>
    	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005922:	a80d      	add	r0, sp, #52	; 0x34
 8005924:	f7fa fc12 	bl	800014c <strlen>
 8005928:	2364      	movs	r3, #100	; 0x64
 800592a:	b282      	uxth	r2, r0
 800592c:	a90d      	add	r1, sp, #52	; 0x34
 800592e:	480d      	ldr	r0, [pc, #52]	; (8005964 <main+0x414>)
 8005930:	f7fc face 	bl	8001ed0 <HAL_UART_Transmit>
    	  PrintIP();
 8005934:	f7ff f988 	bl	8004c48 <PrintIP>
 8005938:	e7ce      	b.n	80058d8 <main+0x388>
	  snprintf(str,sizeof(str),"(FAILED)enc28j60 hardware init false:(\n\rSoft reset hardware...\n\r");
 800593a:	491f      	ldr	r1, [pc, #124]	; (80059b8 <main+0x468>)
 800593c:	a80d      	add	r0, sp, #52	; 0x34
 800593e:	f000 fc97 	bl	8006270 <strcpy>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8005942:	a80d      	add	r0, sp, #52	; 0x34
 8005944:	f7fa fc02 	bl	800014c <strlen>
 8005948:	2364      	movs	r3, #100	; 0x64
 800594a:	b282      	uxth	r2, r0
 800594c:	a90d      	add	r1, sp, #52	; 0x34
 800594e:	4805      	ldr	r0, [pc, #20]	; (8005964 <main+0x414>)
 8005950:	f7fc fabe 	bl	8001ed0 <HAL_UART_Transmit>
	  NVIC_SystemReset();
 8005954:	f7ff f938 	bl	8004bc8 <NVIC_SystemReset>
 8005958:	40010c00 	.word	0x40010c00
 800595c:	080076f7 	.word	0x080076f7
 8005960:	20001380 	.word	0x20001380
 8005964:	20001250 	.word	0x20001250
 8005968:	200012e8 	.word	0x200012e8
 800596c:	08007709 	.word	0x08007709
 8005970:	08007746 	.word	0x08007746
 8005974:	20000e41 	.word	0x20000e41
 8005978:	200003da 	.word	0x200003da
 800597c:	20001298 	.word	0x20001298
 8005980:	0800776b 	.word	0x0800776b
 8005984:	20000e4f 	.word	0x20000e4f
 8005988:	200012de 	.word	0x200012de
 800598c:	20000e49 	.word	0x20000e49
 8005990:	20000e45 	.word	0x20000e45
 8005994:	080077a1 	.word	0x080077a1
 8005998:	080077d4 	.word	0x080077d4
 800599c:	08004bed 	.word	0x08004bed
 80059a0:	20000e34 	.word	0x20000e34
 80059a4:	08007985 	.word	0x08007985
 80059a8:	2000012c 	.word	0x2000012c
 80059ac:	2000012a 	.word	0x2000012a
 80059b0:	200003dc 	.word	0x200003dc
 80059b4:	080077e8 	.word	0x080077e8
 80059b8:	08007801 	.word	0x08007801

080059bc <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	  if(GPIO_Pin== GPIO_PIN_2) {
 80059bc:	2804      	cmp	r0, #4
 80059be:	d103      	bne.n	80059c8 <HAL_GPIO_EXTI_Callback+0xc>
		  client_data_ready = 1;//    net_poll();
 80059c0:	2201      	movs	r2, #1
 80059c2:	4b02      	ldr	r3, [pc, #8]	; (80059cc <HAL_GPIO_EXTI_Callback+0x10>)
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	4770      	bx	lr
 80059c8:	bf00      	nop
 80059ca:	4770      	bx	lr
 80059cc:	20000e40 	.word	0x20000e40

080059d0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80059d0:	e7fe      	b.n	80059d0 <_Error_Handler>
	...

080059d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <HAL_MspInit+0x98>)
{
 80059d6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80059d8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059da:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	619a      	str	r2, [r3, #24]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	f002 0201 	and.w	r2, r2, #1
 80059e8:	9200      	str	r2, [sp, #0]
 80059ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059f2:	61da      	str	r2, [r3, #28]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059fe:	f7fa fc13 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005a02:	2200      	movs	r2, #0
 8005a04:	f06f 000b 	mvn.w	r0, #11
 8005a08:	4611      	mov	r1, r2
 8005a0a:	f7fa fc1f 	bl	800024c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f06f 000a 	mvn.w	r0, #10
 8005a14:	4611      	mov	r1, r2
 8005a16:	f7fa fc19 	bl	800024c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f06f 0009 	mvn.w	r0, #9
 8005a20:	4611      	mov	r1, r2
 8005a22:	f7fa fc13 	bl	800024c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	f06f 0004 	mvn.w	r0, #4
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	f7fa fc0d 	bl	800024c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005a32:	2200      	movs	r2, #0
 8005a34:	f06f 0003 	mvn.w	r0, #3
 8005a38:	4611      	mov	r1, r2
 8005a3a:	f7fa fc07 	bl	800024c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f06f 0001 	mvn.w	r0, #1
 8005a44:	4611      	mov	r1, r2
 8005a46:	f7fa fc01 	bl	800024c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	4611      	mov	r1, r2
 8005a52:	f7fa fbfb 	bl	800024c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a56:	4a06      	ldr	r2, [pc, #24]	; (8005a70 <HAL_MspInit+0x9c>)
 8005a58:	6853      	ldr	r3, [r2, #4]
 8005a5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a62:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a64:	b003      	add	sp, #12
 8005a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40010000 	.word	0x40010000

08005a74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8005a76:	6802      	ldr	r2, [r0, #0]
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_SPI_MspInit+0x4c>)
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d11d      	bne.n	8005aba <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a7e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8005a82:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a84:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a8a:	619a      	str	r2, [r3, #24]
 8005a8c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8e:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a98:	23a0      	movs	r3, #160	; 0xa0
 8005a9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa4:	f7fa fda8 	bl	80005f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aac:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aae:	a902      	add	r1, sp, #8
 8005ab0:	4804      	ldr	r0, [pc, #16]	; (8005ac4 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ab2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab6:	f7fa fd9f 	bl	80005f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005aba:	b007      	add	sp, #28
 8005abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ac0:	40013000 	.word	0x40013000
 8005ac4:	40010800 	.word	0x40010800

08005ac8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ac8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_TIM_Base_MspInit+0x60>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d114      	bne.n	8005afc <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_TIM_Base_MspInit+0x64>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005ad4:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005adc:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005ade:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ae0:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005ae2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005aec:	f7fa fbae 	bl	800024c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005af0:	2019      	movs	r0, #25
  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005af2:	f7fa fbdf 	bl	80002b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005af6:	b003      	add	sp, #12
 8005af8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d1f9      	bne.n	8005af6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b02:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005b06:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b08:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b10:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b12:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b14:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b1e:	f7fa fb95 	bl	800024c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b22:	201c      	movs	r0, #28
 8005b24:	e7e5      	b.n	8005af2 <HAL_TIM_Base_MspInit+0x2a>
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b30:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005b32:	6802      	ldr	r2, [r0, #0]
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <HAL_UART_MspInit+0x60>)
{
 8005b36:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d127      	bne.n	8005b8c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b3c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005b40:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b42:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b48:	619a      	str	r2, [r3, #24]
 8005b4a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b4c:	4811      	ldr	r0, [pc, #68]	; (8005b94 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b60:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b62:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b66:	f7fa fd47 	bl	80005f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6e:	a902      	add	r1, sp, #8
 8005b70:	4808      	ldr	r0, [pc, #32]	; (8005b94 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b74:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b78:	f7fa fd3e 	bl	80005f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005b7c:	2025      	movs	r0, #37	; 0x25
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4621      	mov	r1, r4
 8005b82:	f7fa fb63 	bl	800024c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b86:	2025      	movs	r0, #37	; 0x25
 8005b88:	f7fa fb94 	bl	80002b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005b8c:	b006      	add	sp, #24
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	40013800 	.word	0x40013800
 8005b94:	40010800 	.word	0x40010800

08005b98 <NMI_Handler>:
 8005b98:	4770      	bx	lr

08005b9a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005b9a:	e7fe      	b.n	8005b9a <HardFault_Handler>

08005b9c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005b9c:	e7fe      	b.n	8005b9c <MemManage_Handler>

08005b9e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005b9e:	e7fe      	b.n	8005b9e <BusFault_Handler>

08005ba0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005ba0:	e7fe      	b.n	8005ba0 <UsageFault_Handler>

08005ba2 <SVC_Handler>:
 8005ba2:	4770      	bx	lr

08005ba4 <DebugMon_Handler>:
 8005ba4:	4770      	bx	lr

08005ba6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005ba6:	4770      	bx	lr

08005ba8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005ba8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005baa:	f7fa fb19 	bl	80001e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8005bb2:	f7fa bbae 	b.w	8000312 <HAL_SYSTICK_IRQHandler>

08005bb6 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005bb6:	2004      	movs	r0, #4
 8005bb8:	f7fa be0a 	b.w	80007d0 <HAL_GPIO_EXTI_IRQHandler>

08005bbc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005bbe:	f7fa bf21 	b.w	8000a04 <HAL_PCD_IRQHandler>
 8005bc2:	bf00      	nop
 8005bc4:	200015d0 	.word	0x200015d0

08005bc8 <TIM1_UP_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt.
*/
void TIM1_UP_IRQHandler(void)
{
 8005bc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
extern uint8_t sec;
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005bca:	480a      	ldr	r0, [pc, #40]	; (8005bf4 <TIM1_UP_IRQHandler+0x2c>)
 8005bcc:	f7fb ff65 	bl	8001a9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  sec++;
 8005bd0:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <TIM1_UP_IRQHandler+0x30>)
  gsec++;
 8005bd2:	480a      	ldr	r0, [pc, #40]	; (8005bfc <TIM1_UP_IRQHandler+0x34>)
  sec++;
 8005bd4:	7813      	ldrb	r3, [r2, #0]
  gsec++;
 8005bd6:	7801      	ldrb	r1, [r0, #0]
  sec++;
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b2db      	uxtb	r3, r3
  gsec++;
 8005bdc:	3101      	adds	r1, #1
  if (sec>5)
 8005bde:	2b05      	cmp	r3, #5
  sec++;
 8005be0:	7013      	strb	r3, [r2, #0]
  gsec++;
 8005be2:	7001      	strb	r1, [r0, #0]
  if (sec>5)
 8005be4:	d905      	bls.n	8005bf2 <TIM1_UP_IRQHandler+0x2a>
  {
	  sec=0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	7013      	strb	r3, [r2, #0]
	  dhcp_n6sec_tick(); //dhcp_n6sec_tick();
  }
  // timer interrupt, called automatically every second
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  dhcp_n6sec_tick(); //dhcp_n6sec_tick();
 8005bee:	f7fd baf1 	b.w	80031d4 <dhcp_n6sec_tick>
 8005bf2:	bd08      	pop	{r3, pc}
 8005bf4:	20001298 	.word	0x20001298
 8005bf8:	200003db 	.word	0x200003db
 8005bfc:	200003df 	.word	0x200003df

08005c00 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <TIM2_IRQHandler+0x8>)
 8005c02:	f7fb bf4a 	b.w	8001a9a <HAL_TIM_IRQHandler>
 8005c06:	bf00      	nop
 8005c08:	20001340 	.word	0x20001340

08005c0c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <USART1_IRQHandler+0x8>)
 8005c0e:	f7fc b9fd 	b.w	800200c <HAL_UART_IRQHandler>
 8005c12:	bf00      	nop
 8005c14:	20001250 	.word	0x20001250

08005c18 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <SystemInit+0x40>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	4a0d      	ldr	r2, [pc, #52]	; (8005c5c <SystemInit+0x44>)
 8005c26:	400a      	ands	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005c30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c34:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c3c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005c44:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005c46:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005c4a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005c4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c50:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <SystemInit+0x48>)
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	f8ff0000 	.word	0xf8ff0000
 8005c60:	e000ed00 	.word	0xe000ed00

08005c64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005c66:	4c09      	ldr	r4, [pc, #36]	; (8005c8c <MX_USB_DEVICE_Init+0x28>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4909      	ldr	r1, [pc, #36]	; (8005c90 <MX_USB_DEVICE_Init+0x2c>)
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7fc ffa0 	bl	8002bb2 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005c72:	4908      	ldr	r1, [pc, #32]	; (8005c94 <MX_USB_DEVICE_Init+0x30>)
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7fc ffb1 	bl	8002bdc <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4906      	ldr	r1, [pc, #24]	; (8005c98 <MX_USB_DEVICE_Init+0x34>)
 8005c7e:	f7fc ff70 	bl	8002b62 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8005c82:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8005c88:	f7fc bfaf 	b.w	8002bea <USBD_Start>
 8005c8c:	200013a4 	.word	0x200013a4
 8005c90:	20000144 	.word	0x20000144
 8005c94:	20000008 	.word	0x20000008
 8005c98:	20000134 	.word	0x20000134

08005c9c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	4770      	bx	lr

08005ca0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	4770      	bx	lr

08005ca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005ca6:	4c05      	ldr	r4, [pc, #20]	; (8005cbc <CDC_Receive_FS+0x18>)
 8005ca8:	4601      	mov	r1, r0
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7fc ff68 	bl	8002b80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7fc ff6b 	bl	8002b8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	200013a4 	.word	0x200013a4

08005cc0 <CDC_Init_FS>:
{
 8005cc0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005cc2:	4c06      	ldr	r4, [pc, #24]	; (8005cdc <CDC_Init_FS+0x1c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4906      	ldr	r1, [pc, #24]	; (8005ce0 <CDC_Init_FS+0x20>)
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fc ff51 	bl	8002b70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005cce:	4905      	ldr	r1, [pc, #20]	; (8005ce4 <CDC_Init_FS+0x24>)
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7fc ff55 	bl	8002b80 <USBD_CDC_SetRxBuffer>
}
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	bd10      	pop	{r4, pc}
 8005cda:	bf00      	nop
 8005cdc:	200013a4 	.word	0x200013a4
 8005ce0:	200015cc 	.word	0x200015cc
 8005ce4:	200015c8 	.word	0x200015c8

08005ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005ce8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <HAL_PCD_MspInit+0x38>)
 8005cec:	6802      	ldr	r2, [r0, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d112      	bne.n	8005d18 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005cf2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005cf6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005cf8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005cfa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005cfe:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005d00:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005d02:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005d04:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005d0e:	f7fa fa9d 	bl	800024c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005d12:	2014      	movs	r0, #20
 8005d14:	f7fa face 	bl	80002b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005d18:	b003      	add	sp, #12
 8005d1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d1e:	bf00      	nop
 8005d20:	40005c00 	.word	0x40005c00

08005d24 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d24:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8005d28:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d2c:	f7fc bf74 	b.w	8002c18 <USBD_LL_SetupStage>

08005d30 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d30:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005d34:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8005d38:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d3c:	f7fc bf99 	b.w	8002c72 <USBD_LL_DataOutStage>

08005d40 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d40:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d46:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d4a:	f7fc bfc4 	b.w	8002cd6 <USBD_LL_DataInStage>

08005d4e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d4e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d52:	f7fd b840 	b.w	8002dd6 <USBD_LL_SOF>

08005d56 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005d56:	b510      	push	{r4, lr}
 8005d58:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d60:	f7fd f827 	bl	8002db2 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d64:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8005d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d6c:	f7fd b802 	b.w	8002d74 <USBD_LL_Reset>

08005d70 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005d74:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d78:	f7fd f81e 	bl	8002db8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005d7c:	69a3      	ldr	r3, [r4, #24]
 8005d7e:	b123      	cbz	r3, 8005d8a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005d80:	4a02      	ldr	r2, [pc, #8]	; (8005d8c <HAL_PCD_SuspendCallback+0x1c>)
 8005d82:	6913      	ldr	r3, [r2, #16]
 8005d84:	f043 0306 	orr.w	r3, r3, #6
 8005d88:	6113      	str	r3, [r2, #16]
 8005d8a:	bd10      	pop	{r4, pc}
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005d90:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8005d94:	f7fd b819 	b.w	8002dca <USBD_LL_Resume>

08005d98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005d98:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	f04f 0e03 	mov.w	lr, #3
{
 8005da2:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8005da4:	491d      	ldr	r1, [pc, #116]	; (8005e1c <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8005da6:	481e      	ldr	r0, [pc, #120]	; (8005e20 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8005da8:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005dac:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8005dae:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8005db2:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005db6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005db8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005dba:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005dbc:	f7fa fd14 	bl	80007e8 <HAL_PCD_Init>
 8005dc0:	b120      	cbz	r0, 8005dcc <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005dc2:	f240 112b 	movw	r1, #299	; 0x12b
 8005dc6:	4817      	ldr	r0, [pc, #92]	; (8005e24 <USBD_LL_Init+0x8c>)
 8005dc8:	f7ff fe02 	bl	80059d0 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2318      	movs	r3, #24
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005dd6:	f7fb f8d9 	bl	8000f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005dda:	2358      	movs	r3, #88	; 0x58
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005de4:	f7fb f8d2 	bl	8000f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005de8:	23c0      	movs	r3, #192	; 0xc0
 8005dea:	2200      	movs	r2, #0
 8005dec:	2181      	movs	r1, #129	; 0x81
 8005dee:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005df2:	f7fb f8cb 	bl	8000f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005df6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005e02:	f7fb f8c3 	bl	8000f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2182      	movs	r1, #130	; 0x82
 8005e0e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005e12:	f7fb f8bb 	bl	8000f8c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8005e16:	2000      	movs	r0, #0
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40005c00 	.word	0x40005c00
 8005e20:	200015d0 	.word	0x200015d0
 8005e24:	08007a15 	.word	0x08007a15

08005e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005e28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005e2a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e2e:	f7fa fd44 	bl	80008ba <HAL_PCD_Start>
 8005e32:	2803      	cmp	r0, #3
 8005e34:	bf9a      	itte	ls
 8005e36:	4b02      	ldrls	r3, [pc, #8]	; (8005e40 <USBD_LL_Start+0x18>)
 8005e38:	5c18      	ldrbls	r0, [r3, r0]
 8005e3a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005e3c:	bd08      	pop	{r3, pc}
 8005e3e:	bf00      	nop
 8005e40:	08007a11 	.word	0x08007a11

08005e44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005e44:	b510      	push	{r4, lr}
 8005e46:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005e48:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	4622      	mov	r2, r4
 8005e50:	f7fa fd5e 	bl	8000910 <HAL_PCD_EP_Open>
 8005e54:	2803      	cmp	r0, #3
 8005e56:	bf9a      	itte	ls
 8005e58:	4b01      	ldrls	r3, [pc, #4]	; (8005e60 <USBD_LL_OpenEP+0x1c>)
 8005e5a:	5c18      	ldrbls	r0, [r3, r0]
 8005e5c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	08007a11 	.word	0x08007a11

08005e64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e6a:	f7fa fd74 	bl	8000956 <HAL_PCD_EP_Close>
 8005e6e:	2803      	cmp	r0, #3
 8005e70:	bf9a      	itte	ls
 8005e72:	4b02      	ldrls	r3, [pc, #8]	; (8005e7c <USBD_LL_CloseEP+0x18>)
 8005e74:	5c18      	ldrbls	r0, [r3, r0]
 8005e76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005e78:	bd08      	pop	{r3, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08007a11 	.word	0x08007a11

08005e80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005e82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e86:	f7fb f835 	bl	8000ef4 <HAL_PCD_EP_SetStall>
 8005e8a:	2803      	cmp	r0, #3
 8005e8c:	bf9a      	itte	ls
 8005e8e:	4b02      	ldrls	r3, [pc, #8]	; (8005e98 <USBD_LL_StallEP+0x18>)
 8005e90:	5c18      	ldrbls	r0, [r3, r0]
 8005e92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005e94:	bd08      	pop	{r3, pc}
 8005e96:	bf00      	nop
 8005e98:	08007a11 	.word	0x08007a11

08005e9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005e9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ea2:	f7fb f850 	bl	8000f46 <HAL_PCD_EP_ClrStall>
 8005ea6:	2803      	cmp	r0, #3
 8005ea8:	bf9a      	itte	ls
 8005eaa:	4b02      	ldrls	r3, [pc, #8]	; (8005eb4 <USBD_LL_ClearStallEP+0x18>)
 8005eac:	5c18      	ldrbls	r0, [r3, r0]
 8005eae:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005eb0:	bd08      	pop	{r3, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08007a11 	.word	0x08007a11

08005eb8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005eb8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005eba:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ebe:	bf45      	ittet	mi
 8005ec0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8005ec4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005ec8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ecc:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005ed0:	bf58      	it	pl
 8005ed2:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8005ed6:	4770      	bx	lr

08005ed8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005ed8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005eda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ede:	f7fa fd03 	bl	80008e8 <HAL_PCD_SetAddress>
 8005ee2:	2803      	cmp	r0, #3
 8005ee4:	bf9a      	itte	ls
 8005ee6:	4b02      	ldrls	r3, [pc, #8]	; (8005ef0 <USBD_LL_SetUSBAddress+0x18>)
 8005ee8:	5c18      	ldrbls	r0, [r3, r0]
 8005eea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005eec:	bd08      	pop	{r3, pc}
 8005eee:	bf00      	nop
 8005ef0:	08007a11 	.word	0x08007a11

08005ef4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005ef4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005ef6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005efa:	f7fa fd6c 	bl	80009d6 <HAL_PCD_EP_Transmit>
 8005efe:	2803      	cmp	r0, #3
 8005f00:	bf9a      	itte	ls
 8005f02:	4b02      	ldrls	r3, [pc, #8]	; (8005f0c <USBD_LL_Transmit+0x18>)
 8005f04:	5c18      	ldrbls	r0, [r3, r0]
 8005f06:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005f08:	bd08      	pop	{r3, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08007a11 	.word	0x08007a11

08005f10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005f10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005f12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005f16:	f7fa fd3f 	bl	8000998 <HAL_PCD_EP_Receive>
 8005f1a:	2803      	cmp	r0, #3
 8005f1c:	bf9a      	itte	ls
 8005f1e:	4b02      	ldrls	r3, [pc, #8]	; (8005f28 <USBD_LL_PrepareReceive+0x18>)
 8005f20:	5c18      	ldrbls	r0, [r3, r0]
 8005f22:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005f24:	bd08      	pop	{r3, pc}
 8005f26:	bf00      	nop
 8005f28:	08007a11 	.word	0x08007a11

08005f2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f2c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005f2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005f32:	f7fa fd49 	bl	80009c8 <HAL_PCD_EP_GetRxCount>
}
 8005f36:	bd08      	pop	{r3, pc}

08005f38 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005f38:	4800      	ldr	r0, [pc, #0]	; (8005f3c <USBD_static_malloc+0x4>)
 8005f3a:	4770      	bx	lr
 8005f3c:	200003e0 	.word	0x200003e0

08005f40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f40:	4770      	bx	lr

08005f42 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8005f42:	4770      	bx	lr

08005f44 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f44:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005f46:	4801      	ldr	r0, [pc, #4]	; (8005f4c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f48:	800b      	strh	r3, [r1, #0]
}
 8005f4a:	4770      	bx	lr
 8005f4c:	20000160 	.word	0x20000160

08005f50 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8005f50:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005f52:	4801      	ldr	r0, [pc, #4]	; (8005f58 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005f54:	800b      	strh	r3, [r1, #0]
}
 8005f56:	4770      	bx	lr
 8005f58:	20000174 	.word	0x20000174

08005f5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f5c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f5e:	4c04      	ldr	r4, [pc, #16]	; (8005f70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005f60:	460a      	mov	r2, r1
 8005f62:	4804      	ldr	r0, [pc, #16]	; (8005f74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7fd f8d6 	bl	8003116 <USBD_GetString>
  return USBD_StrDesc;
}
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop
 8005f70:	20001a30 	.word	0x20001a30
 8005f74:	08007a41 	.word	0x08007a41

08005f78 <USBD_FS_ProductStrDescriptor>:
{
 8005f78:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f7a:	4c04      	ldr	r4, [pc, #16]	; (8005f8c <USBD_FS_ProductStrDescriptor+0x14>)
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	4804      	ldr	r0, [pc, #16]	; (8005f90 <USBD_FS_ProductStrDescriptor+0x18>)
 8005f80:	4621      	mov	r1, r4
 8005f82:	f7fd f8c8 	bl	8003116 <USBD_GetString>
}
 8005f86:	4620      	mov	r0, r4
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20001a30 	.word	0x20001a30
 8005f90:	08007a54 	.word	0x08007a54

08005f94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f94:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005f96:	4c04      	ldr	r4, [pc, #16]	; (8005fa8 <USBD_FS_SerialStrDescriptor+0x14>)
 8005f98:	460a      	mov	r2, r1
 8005f9a:	4804      	ldr	r0, [pc, #16]	; (8005fac <USBD_FS_SerialStrDescriptor+0x18>)
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	f7fd f8ba 	bl	8003116 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20001a30 	.word	0x20001a30
 8005fac:	08007a6a 	.word	0x08007a6a

08005fb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fb0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fb2:	4c04      	ldr	r4, [pc, #16]	; (8005fc4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f7fd f8ac 	bl	8003116 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20001a30 	.word	0x20001a30
 8005fc8:	08007a28 	.word	0x08007a28

08005fcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fce:	4c04      	ldr	r4, [pc, #16]	; (8005fe0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005fd0:	460a      	mov	r2, r1
 8005fd2:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7fd f89e 	bl	8003116 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005fda:	4620      	mov	r0, r4
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001a30 	.word	0x20001a30
 8005fe4:	08007a33 	.word	0x08007a33

08005fe8 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
 8005fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
 8005fec:	2400      	movs	r4, #0
{
 8005fee:	4606      	mov	r6, r0
                ip_byte_str[i]=0;
 8005ff0:	4623      	mov	r3, r4
                if (bufpos < 3 && isdigit(*str)){
                        strbuf[bufpos]=*str; // copy
                        bufpos++;
                }
                if (bufpos && *str == '.'){
                        strbuf[bufpos]='\0';
 8005ff2:	46a0      	mov	r8, r4
                ip_byte_str[i]=0;
 8005ff4:	7004      	strb	r4, [r0, #0]
 8005ff6:	7044      	strb	r4, [r0, #1]
 8005ff8:	7084      	strb	r4, [r0, #2]
 8005ffa:	70c4      	strb	r4, [r0, #3]
 8005ffc:	1e4f      	subs	r7, r1, #1
        while(*str && i<4){
 8005ffe:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8006002:	b305      	cbz	r5, 8006046 <parse_ip+0x5e>
 8006004:	2c03      	cmp	r4, #3
 8006006:	d901      	bls.n	800600c <parse_ip+0x24>
        if (i==3){ // must have read the first componets of the IP
                strbuf[bufpos]='\0';
                ip_byte_str[i]=(atoi(strbuf)&0xff);
                return(0);
        }
        return(1);
 8006008:	2001      	movs	r0, #1
 800600a:	e027      	b.n	800605c <parse_ip+0x74>
                if (bufpos < 3 && isdigit(*str)){
 800600c:	2b02      	cmp	r3, #2
 800600e:	d809      	bhi.n	8006024 <parse_ip+0x3c>
 8006010:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8006014:	2a09      	cmp	r2, #9
 8006016:	d813      	bhi.n	8006040 <parse_ip+0x58>
                        strbuf[bufpos]=*str; // copy
 8006018:	aa02      	add	r2, sp, #8
 800601a:	441a      	add	r2, r3
                        bufpos++;
 800601c:	3301      	adds	r3, #1
                        strbuf[bufpos]=*str; // copy
 800601e:	f802 5c04 	strb.w	r5, [r2, #-4]
                        bufpos++;
 8006022:	b2db      	uxtb	r3, r3
                if (bufpos && *str == '.'){
 8006024:	2d2e      	cmp	r5, #46	; 0x2e
 8006026:	d1ea      	bne.n	8005ffe <parse_ip+0x16>
                        strbuf[bufpos]='\0';
 8006028:	aa02      	add	r2, sp, #8
 800602a:	4413      	add	r3, r2
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
 800602c:	a801      	add	r0, sp, #4
                        strbuf[bufpos]='\0';
 800602e:	f803 8c04 	strb.w	r8, [r3, #-4]
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
 8006032:	f000 f862 	bl	80060fa <atoi>
 8006036:	5530      	strb	r0, [r6, r4]
                        i++;
 8006038:	3401      	adds	r4, #1
 800603a:	b2e4      	uxtb	r4, r4
                        bufpos=0;
 800603c:	2300      	movs	r3, #0
 800603e:	e7de      	b.n	8005ffe <parse_ip+0x16>
                if (bufpos && *str == '.'){
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0dc      	beq.n	8005ffe <parse_ip+0x16>
 8006044:	e7ee      	b.n	8006024 <parse_ip+0x3c>
        if (i==3){ // must have read the first componets of the IP
 8006046:	2c03      	cmp	r4, #3
 8006048:	d1de      	bne.n	8006008 <parse_ip+0x20>
                strbuf[bufpos]='\0';
 800604a:	aa02      	add	r2, sp, #8
 800604c:	4413      	add	r3, r2
                ip_byte_str[i]=(atoi(strbuf)&0xff);
 800604e:	a801      	add	r0, sp, #4
                strbuf[bufpos]='\0';
 8006050:	f803 5c04 	strb.w	r5, [r3, #-4]
                ip_byte_str[i]=(atoi(strbuf)&0xff);
 8006054:	f000 f851 	bl	80060fa <atoi>
 8006058:	70f0      	strb	r0, [r6, #3]
                return(0);
 800605a:	4628      	mov	r0, r5
}
 800605c:	b002      	add	sp, #8
 800605e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006062 <mk_net_str>:

// take a byte string and convert it to a human readable display string  (base is 10 for ip and 16 for mac addr), len is 4 for IP addr and 6 for mac.
void mk_net_str(char *resultstr,uint8_t *ip_byte_str,uint8_t len,char separator,uint8_t base)
{
 8006062:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006066:	4605      	mov	r5, r0
 8006068:	4698      	mov	r8, r3
        uint8_t i=0;
        uint8_t j=0;
 800606a:	2400      	movs	r4, #0
 800606c:	3a01      	subs	r2, #1
{
 800606e:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8006072:	1e4f      	subs	r7, r1, #1
 8006074:	188e      	adds	r6, r1, r2
        while(i<len){
 8006076:	42b7      	cmp	r7, r6
 8006078:	d105      	bne.n	8006086 <mk_net_str+0x24>
                        j++;
                }
                i++;
        }
        j--;
        resultstr[j]='\0';
 800607a:	2300      	movs	r3, #0
        j--;
 800607c:	3c01      	subs	r4, #1
        resultstr[j]='\0';
 800607e:	b2e4      	uxtb	r4, r4
 8006080:	552b      	strb	r3, [r5, r4]
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                itoa((int)ip_byte_str[i],&resultstr[j],base);
 8006086:	464a      	mov	r2, r9
 8006088:	1929      	adds	r1, r5, r4
 800608a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 800608e:	f000 f885 	bl	800619c <itoa>
                while(resultstr[j]){j++;}
 8006092:	5d2a      	ldrb	r2, [r5, r4]
 8006094:	192b      	adds	r3, r5, r4
 8006096:	b93a      	cbnz	r2, 80060a8 <mk_net_str+0x46>
                if (separator){ // no separator, separator==NULL is as well possible, suggested by andras tucsni
 8006098:	f1b8 0f00 	cmp.w	r8, #0
 800609c:	d0eb      	beq.n	8006076 <mk_net_str+0x14>
                        j++;
 800609e:	3401      	adds	r4, #1
                        resultstr[j]=separator;
 80060a0:	f883 8000 	strb.w	r8, [r3]
                        j++;
 80060a4:	b2e4      	uxtb	r4, r4
 80060a6:	e7e6      	b.n	8006076 <mk_net_str+0x14>
                while(resultstr[j]){j++;}
 80060a8:	3401      	adds	r4, #1
 80060aa:	b2e4      	uxtb	r4, r4
 80060ac:	e7f1      	b.n	8006092 <mk_net_str+0x30>
	...

080060b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80060b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80060b2:	e003      	b.n	80060bc <LoopCopyDataInit>

080060b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80060b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80060b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80060ba:	3104      	adds	r1, #4

080060bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80060bc:	480a      	ldr	r0, [pc, #40]	; (80060e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80060be:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80060c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80060c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80060c4:	d3f6      	bcc.n	80060b4 <CopyDataInit>
  ldr r2, =_sbss
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80060c8:	e002      	b.n	80060d0 <LoopFillZerobss>

080060ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80060ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80060cc:	f842 3b04 	str.w	r3, [r2], #4

080060d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80060d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80060d4:	d3f9      	bcc.n	80060ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80060d6:	f7ff fd9f 	bl	8005c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060da:	f000 f813 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060de:	f7ff fa37 	bl	8005550 <main>
  bx lr
 80060e2:	4770      	bx	lr
  ldr r3, =_sidata
 80060e4:	08007be4 	.word	0x08007be4
  ldr r0, =_sdata
 80060e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80060ec:	20000348 	.word	0x20000348
  ldr r2, =_sbss
 80060f0:	20000348 	.word	0x20000348
  ldr r3, = _ebss
 80060f4:	20001c34 	.word	0x20001c34

080060f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060f8:	e7fe      	b.n	80060f8 <ADC1_2_IRQHandler>

080060fa <atoi>:
 80060fa:	220a      	movs	r2, #10
 80060fc:	2100      	movs	r1, #0
 80060fe:	f000 b96d 	b.w	80063dc <strtol>
	...

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	2500      	movs	r5, #0
 8006108:	4e0c      	ldr	r6, [pc, #48]	; (800613c <__libc_init_array+0x38>)
 800610a:	4c0d      	ldr	r4, [pc, #52]	; (8006140 <__libc_init_array+0x3c>)
 800610c:	1ba4      	subs	r4, r4, r6
 800610e:	10a4      	asrs	r4, r4, #2
 8006110:	42a5      	cmp	r5, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	f000 fdda 	bl	8006ccc <_init>
 8006118:	2500      	movs	r5, #0
 800611a:	4e0a      	ldr	r6, [pc, #40]	; (8006144 <__libc_init_array+0x40>)
 800611c:	4c0a      	ldr	r4, [pc, #40]	; (8006148 <__libc_init_array+0x44>)
 800611e:	1ba4      	subs	r4, r4, r6
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	42a5      	cmp	r5, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800612c:	4798      	blx	r3
 800612e:	3501      	adds	r5, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006136:	4798      	blx	r3
 8006138:	3501      	adds	r5, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	08007bdc 	.word	0x08007bdc
 8006140:	08007bdc 	.word	0x08007bdc
 8006144:	08007bdc 	.word	0x08007bdc
 8006148:	08007be0 	.word	0x08007be0

0800614c <isblank>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4604      	mov	r4, r0
 8006150:	f000 f82a 	bl	80061a8 <__locale_ctype_ptr>
 8006154:	4420      	add	r0, r4
 8006156:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db04      	blt.n	8006168 <isblank+0x1c>
 800615e:	f1a4 0309 	sub.w	r3, r4, #9
 8006162:	4258      	negs	r0, r3
 8006164:	4158      	adcs	r0, r3
 8006166:	bd10      	pop	{r4, pc}
 8006168:	2001      	movs	r0, #1
 800616a:	bd10      	pop	{r4, pc}

0800616c <__itoa>:
 800616c:	1e93      	subs	r3, r2, #2
 800616e:	2b22      	cmp	r3, #34	; 0x22
 8006170:	b510      	push	{r4, lr}
 8006172:	460c      	mov	r4, r1
 8006174:	d904      	bls.n	8006180 <__itoa+0x14>
 8006176:	2300      	movs	r3, #0
 8006178:	461c      	mov	r4, r3
 800617a:	700b      	strb	r3, [r1, #0]
 800617c:	4620      	mov	r0, r4
 800617e:	bd10      	pop	{r4, pc}
 8006180:	2a0a      	cmp	r2, #10
 8006182:	d109      	bne.n	8006198 <__itoa+0x2c>
 8006184:	2800      	cmp	r0, #0
 8006186:	da07      	bge.n	8006198 <__itoa+0x2c>
 8006188:	232d      	movs	r3, #45	; 0x2d
 800618a:	700b      	strb	r3, [r1, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	4240      	negs	r0, r0
 8006190:	4421      	add	r1, r4
 8006192:	f000 f939 	bl	8006408 <__utoa>
 8006196:	e7f1      	b.n	800617c <__itoa+0x10>
 8006198:	2100      	movs	r1, #0
 800619a:	e7f9      	b.n	8006190 <__itoa+0x24>

0800619c <itoa>:
 800619c:	f7ff bfe6 	b.w	800616c <__itoa>

080061a0 <__locale_ctype_ptr_l>:
 80061a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80061a4:	4770      	bx	lr
	...

080061a8 <__locale_ctype_ptr>:
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <__locale_ctype_ptr+0x14>)
 80061aa:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <__locale_ctype_ptr+0x18>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf08      	it	eq
 80061b4:	4613      	moveq	r3, r2
 80061b6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80061ba:	4770      	bx	lr
 80061bc:	200002e4 	.word	0x200002e4
 80061c0:	20000178 	.word	0x20000178

080061c4 <__ascii_mbtowc>:
 80061c4:	b082      	sub	sp, #8
 80061c6:	b901      	cbnz	r1, 80061ca <__ascii_mbtowc+0x6>
 80061c8:	a901      	add	r1, sp, #4
 80061ca:	b142      	cbz	r2, 80061de <__ascii_mbtowc+0x1a>
 80061cc:	b14b      	cbz	r3, 80061e2 <__ascii_mbtowc+0x1e>
 80061ce:	7813      	ldrb	r3, [r2, #0]
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	1c10      	adds	r0, r2, #0
 80061d6:	bf18      	it	ne
 80061d8:	2001      	movne	r0, #1
 80061da:	b002      	add	sp, #8
 80061dc:	4770      	bx	lr
 80061de:	4610      	mov	r0, r2
 80061e0:	e7fb      	b.n	80061da <__ascii_mbtowc+0x16>
 80061e2:	f06f 0001 	mvn.w	r0, #1
 80061e6:	e7f8      	b.n	80061da <__ascii_mbtowc+0x16>

080061e8 <memcmp>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	3901      	subs	r1, #1
 80061ec:	4402      	add	r2, r0
 80061ee:	4290      	cmp	r0, r2
 80061f0:	d101      	bne.n	80061f6 <memcmp+0xe>
 80061f2:	2000      	movs	r0, #0
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061fe:	42a3      	cmp	r3, r4
 8006200:	d0f5      	beq.n	80061ee <memcmp+0x6>
 8006202:	1b18      	subs	r0, r3, r4
 8006204:	bd10      	pop	{r4, pc}
	...

08006208 <sniprintf>:
 8006208:	b40c      	push	{r2, r3}
 800620a:	b530      	push	{r4, r5, lr}
 800620c:	4b17      	ldr	r3, [pc, #92]	; (800626c <sniprintf+0x64>)
 800620e:	1e0c      	subs	r4, r1, #0
 8006210:	b09d      	sub	sp, #116	; 0x74
 8006212:	681d      	ldr	r5, [r3, #0]
 8006214:	da08      	bge.n	8006228 <sniprintf+0x20>
 8006216:	238b      	movs	r3, #139	; 0x8b
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	b01d      	add	sp, #116	; 0x74
 8006220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006224:	b002      	add	sp, #8
 8006226:	4770      	bx	lr
 8006228:	f44f 7302 	mov.w	r3, #520	; 0x208
 800622c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006230:	bf0c      	ite	eq
 8006232:	4623      	moveq	r3, r4
 8006234:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	9307      	str	r3, [sp, #28]
 800623c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006240:	9002      	str	r0, [sp, #8]
 8006242:	9006      	str	r0, [sp, #24]
 8006244:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006248:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800624a:	ab21      	add	r3, sp, #132	; 0x84
 800624c:	a902      	add	r1, sp, #8
 800624e:	4628      	mov	r0, r5
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	f000 f981 	bl	8006558 <_svfiprintf_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	bfbc      	itt	lt
 800625a:	238b      	movlt	r3, #139	; 0x8b
 800625c:	602b      	strlt	r3, [r5, #0]
 800625e:	2c00      	cmp	r4, #0
 8006260:	d0dd      	beq.n	800621e <sniprintf+0x16>
 8006262:	2200      	movs	r2, #0
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	e7d9      	b.n	800621e <sniprintf+0x16>
 800626a:	bf00      	nop
 800626c:	200002e4 	.word	0x200002e4

08006270 <strcpy>:
 8006270:	4603      	mov	r3, r0
 8006272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006276:	f803 2b01 	strb.w	r2, [r3], #1
 800627a:	2a00      	cmp	r2, #0
 800627c:	d1f9      	bne.n	8006272 <strcpy+0x2>
 800627e:	4770      	bx	lr

08006280 <strncmp>:
 8006280:	b510      	push	{r4, lr}
 8006282:	b16a      	cbz	r2, 80062a0 <strncmp+0x20>
 8006284:	3901      	subs	r1, #1
 8006286:	1884      	adds	r4, r0, r2
 8006288:	f810 3b01 	ldrb.w	r3, [r0], #1
 800628c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006290:	4293      	cmp	r3, r2
 8006292:	d103      	bne.n	800629c <strncmp+0x1c>
 8006294:	42a0      	cmp	r0, r4
 8006296:	d001      	beq.n	800629c <strncmp+0x1c>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f5      	bne.n	8006288 <strncmp+0x8>
 800629c:	1a98      	subs	r0, r3, r2
 800629e:	bd10      	pop	{r4, pc}
 80062a0:	4610      	mov	r0, r2
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <strstr>:
 80062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a6:	7803      	ldrb	r3, [r0, #0]
 80062a8:	b133      	cbz	r3, 80062b8 <strstr+0x14>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4618      	mov	r0, r3
 80062ae:	1c5e      	adds	r6, r3, #1
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b933      	cbnz	r3, 80062c2 <strstr+0x1e>
 80062b4:	4618      	mov	r0, r3
 80062b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b8:	780b      	ldrb	r3, [r1, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bf18      	it	ne
 80062be:	2000      	movne	r0, #0
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c2:	1e4d      	subs	r5, r1, #1
 80062c4:	1e44      	subs	r4, r0, #1
 80062c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	d0f3      	beq.n	80062b6 <strstr+0x12>
 80062ce:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80062d2:	4633      	mov	r3, r6
 80062d4:	4297      	cmp	r7, r2
 80062d6:	d0f6      	beq.n	80062c6 <strstr+0x22>
 80062d8:	e7e8      	b.n	80062ac <strstr+0x8>

080062da <_strtol_l.isra.0>:
 80062da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062de:	4680      	mov	r8, r0
 80062e0:	4689      	mov	r9, r1
 80062e2:	4692      	mov	sl, r2
 80062e4:	461f      	mov	r7, r3
 80062e6:	468b      	mov	fp, r1
 80062e8:	465d      	mov	r5, fp
 80062ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80062ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062f0:	f7ff ff56 	bl	80061a0 <__locale_ctype_ptr_l>
 80062f4:	4420      	add	r0, r4
 80062f6:	7846      	ldrb	r6, [r0, #1]
 80062f8:	f016 0608 	ands.w	r6, r6, #8
 80062fc:	d10b      	bne.n	8006316 <_strtol_l.isra.0+0x3c>
 80062fe:	2c2d      	cmp	r4, #45	; 0x2d
 8006300:	d10b      	bne.n	800631a <_strtol_l.isra.0+0x40>
 8006302:	2601      	movs	r6, #1
 8006304:	782c      	ldrb	r4, [r5, #0]
 8006306:	f10b 0502 	add.w	r5, fp, #2
 800630a:	b167      	cbz	r7, 8006326 <_strtol_l.isra.0+0x4c>
 800630c:	2f10      	cmp	r7, #16
 800630e:	d114      	bne.n	800633a <_strtol_l.isra.0+0x60>
 8006310:	2c30      	cmp	r4, #48	; 0x30
 8006312:	d00a      	beq.n	800632a <_strtol_l.isra.0+0x50>
 8006314:	e011      	b.n	800633a <_strtol_l.isra.0+0x60>
 8006316:	46ab      	mov	fp, r5
 8006318:	e7e6      	b.n	80062e8 <_strtol_l.isra.0+0xe>
 800631a:	2c2b      	cmp	r4, #43	; 0x2b
 800631c:	bf04      	itt	eq
 800631e:	782c      	ldrbeq	r4, [r5, #0]
 8006320:	f10b 0502 	addeq.w	r5, fp, #2
 8006324:	e7f1      	b.n	800630a <_strtol_l.isra.0+0x30>
 8006326:	2c30      	cmp	r4, #48	; 0x30
 8006328:	d127      	bne.n	800637a <_strtol_l.isra.0+0xa0>
 800632a:	782b      	ldrb	r3, [r5, #0]
 800632c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006330:	2b58      	cmp	r3, #88	; 0x58
 8006332:	d14b      	bne.n	80063cc <_strtol_l.isra.0+0xf2>
 8006334:	2710      	movs	r7, #16
 8006336:	786c      	ldrb	r4, [r5, #1]
 8006338:	3502      	adds	r5, #2
 800633a:	2e00      	cmp	r6, #0
 800633c:	bf0c      	ite	eq
 800633e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006342:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006346:	2200      	movs	r2, #0
 8006348:	fbb1 fef7 	udiv	lr, r1, r7
 800634c:	4610      	mov	r0, r2
 800634e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006352:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006356:	2b09      	cmp	r3, #9
 8006358:	d811      	bhi.n	800637e <_strtol_l.isra.0+0xa4>
 800635a:	461c      	mov	r4, r3
 800635c:	42a7      	cmp	r7, r4
 800635e:	dd1d      	ble.n	800639c <_strtol_l.isra.0+0xc2>
 8006360:	1c53      	adds	r3, r2, #1
 8006362:	d007      	beq.n	8006374 <_strtol_l.isra.0+0x9a>
 8006364:	4586      	cmp	lr, r0
 8006366:	d316      	bcc.n	8006396 <_strtol_l.isra.0+0xbc>
 8006368:	d101      	bne.n	800636e <_strtol_l.isra.0+0x94>
 800636a:	45a4      	cmp	ip, r4
 800636c:	db13      	blt.n	8006396 <_strtol_l.isra.0+0xbc>
 800636e:	2201      	movs	r2, #1
 8006370:	fb00 4007 	mla	r0, r0, r7, r4
 8006374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006378:	e7eb      	b.n	8006352 <_strtol_l.isra.0+0x78>
 800637a:	270a      	movs	r7, #10
 800637c:	e7dd      	b.n	800633a <_strtol_l.isra.0+0x60>
 800637e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006382:	2b19      	cmp	r3, #25
 8006384:	d801      	bhi.n	800638a <_strtol_l.isra.0+0xb0>
 8006386:	3c37      	subs	r4, #55	; 0x37
 8006388:	e7e8      	b.n	800635c <_strtol_l.isra.0+0x82>
 800638a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800638e:	2b19      	cmp	r3, #25
 8006390:	d804      	bhi.n	800639c <_strtol_l.isra.0+0xc2>
 8006392:	3c57      	subs	r4, #87	; 0x57
 8006394:	e7e2      	b.n	800635c <_strtol_l.isra.0+0x82>
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	e7eb      	b.n	8006374 <_strtol_l.isra.0+0x9a>
 800639c:	1c53      	adds	r3, r2, #1
 800639e:	d108      	bne.n	80063b2 <_strtol_l.isra.0+0xd8>
 80063a0:	2322      	movs	r3, #34	; 0x22
 80063a2:	4608      	mov	r0, r1
 80063a4:	f8c8 3000 	str.w	r3, [r8]
 80063a8:	f1ba 0f00 	cmp.w	sl, #0
 80063ac:	d107      	bne.n	80063be <_strtol_l.isra.0+0xe4>
 80063ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	b106      	cbz	r6, 80063b6 <_strtol_l.isra.0+0xdc>
 80063b4:	4240      	negs	r0, r0
 80063b6:	f1ba 0f00 	cmp.w	sl, #0
 80063ba:	d00c      	beq.n	80063d6 <_strtol_l.isra.0+0xfc>
 80063bc:	b122      	cbz	r2, 80063c8 <_strtol_l.isra.0+0xee>
 80063be:	3d01      	subs	r5, #1
 80063c0:	f8ca 5000 	str.w	r5, [sl]
 80063c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	464d      	mov	r5, r9
 80063ca:	e7f9      	b.n	80063c0 <_strtol_l.isra.0+0xe6>
 80063cc:	2430      	movs	r4, #48	; 0x30
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d1b3      	bne.n	800633a <_strtol_l.isra.0+0x60>
 80063d2:	2708      	movs	r7, #8
 80063d4:	e7b1      	b.n	800633a <_strtol_l.isra.0+0x60>
 80063d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063dc <strtol>:
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <strtol+0x24>)
 80063de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e0:	681c      	ldr	r4, [r3, #0]
 80063e2:	4d08      	ldr	r5, [pc, #32]	; (8006404 <strtol+0x28>)
 80063e4:	6a23      	ldr	r3, [r4, #32]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf08      	it	eq
 80063ea:	462b      	moveq	r3, r5
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	460a      	mov	r2, r1
 80063f2:	4601      	mov	r1, r0
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff ff70 	bl	80062da <_strtol_l.isra.0>
 80063fa:	b003      	add	sp, #12
 80063fc:	bd30      	pop	{r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	200002e4 	.word	0x200002e4
 8006404:	20000178 	.word	0x20000178

08006408 <__utoa>:
 8006408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640a:	b08b      	sub	sp, #44	; 0x2c
 800640c:	4603      	mov	r3, r0
 800640e:	460f      	mov	r7, r1
 8006410:	466d      	mov	r5, sp
 8006412:	4c1c      	ldr	r4, [pc, #112]	; (8006484 <__utoa+0x7c>)
 8006414:	f104 0e20 	add.w	lr, r4, #32
 8006418:	462e      	mov	r6, r5
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	6861      	ldr	r1, [r4, #4]
 800641e:	3408      	adds	r4, #8
 8006420:	c603      	stmia	r6!, {r0, r1}
 8006422:	4574      	cmp	r4, lr
 8006424:	4635      	mov	r5, r6
 8006426:	d1f7      	bne.n	8006418 <__utoa+0x10>
 8006428:	7921      	ldrb	r1, [r4, #4]
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	7131      	strb	r1, [r6, #4]
 800642e:	1e91      	subs	r1, r2, #2
 8006430:	2922      	cmp	r1, #34	; 0x22
 8006432:	6030      	str	r0, [r6, #0]
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	d904      	bls.n	8006444 <__utoa+0x3c>
 800643a:	7039      	strb	r1, [r7, #0]
 800643c:	460f      	mov	r7, r1
 800643e:	4638      	mov	r0, r7
 8006440:	b00b      	add	sp, #44	; 0x2c
 8006442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006444:	1e78      	subs	r0, r7, #1
 8006446:	4606      	mov	r6, r0
 8006448:	fbb3 f5f2 	udiv	r5, r3, r2
 800644c:	fb02 3315 	mls	r3, r2, r5, r3
 8006450:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006454:	4473      	add	r3, lr
 8006456:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800645a:	1c4c      	adds	r4, r1, #1
 800645c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8006460:	462b      	mov	r3, r5
 8006462:	b965      	cbnz	r5, 800647e <__utoa+0x76>
 8006464:	553d      	strb	r5, [r7, r4]
 8006466:	187a      	adds	r2, r7, r1
 8006468:	1acc      	subs	r4, r1, r3
 800646a:	42a3      	cmp	r3, r4
 800646c:	dae7      	bge.n	800643e <__utoa+0x36>
 800646e:	7844      	ldrb	r4, [r0, #1]
 8006470:	7815      	ldrb	r5, [r2, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	f800 5f01 	strb.w	r5, [r0, #1]!
 8006478:	f802 4901 	strb.w	r4, [r2], #-1
 800647c:	e7f4      	b.n	8006468 <__utoa+0x60>
 800647e:	4621      	mov	r1, r4
 8006480:	e7e2      	b.n	8006448 <__utoa+0x40>
 8006482:	bf00      	nop
 8006484:	08007a81 	.word	0x08007a81

08006488 <__ascii_wctomb>:
 8006488:	b149      	cbz	r1, 800649e <__ascii_wctomb+0x16>
 800648a:	2aff      	cmp	r2, #255	; 0xff
 800648c:	bf8b      	itete	hi
 800648e:	238a      	movhi	r3, #138	; 0x8a
 8006490:	700a      	strbls	r2, [r1, #0]
 8006492:	6003      	strhi	r3, [r0, #0]
 8006494:	2001      	movls	r0, #1
 8006496:	bf88      	it	hi
 8006498:	f04f 30ff 	movhi.w	r0, #4294967295
 800649c:	4770      	bx	lr
 800649e:	4608      	mov	r0, r1
 80064a0:	4770      	bx	lr

080064a2 <__ssputs_r>:
 80064a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a6:	688e      	ldr	r6, [r1, #8]
 80064a8:	4682      	mov	sl, r0
 80064aa:	429e      	cmp	r6, r3
 80064ac:	460c      	mov	r4, r1
 80064ae:	4691      	mov	r9, r2
 80064b0:	4698      	mov	r8, r3
 80064b2:	d835      	bhi.n	8006520 <__ssputs_r+0x7e>
 80064b4:	898a      	ldrh	r2, [r1, #12]
 80064b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064ba:	d031      	beq.n	8006520 <__ssputs_r+0x7e>
 80064bc:	2302      	movs	r3, #2
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	6909      	ldr	r1, [r1, #16]
 80064c2:	1a6f      	subs	r7, r5, r1
 80064c4:	6965      	ldr	r5, [r4, #20]
 80064c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80064ce:	f108 0301 	add.w	r3, r8, #1
 80064d2:	443b      	add	r3, r7
 80064d4:	429d      	cmp	r5, r3
 80064d6:	bf38      	it	cc
 80064d8:	461d      	movcc	r5, r3
 80064da:	0553      	lsls	r3, r2, #21
 80064dc:	d531      	bpl.n	8006542 <__ssputs_r+0xa0>
 80064de:	4629      	mov	r1, r5
 80064e0:	f000 fb46 	bl	8006b70 <_malloc_r>
 80064e4:	4606      	mov	r6, r0
 80064e6:	b950      	cbnz	r0, 80064fe <__ssputs_r+0x5c>
 80064e8:	230c      	movs	r3, #12
 80064ea:	f8ca 3000 	str.w	r3, [sl]
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	463a      	mov	r2, r7
 8006500:	6921      	ldr	r1, [r4, #16]
 8006502:	f000 fac3 	bl	8006a8c <memcpy>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	6126      	str	r6, [r4, #16]
 8006514:	443e      	add	r6, r7
 8006516:	6026      	str	r6, [r4, #0]
 8006518:	4646      	mov	r6, r8
 800651a:	6165      	str	r5, [r4, #20]
 800651c:	1bed      	subs	r5, r5, r7
 800651e:	60a5      	str	r5, [r4, #8]
 8006520:	4546      	cmp	r6, r8
 8006522:	bf28      	it	cs
 8006524:	4646      	movcs	r6, r8
 8006526:	4649      	mov	r1, r9
 8006528:	4632      	mov	r2, r6
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	f000 fab9 	bl	8006aa2 <memmove>
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	2000      	movs	r0, #0
 8006534:	1b9b      	subs	r3, r3, r6
 8006536:	60a3      	str	r3, [r4, #8]
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	441e      	add	r6, r3
 800653c:	6026      	str	r6, [r4, #0]
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	462a      	mov	r2, r5
 8006544:	f000 fb72 	bl	8006c2c <_realloc_r>
 8006548:	4606      	mov	r6, r0
 800654a:	2800      	cmp	r0, #0
 800654c:	d1e1      	bne.n	8006512 <__ssputs_r+0x70>
 800654e:	6921      	ldr	r1, [r4, #16]
 8006550:	4650      	mov	r0, sl
 8006552:	f000 fac1 	bl	8006ad8 <_free_r>
 8006556:	e7c7      	b.n	80064e8 <__ssputs_r+0x46>

08006558 <_svfiprintf_r>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	b09d      	sub	sp, #116	; 0x74
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	898b      	ldrh	r3, [r1, #12]
 8006562:	4680      	mov	r8, r0
 8006564:	061c      	lsls	r4, r3, #24
 8006566:	460d      	mov	r5, r1
 8006568:	4616      	mov	r6, r2
 800656a:	d50f      	bpl.n	800658c <_svfiprintf_r+0x34>
 800656c:	690b      	ldr	r3, [r1, #16]
 800656e:	b96b      	cbnz	r3, 800658c <_svfiprintf_r+0x34>
 8006570:	2140      	movs	r1, #64	; 0x40
 8006572:	f000 fafd 	bl	8006b70 <_malloc_r>
 8006576:	6028      	str	r0, [r5, #0]
 8006578:	6128      	str	r0, [r5, #16]
 800657a:	b928      	cbnz	r0, 8006588 <_svfiprintf_r+0x30>
 800657c:	230c      	movs	r3, #12
 800657e:	f8c8 3000 	str.w	r3, [r8]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e0c4      	b.n	8006712 <_svfiprintf_r+0x1ba>
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	616b      	str	r3, [r5, #20]
 800658c:	2300      	movs	r3, #0
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
 8006590:	2320      	movs	r3, #32
 8006592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006596:	2330      	movs	r3, #48	; 0x30
 8006598:	f04f 0b01 	mov.w	fp, #1
 800659c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a0:	4637      	mov	r7, r6
 80065a2:	463c      	mov	r4, r7
 80065a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d13c      	bne.n	8006626 <_svfiprintf_r+0xce>
 80065ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x72>
 80065b2:	4653      	mov	r3, sl
 80065b4:	4632      	mov	r2, r6
 80065b6:	4629      	mov	r1, r5
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7ff ff72 	bl	80064a2 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80a2 	beq.w	8006708 <_svfiprintf_r+0x1b0>
 80065c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c6:	4453      	add	r3, sl
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	783b      	ldrb	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 809b 	beq.w	8006708 <_svfiprintf_r+0x1b0>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	9307      	str	r3, [sp, #28]
 80065dc:	9205      	str	r2, [sp, #20]
 80065de:	9306      	str	r3, [sp, #24]
 80065e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e4:	931a      	str	r3, [sp, #104]	; 0x68
 80065e6:	2205      	movs	r2, #5
 80065e8:	7821      	ldrb	r1, [r4, #0]
 80065ea:	4850      	ldr	r0, [pc, #320]	; (800672c <_svfiprintf_r+0x1d4>)
 80065ec:	f000 fa40 	bl	8006a70 <memchr>
 80065f0:	1c67      	adds	r7, r4, #1
 80065f2:	9b04      	ldr	r3, [sp, #16]
 80065f4:	b9d8      	cbnz	r0, 800662e <_svfiprintf_r+0xd6>
 80065f6:	06d9      	lsls	r1, r3, #27
 80065f8:	bf44      	itt	mi
 80065fa:	2220      	movmi	r2, #32
 80065fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006600:	071a      	lsls	r2, r3, #28
 8006602:	bf44      	itt	mi
 8006604:	222b      	movmi	r2, #43	; 0x2b
 8006606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800660a:	7822      	ldrb	r2, [r4, #0]
 800660c:	2a2a      	cmp	r2, #42	; 0x2a
 800660e:	d016      	beq.n	800663e <_svfiprintf_r+0xe6>
 8006610:	2100      	movs	r1, #0
 8006612:	200a      	movs	r0, #10
 8006614:	9a07      	ldr	r2, [sp, #28]
 8006616:	4627      	mov	r7, r4
 8006618:	783b      	ldrb	r3, [r7, #0]
 800661a:	3401      	adds	r4, #1
 800661c:	3b30      	subs	r3, #48	; 0x30
 800661e:	2b09      	cmp	r3, #9
 8006620:	d950      	bls.n	80066c4 <_svfiprintf_r+0x16c>
 8006622:	b1c9      	cbz	r1, 8006658 <_svfiprintf_r+0x100>
 8006624:	e011      	b.n	800664a <_svfiprintf_r+0xf2>
 8006626:	2b25      	cmp	r3, #37	; 0x25
 8006628:	d0c0      	beq.n	80065ac <_svfiprintf_r+0x54>
 800662a:	4627      	mov	r7, r4
 800662c:	e7b9      	b.n	80065a2 <_svfiprintf_r+0x4a>
 800662e:	4a3f      	ldr	r2, [pc, #252]	; (800672c <_svfiprintf_r+0x1d4>)
 8006630:	463c      	mov	r4, r7
 8006632:	1a80      	subs	r0, r0, r2
 8006634:	fa0b f000 	lsl.w	r0, fp, r0
 8006638:	4318      	orrs	r0, r3
 800663a:	9004      	str	r0, [sp, #16]
 800663c:	e7d3      	b.n	80065e6 <_svfiprintf_r+0x8e>
 800663e:	9a03      	ldr	r2, [sp, #12]
 8006640:	1d11      	adds	r1, r2, #4
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	9103      	str	r1, [sp, #12]
 8006646:	2a00      	cmp	r2, #0
 8006648:	db01      	blt.n	800664e <_svfiprintf_r+0xf6>
 800664a:	9207      	str	r2, [sp, #28]
 800664c:	e004      	b.n	8006658 <_svfiprintf_r+0x100>
 800664e:	4252      	negs	r2, r2
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	9207      	str	r2, [sp, #28]
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	783b      	ldrb	r3, [r7, #0]
 800665a:	2b2e      	cmp	r3, #46	; 0x2e
 800665c:	d10d      	bne.n	800667a <_svfiprintf_r+0x122>
 800665e:	787b      	ldrb	r3, [r7, #1]
 8006660:	1c79      	adds	r1, r7, #1
 8006662:	2b2a      	cmp	r3, #42	; 0x2a
 8006664:	d132      	bne.n	80066cc <_svfiprintf_r+0x174>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	3702      	adds	r7, #2
 800666a:	1d1a      	adds	r2, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	9203      	str	r2, [sp, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfb8      	it	lt
 8006674:	f04f 33ff 	movlt.w	r3, #4294967295
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	4c2d      	ldr	r4, [pc, #180]	; (8006730 <_svfiprintf_r+0x1d8>)
 800667c:	2203      	movs	r2, #3
 800667e:	7839      	ldrb	r1, [r7, #0]
 8006680:	4620      	mov	r0, r4
 8006682:	f000 f9f5 	bl	8006a70 <memchr>
 8006686:	b138      	cbz	r0, 8006698 <_svfiprintf_r+0x140>
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	1b00      	subs	r0, r0, r4
 800668c:	fa03 f000 	lsl.w	r0, r3, r0
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	3701      	adds	r7, #1
 8006694:	4303      	orrs	r3, r0
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	7839      	ldrb	r1, [r7, #0]
 800669a:	2206      	movs	r2, #6
 800669c:	4825      	ldr	r0, [pc, #148]	; (8006734 <_svfiprintf_r+0x1dc>)
 800669e:	1c7e      	adds	r6, r7, #1
 80066a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a4:	f000 f9e4 	bl	8006a70 <memchr>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d035      	beq.n	8006718 <_svfiprintf_r+0x1c0>
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <_svfiprintf_r+0x1e0>)
 80066ae:	b9fb      	cbnz	r3, 80066f0 <_svfiprintf_r+0x198>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	3307      	adds	r3, #7
 80066b4:	f023 0307 	bic.w	r3, r3, #7
 80066b8:	3308      	adds	r3, #8
 80066ba:	9303      	str	r3, [sp, #12]
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	444b      	add	r3, r9
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	e76d      	b.n	80065a0 <_svfiprintf_r+0x48>
 80066c4:	fb00 3202 	mla	r2, r0, r2, r3
 80066c8:	2101      	movs	r1, #1
 80066ca:	e7a4      	b.n	8006616 <_svfiprintf_r+0xbe>
 80066cc:	2300      	movs	r3, #0
 80066ce:	240a      	movs	r4, #10
 80066d0:	4618      	mov	r0, r3
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	460f      	mov	r7, r1
 80066d6:	783a      	ldrb	r2, [r7, #0]
 80066d8:	3101      	adds	r1, #1
 80066da:	3a30      	subs	r2, #48	; 0x30
 80066dc:	2a09      	cmp	r2, #9
 80066de:	d903      	bls.n	80066e8 <_svfiprintf_r+0x190>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0ca      	beq.n	800667a <_svfiprintf_r+0x122>
 80066e4:	9005      	str	r0, [sp, #20]
 80066e6:	e7c8      	b.n	800667a <_svfiprintf_r+0x122>
 80066e8:	fb04 2000 	mla	r0, r4, r0, r2
 80066ec:	2301      	movs	r3, #1
 80066ee:	e7f1      	b.n	80066d4 <_svfiprintf_r+0x17c>
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	462a      	mov	r2, r5
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <_svfiprintf_r+0x1e4>)
 80066f8:	a904      	add	r1, sp, #16
 80066fa:	4640      	mov	r0, r8
 80066fc:	f3af 8000 	nop.w
 8006700:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006704:	4681      	mov	r9, r0
 8006706:	d1d9      	bne.n	80066bc <_svfiprintf_r+0x164>
 8006708:	89ab      	ldrh	r3, [r5, #12]
 800670a:	065b      	lsls	r3, r3, #25
 800670c:	f53f af39 	bmi.w	8006582 <_svfiprintf_r+0x2a>
 8006710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006712:	b01d      	add	sp, #116	; 0x74
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <_svfiprintf_r+0x1e4>)
 8006720:	a904      	add	r1, sp, #16
 8006722:	4640      	mov	r0, r8
 8006724:	f000 f884 	bl	8006830 <_printf_i>
 8006728:	e7ea      	b.n	8006700 <_svfiprintf_r+0x1a8>
 800672a:	bf00      	nop
 800672c:	08007ba7 	.word	0x08007ba7
 8006730:	08007bad 	.word	0x08007bad
 8006734:	08007bb1 	.word	0x08007bb1
 8006738:	00000000 	.word	0x00000000
 800673c:	080064a3 	.word	0x080064a3

08006740 <_printf_common>:
 8006740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	4691      	mov	r9, r2
 8006746:	461f      	mov	r7, r3
 8006748:	688a      	ldr	r2, [r1, #8]
 800674a:	690b      	ldr	r3, [r1, #16]
 800674c:	4606      	mov	r6, r0
 800674e:	4293      	cmp	r3, r2
 8006750:	bfb8      	it	lt
 8006752:	4613      	movlt	r3, r2
 8006754:	f8c9 3000 	str.w	r3, [r9]
 8006758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800675c:	460c      	mov	r4, r1
 800675e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006762:	b112      	cbz	r2, 800676a <_printf_common+0x2a>
 8006764:	3301      	adds	r3, #1
 8006766:	f8c9 3000 	str.w	r3, [r9]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	0699      	lsls	r1, r3, #26
 800676e:	bf42      	ittt	mi
 8006770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006774:	3302      	addmi	r3, #2
 8006776:	f8c9 3000 	strmi.w	r3, [r9]
 800677a:	6825      	ldr	r5, [r4, #0]
 800677c:	f015 0506 	ands.w	r5, r5, #6
 8006780:	d107      	bne.n	8006792 <_printf_common+0x52>
 8006782:	f104 0a19 	add.w	sl, r4, #25
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	f8d9 2000 	ldr.w	r2, [r9]
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	429d      	cmp	r5, r3
 8006790:	db2a      	blt.n	80067e8 <_printf_common+0xa8>
 8006792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	3300      	adds	r3, #0
 800679a:	bf18      	it	ne
 800679c:	2301      	movne	r3, #1
 800679e:	0692      	lsls	r2, r2, #26
 80067a0:	d42f      	bmi.n	8006802 <_printf_common+0xc2>
 80067a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a6:	4639      	mov	r1, r7
 80067a8:	4630      	mov	r0, r6
 80067aa:	47c0      	blx	r8
 80067ac:	3001      	adds	r0, #1
 80067ae:	d022      	beq.n	80067f6 <_printf_common+0xb6>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	68e5      	ldr	r5, [r4, #12]
 80067b4:	f003 0306 	and.w	r3, r3, #6
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	bf18      	it	ne
 80067bc:	2500      	movne	r5, #0
 80067be:	f8d9 2000 	ldr.w	r2, [r9]
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	bf08      	it	eq
 80067c8:	1aad      	subeq	r5, r5, r2
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	6922      	ldr	r2, [r4, #16]
 80067ce:	bf08      	it	eq
 80067d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d4:	4293      	cmp	r3, r2
 80067d6:	bfc4      	itt	gt
 80067d8:	1a9b      	subgt	r3, r3, r2
 80067da:	18ed      	addgt	r5, r5, r3
 80067dc:	341a      	adds	r4, #26
 80067de:	454d      	cmp	r5, r9
 80067e0:	d11b      	bne.n	800681a <_printf_common+0xda>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e8:	2301      	movs	r3, #1
 80067ea:	4652      	mov	r2, sl
 80067ec:	4639      	mov	r1, r7
 80067ee:	4630      	mov	r0, r6
 80067f0:	47c0      	blx	r8
 80067f2:	3001      	adds	r0, #1
 80067f4:	d103      	bne.n	80067fe <_printf_common+0xbe>
 80067f6:	f04f 30ff 	mov.w	r0, #4294967295
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	3501      	adds	r5, #1
 8006800:	e7c1      	b.n	8006786 <_printf_common+0x46>
 8006802:	2030      	movs	r0, #48	; 0x30
 8006804:	18e1      	adds	r1, r4, r3
 8006806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006810:	4422      	add	r2, r4
 8006812:	3302      	adds	r3, #2
 8006814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006818:	e7c3      	b.n	80067a2 <_printf_common+0x62>
 800681a:	2301      	movs	r3, #1
 800681c:	4622      	mov	r2, r4
 800681e:	4639      	mov	r1, r7
 8006820:	4630      	mov	r0, r6
 8006822:	47c0      	blx	r8
 8006824:	3001      	adds	r0, #1
 8006826:	d0e6      	beq.n	80067f6 <_printf_common+0xb6>
 8006828:	f109 0901 	add.w	r9, r9, #1
 800682c:	e7d7      	b.n	80067de <_printf_common+0x9e>
	...

08006830 <_printf_i>:
 8006830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006834:	4617      	mov	r7, r2
 8006836:	7e0a      	ldrb	r2, [r1, #24]
 8006838:	b085      	sub	sp, #20
 800683a:	2a6e      	cmp	r2, #110	; 0x6e
 800683c:	4698      	mov	r8, r3
 800683e:	4606      	mov	r6, r0
 8006840:	460c      	mov	r4, r1
 8006842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006844:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006848:	f000 80bc 	beq.w	80069c4 <_printf_i+0x194>
 800684c:	d81a      	bhi.n	8006884 <_printf_i+0x54>
 800684e:	2a63      	cmp	r2, #99	; 0x63
 8006850:	d02e      	beq.n	80068b0 <_printf_i+0x80>
 8006852:	d80a      	bhi.n	800686a <_printf_i+0x3a>
 8006854:	2a00      	cmp	r2, #0
 8006856:	f000 80c8 	beq.w	80069ea <_printf_i+0x1ba>
 800685a:	2a58      	cmp	r2, #88	; 0x58
 800685c:	f000 808a 	beq.w	8006974 <_printf_i+0x144>
 8006860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006864:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006868:	e02a      	b.n	80068c0 <_printf_i+0x90>
 800686a:	2a64      	cmp	r2, #100	; 0x64
 800686c:	d001      	beq.n	8006872 <_printf_i+0x42>
 800686e:	2a69      	cmp	r2, #105	; 0x69
 8006870:	d1f6      	bne.n	8006860 <_printf_i+0x30>
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	f011 0f80 	tst.w	r1, #128	; 0x80
 800687a:	d023      	beq.n	80068c4 <_printf_i+0x94>
 800687c:	1d11      	adds	r1, r2, #4
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	e027      	b.n	80068d4 <_printf_i+0xa4>
 8006884:	2a73      	cmp	r2, #115	; 0x73
 8006886:	f000 80b4 	beq.w	80069f2 <_printf_i+0x1c2>
 800688a:	d808      	bhi.n	800689e <_printf_i+0x6e>
 800688c:	2a6f      	cmp	r2, #111	; 0x6f
 800688e:	d02a      	beq.n	80068e6 <_printf_i+0xb6>
 8006890:	2a70      	cmp	r2, #112	; 0x70
 8006892:	d1e5      	bne.n	8006860 <_printf_i+0x30>
 8006894:	680a      	ldr	r2, [r1, #0]
 8006896:	f042 0220 	orr.w	r2, r2, #32
 800689a:	600a      	str	r2, [r1, #0]
 800689c:	e003      	b.n	80068a6 <_printf_i+0x76>
 800689e:	2a75      	cmp	r2, #117	; 0x75
 80068a0:	d021      	beq.n	80068e6 <_printf_i+0xb6>
 80068a2:	2a78      	cmp	r2, #120	; 0x78
 80068a4:	d1dc      	bne.n	8006860 <_printf_i+0x30>
 80068a6:	2278      	movs	r2, #120	; 0x78
 80068a8:	496f      	ldr	r1, [pc, #444]	; (8006a68 <_printf_i+0x238>)
 80068aa:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80068ae:	e064      	b.n	800697a <_printf_i+0x14a>
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80068b6:	1d11      	adds	r1, r2, #4
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0a3      	b.n	8006a0c <_printf_i+0x1dc>
 80068c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80068c8:	f102 0104 	add.w	r1, r2, #4
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	d0d7      	beq.n	8006880 <_printf_i+0x50>
 80068d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da03      	bge.n	80068e0 <_printf_i+0xb0>
 80068d8:	222d      	movs	r2, #45	; 0x2d
 80068da:	425b      	negs	r3, r3
 80068dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068e0:	4962      	ldr	r1, [pc, #392]	; (8006a6c <_printf_i+0x23c>)
 80068e2:	220a      	movs	r2, #10
 80068e4:	e017      	b.n	8006916 <_printf_i+0xe6>
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80068ee:	d003      	beq.n	80068f8 <_printf_i+0xc8>
 80068f0:	1d08      	adds	r0, r1, #4
 80068f2:	6018      	str	r0, [r3, #0]
 80068f4:	680b      	ldr	r3, [r1, #0]
 80068f6:	e006      	b.n	8006906 <_printf_i+0xd6>
 80068f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068fc:	f101 0004 	add.w	r0, r1, #4
 8006900:	6018      	str	r0, [r3, #0]
 8006902:	d0f7      	beq.n	80068f4 <_printf_i+0xc4>
 8006904:	880b      	ldrh	r3, [r1, #0]
 8006906:	2a6f      	cmp	r2, #111	; 0x6f
 8006908:	bf14      	ite	ne
 800690a:	220a      	movne	r2, #10
 800690c:	2208      	moveq	r2, #8
 800690e:	4957      	ldr	r1, [pc, #348]	; (8006a6c <_printf_i+0x23c>)
 8006910:	2000      	movs	r0, #0
 8006912:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006916:	6865      	ldr	r5, [r4, #4]
 8006918:	2d00      	cmp	r5, #0
 800691a:	60a5      	str	r5, [r4, #8]
 800691c:	f2c0 809c 	blt.w	8006a58 <_printf_i+0x228>
 8006920:	6820      	ldr	r0, [r4, #0]
 8006922:	f020 0004 	bic.w	r0, r0, #4
 8006926:	6020      	str	r0, [r4, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d13f      	bne.n	80069ac <_printf_i+0x17c>
 800692c:	2d00      	cmp	r5, #0
 800692e:	f040 8095 	bne.w	8006a5c <_printf_i+0x22c>
 8006932:	4675      	mov	r5, lr
 8006934:	2a08      	cmp	r2, #8
 8006936:	d10b      	bne.n	8006950 <_printf_i+0x120>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07da      	lsls	r2, r3, #31
 800693c:	d508      	bpl.n	8006950 <_printf_i+0x120>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	6862      	ldr	r2, [r4, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	bfde      	ittt	le
 8006946:	2330      	movle	r3, #48	; 0x30
 8006948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800694c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006950:	ebae 0305 	sub.w	r3, lr, r5
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	f8cd 8000 	str.w	r8, [sp]
 800695a:	463b      	mov	r3, r7
 800695c:	aa03      	add	r2, sp, #12
 800695e:	4621      	mov	r1, r4
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff feed 	bl	8006740 <_printf_common>
 8006966:	3001      	adds	r0, #1
 8006968:	d155      	bne.n	8006a16 <_printf_i+0x1e6>
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	b005      	add	sp, #20
 8006970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006974:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006978:	493c      	ldr	r1, [pc, #240]	; (8006a6c <_printf_i+0x23c>)
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006982:	f100 0504 	add.w	r5, r0, #4
 8006986:	601d      	str	r5, [r3, #0]
 8006988:	d001      	beq.n	800698e <_printf_i+0x15e>
 800698a:	6803      	ldr	r3, [r0, #0]
 800698c:	e002      	b.n	8006994 <_printf_i+0x164>
 800698e:	0655      	lsls	r5, r2, #25
 8006990:	d5fb      	bpl.n	800698a <_printf_i+0x15a>
 8006992:	8803      	ldrh	r3, [r0, #0]
 8006994:	07d0      	lsls	r0, r2, #31
 8006996:	bf44      	itt	mi
 8006998:	f042 0220 	orrmi.w	r2, r2, #32
 800699c:	6022      	strmi	r2, [r4, #0]
 800699e:	b91b      	cbnz	r3, 80069a8 <_printf_i+0x178>
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	f022 0220 	bic.w	r2, r2, #32
 80069a6:	6022      	str	r2, [r4, #0]
 80069a8:	2210      	movs	r2, #16
 80069aa:	e7b1      	b.n	8006910 <_printf_i+0xe0>
 80069ac:	4675      	mov	r5, lr
 80069ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80069b2:	fb02 3310 	mls	r3, r2, r0, r3
 80069b6:	5ccb      	ldrb	r3, [r1, r3]
 80069b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069bc:	4603      	mov	r3, r0
 80069be:	2800      	cmp	r0, #0
 80069c0:	d1f5      	bne.n	80069ae <_printf_i+0x17e>
 80069c2:	e7b7      	b.n	8006934 <_printf_i+0x104>
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80069cc:	6949      	ldr	r1, [r1, #20]
 80069ce:	d004      	beq.n	80069da <_printf_i+0x1aa>
 80069d0:	1d10      	adds	r0, r2, #4
 80069d2:	6018      	str	r0, [r3, #0]
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	6019      	str	r1, [r3, #0]
 80069d8:	e007      	b.n	80069ea <_printf_i+0x1ba>
 80069da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069de:	f102 0004 	add.w	r0, r2, #4
 80069e2:	6018      	str	r0, [r3, #0]
 80069e4:	6813      	ldr	r3, [r2, #0]
 80069e6:	d0f6      	beq.n	80069d6 <_printf_i+0x1a6>
 80069e8:	8019      	strh	r1, [r3, #0]
 80069ea:	2300      	movs	r3, #0
 80069ec:	4675      	mov	r5, lr
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	e7b1      	b.n	8006956 <_printf_i+0x126>
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	1d11      	adds	r1, r2, #4
 80069f6:	6019      	str	r1, [r3, #0]
 80069f8:	6815      	ldr	r5, [r2, #0]
 80069fa:	2100      	movs	r1, #0
 80069fc:	6862      	ldr	r2, [r4, #4]
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f836 	bl	8006a70 <memchr>
 8006a04:	b108      	cbz	r0, 8006a0a <_printf_i+0x1da>
 8006a06:	1b40      	subs	r0, r0, r5
 8006a08:	6060      	str	r0, [r4, #4]
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a14:	e79f      	b.n	8006956 <_printf_i+0x126>
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	462a      	mov	r2, r5
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	47c0      	blx	r8
 8006a20:	3001      	adds	r0, #1
 8006a22:	d0a2      	beq.n	800696a <_printf_i+0x13a>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	079b      	lsls	r3, r3, #30
 8006a28:	d507      	bpl.n	8006a3a <_printf_i+0x20a>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0919 	add.w	r9, r4, #25
 8006a30:	68e3      	ldr	r3, [r4, #12]
 8006a32:	9a03      	ldr	r2, [sp, #12]
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	429d      	cmp	r5, r3
 8006a38:	db05      	blt.n	8006a46 <_printf_i+0x216>
 8006a3a:	68e0      	ldr	r0, [r4, #12]
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	bfb8      	it	lt
 8006a42:	4618      	movlt	r0, r3
 8006a44:	e793      	b.n	800696e <_printf_i+0x13e>
 8006a46:	2301      	movs	r3, #1
 8006a48:	464a      	mov	r2, r9
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	47c0      	blx	r8
 8006a50:	3001      	adds	r0, #1
 8006a52:	d08a      	beq.n	800696a <_printf_i+0x13a>
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7eb      	b.n	8006a30 <_printf_i+0x200>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1a7      	bne.n	80069ac <_printf_i+0x17c>
 8006a5c:	780b      	ldrb	r3, [r1, #0]
 8006a5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a66:	e765      	b.n	8006934 <_printf_i+0x104>
 8006a68:	08007bc9 	.word	0x08007bc9
 8006a6c:	08007bb8 	.word	0x08007bb8

08006a70 <memchr>:
 8006a70:	b510      	push	{r4, lr}
 8006a72:	b2c9      	uxtb	r1, r1
 8006a74:	4402      	add	r2, r0
 8006a76:	4290      	cmp	r0, r2
 8006a78:	4603      	mov	r3, r0
 8006a7a:	d101      	bne.n	8006a80 <memchr+0x10>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	bd10      	pop	{r4, pc}
 8006a80:	781c      	ldrb	r4, [r3, #0]
 8006a82:	3001      	adds	r0, #1
 8006a84:	428c      	cmp	r4, r1
 8006a86:	d1f6      	bne.n	8006a76 <memchr+0x6>
 8006a88:	4618      	mov	r0, r3
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <memcpy>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	1e43      	subs	r3, r0, #1
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	d100      	bne.n	8006a98 <memcpy+0xc>
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa0:	e7f7      	b.n	8006a92 <memcpy+0x6>

08006aa2 <memmove>:
 8006aa2:	4288      	cmp	r0, r1
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	eb01 0302 	add.w	r3, r1, r2
 8006aaa:	d803      	bhi.n	8006ab4 <memmove+0x12>
 8006aac:	1e42      	subs	r2, r0, #1
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d10c      	bne.n	8006acc <memmove+0x2a>
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	4298      	cmp	r0, r3
 8006ab6:	d2f9      	bcs.n	8006aac <memmove+0xa>
 8006ab8:	1881      	adds	r1, r0, r2
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	42d3      	cmn	r3, r2
 8006abe:	d100      	bne.n	8006ac2 <memmove+0x20>
 8006ac0:	bd10      	pop	{r4, pc}
 8006ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ac6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006aca:	e7f7      	b.n	8006abc <memmove+0x1a>
 8006acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ad4:	e7eb      	b.n	8006aae <memmove+0xc>
	...

08006ad8 <_free_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d043      	beq.n	8006b68 <_free_r+0x90>
 8006ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae4:	1f0c      	subs	r4, r1, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfb8      	it	lt
 8006aea:	18e4      	addlt	r4, r4, r3
 8006aec:	f000 f8d4 	bl	8006c98 <__malloc_lock>
 8006af0:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <_free_r+0x94>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	4610      	mov	r0, r2
 8006af6:	b933      	cbnz	r3, 8006b06 <_free_r+0x2e>
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	6014      	str	r4, [r2, #0]
 8006afc:	4628      	mov	r0, r5
 8006afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b02:	f000 b8ca 	b.w	8006c9a <__malloc_unlock>
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	d90b      	bls.n	8006b22 <_free_r+0x4a>
 8006b0a:	6821      	ldr	r1, [r4, #0]
 8006b0c:	1862      	adds	r2, r4, r1
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bf01      	itttt	eq
 8006b12:	681a      	ldreq	r2, [r3, #0]
 8006b14:	685b      	ldreq	r3, [r3, #4]
 8006b16:	1852      	addeq	r2, r2, r1
 8006b18:	6022      	streq	r2, [r4, #0]
 8006b1a:	6063      	str	r3, [r4, #4]
 8006b1c:	6004      	str	r4, [r0, #0]
 8006b1e:	e7ed      	b.n	8006afc <_free_r+0x24>
 8006b20:	4613      	mov	r3, r2
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	b10a      	cbz	r2, 8006b2a <_free_r+0x52>
 8006b26:	42a2      	cmp	r2, r4
 8006b28:	d9fa      	bls.n	8006b20 <_free_r+0x48>
 8006b2a:	6819      	ldr	r1, [r3, #0]
 8006b2c:	1858      	adds	r0, r3, r1
 8006b2e:	42a0      	cmp	r0, r4
 8006b30:	d10b      	bne.n	8006b4a <_free_r+0x72>
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	4401      	add	r1, r0
 8006b36:	1858      	adds	r0, r3, r1
 8006b38:	4282      	cmp	r2, r0
 8006b3a:	6019      	str	r1, [r3, #0]
 8006b3c:	d1de      	bne.n	8006afc <_free_r+0x24>
 8006b3e:	6810      	ldr	r0, [r2, #0]
 8006b40:	6852      	ldr	r2, [r2, #4]
 8006b42:	4401      	add	r1, r0
 8006b44:	6019      	str	r1, [r3, #0]
 8006b46:	605a      	str	r2, [r3, #4]
 8006b48:	e7d8      	b.n	8006afc <_free_r+0x24>
 8006b4a:	d902      	bls.n	8006b52 <_free_r+0x7a>
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	e7d4      	b.n	8006afc <_free_r+0x24>
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	1821      	adds	r1, r4, r0
 8006b56:	428a      	cmp	r2, r1
 8006b58:	bf01      	itttt	eq
 8006b5a:	6811      	ldreq	r1, [r2, #0]
 8006b5c:	6852      	ldreq	r2, [r2, #4]
 8006b5e:	1809      	addeq	r1, r1, r0
 8006b60:	6021      	streq	r1, [r4, #0]
 8006b62:	6062      	str	r2, [r4, #4]
 8006b64:	605c      	str	r4, [r3, #4]
 8006b66:	e7c9      	b.n	8006afc <_free_r+0x24>
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000600 	.word	0x20000600

08006b70 <_malloc_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	1ccd      	adds	r5, r1, #3
 8006b74:	f025 0503 	bic.w	r5, r5, #3
 8006b78:	3508      	adds	r5, #8
 8006b7a:	2d0c      	cmp	r5, #12
 8006b7c:	bf38      	it	cc
 8006b7e:	250c      	movcc	r5, #12
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	4606      	mov	r6, r0
 8006b84:	db01      	blt.n	8006b8a <_malloc_r+0x1a>
 8006b86:	42a9      	cmp	r1, r5
 8006b88:	d903      	bls.n	8006b92 <_malloc_r+0x22>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	2000      	movs	r0, #0
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	f000 f881 	bl	8006c98 <__malloc_lock>
 8006b96:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <_malloc_r+0xb4>)
 8006b98:	6814      	ldr	r4, [r2, #0]
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	b991      	cbnz	r1, 8006bc4 <_malloc_r+0x54>
 8006b9e:	4c22      	ldr	r4, [pc, #136]	; (8006c28 <_malloc_r+0xb8>)
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	b91b      	cbnz	r3, 8006bac <_malloc_r+0x3c>
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f867 	bl	8006c78 <_sbrk_r>
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	4629      	mov	r1, r5
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f000 f862 	bl	8006c78 <_sbrk_r>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d126      	bne.n	8006c06 <_malloc_r+0x96>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	4630      	mov	r0, r6
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	f000 f86c 	bl	8006c9a <__malloc_unlock>
 8006bc2:	e7e4      	b.n	8006b8e <_malloc_r+0x1e>
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	1b5b      	subs	r3, r3, r5
 8006bc8:	d41a      	bmi.n	8006c00 <_malloc_r+0x90>
 8006bca:	2b0b      	cmp	r3, #11
 8006bcc:	d90f      	bls.n	8006bee <_malloc_r+0x7e>
 8006bce:	600b      	str	r3, [r1, #0]
 8006bd0:	18cc      	adds	r4, r1, r3
 8006bd2:	50cd      	str	r5, [r1, r3]
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f000 f860 	bl	8006c9a <__malloc_unlock>
 8006bda:	f104 000b 	add.w	r0, r4, #11
 8006bde:	1d23      	adds	r3, r4, #4
 8006be0:	f020 0007 	bic.w	r0, r0, #7
 8006be4:	1ac3      	subs	r3, r0, r3
 8006be6:	d01b      	beq.n	8006c20 <_malloc_r+0xb0>
 8006be8:	425a      	negs	r2, r3
 8006bea:	50e2      	str	r2, [r4, r3]
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	428c      	cmp	r4, r1
 8006bf0:	bf0b      	itete	eq
 8006bf2:	6863      	ldreq	r3, [r4, #4]
 8006bf4:	684b      	ldrne	r3, [r1, #4]
 8006bf6:	6013      	streq	r3, [r2, #0]
 8006bf8:	6063      	strne	r3, [r4, #4]
 8006bfa:	bf18      	it	ne
 8006bfc:	460c      	movne	r4, r1
 8006bfe:	e7e9      	b.n	8006bd4 <_malloc_r+0x64>
 8006c00:	460c      	mov	r4, r1
 8006c02:	6849      	ldr	r1, [r1, #4]
 8006c04:	e7ca      	b.n	8006b9c <_malloc_r+0x2c>
 8006c06:	1cc4      	adds	r4, r0, #3
 8006c08:	f024 0403 	bic.w	r4, r4, #3
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d005      	beq.n	8006c1c <_malloc_r+0xac>
 8006c10:	1a21      	subs	r1, r4, r0
 8006c12:	4630      	mov	r0, r6
 8006c14:	f000 f830 	bl	8006c78 <_sbrk_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d0cd      	beq.n	8006bb8 <_malloc_r+0x48>
 8006c1c:	6025      	str	r5, [r4, #0]
 8006c1e:	e7d9      	b.n	8006bd4 <_malloc_r+0x64>
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
 8006c22:	bf00      	nop
 8006c24:	20000600 	.word	0x20000600
 8006c28:	20000604 	.word	0x20000604

08006c2c <_realloc_r>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	4607      	mov	r7, r0
 8006c30:	4614      	mov	r4, r2
 8006c32:	460e      	mov	r6, r1
 8006c34:	b921      	cbnz	r1, 8006c40 <_realloc_r+0x14>
 8006c36:	4611      	mov	r1, r2
 8006c38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c3c:	f7ff bf98 	b.w	8006b70 <_malloc_r>
 8006c40:	b922      	cbnz	r2, 8006c4c <_realloc_r+0x20>
 8006c42:	f7ff ff49 	bl	8006ad8 <_free_r>
 8006c46:	4625      	mov	r5, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c4c:	f000 f826 	bl	8006c9c <_malloc_usable_size_r>
 8006c50:	4284      	cmp	r4, r0
 8006c52:	d90f      	bls.n	8006c74 <_realloc_r+0x48>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4638      	mov	r0, r7
 8006c58:	f7ff ff8a 	bl	8006b70 <_malloc_r>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0f2      	beq.n	8006c48 <_realloc_r+0x1c>
 8006c62:	4631      	mov	r1, r6
 8006c64:	4622      	mov	r2, r4
 8006c66:	f7ff ff11 	bl	8006a8c <memcpy>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f7ff ff33 	bl	8006ad8 <_free_r>
 8006c72:	e7e9      	b.n	8006c48 <_realloc_r+0x1c>
 8006c74:	4635      	mov	r5, r6
 8006c76:	e7e7      	b.n	8006c48 <_realloc_r+0x1c>

08006c78 <_sbrk_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4c05      	ldr	r4, [pc, #20]	; (8006c94 <_sbrk_r+0x1c>)
 8006c7e:	4605      	mov	r5, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	f000 f814 	bl	8006cb0 <_sbrk>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_sbrk_r+0x1a>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_sbrk_r+0x1a>
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20001c30 	.word	0x20001c30

08006c98 <__malloc_lock>:
 8006c98:	4770      	bx	lr

08006c9a <__malloc_unlock>:
 8006c9a:	4770      	bx	lr

08006c9c <_malloc_usable_size_r>:
 8006c9c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f1a0 0004 	sub.w	r0, r0, #4
 8006ca6:	bfbc      	itt	lt
 8006ca8:	580b      	ldrlt	r3, [r1, r0]
 8006caa:	18c0      	addlt	r0, r0, r3
 8006cac:	4770      	bx	lr
	...

08006cb0 <_sbrk>:
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <_sbrk+0x14>)
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	b909      	cbnz	r1, 8006cbc <_sbrk+0xc>
 8006cb8:	4903      	ldr	r1, [pc, #12]	; (8006cc8 <_sbrk+0x18>)
 8006cba:	6019      	str	r1, [r3, #0]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	4402      	add	r2, r0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	4770      	bx	lr
 8006cc4:	20000608 	.word	0x20000608
 8006cc8:	20001c34 	.word	0x20001c34

08006ccc <_init>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr

08006cd8 <_fini>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr
